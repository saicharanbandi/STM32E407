ARM GAS  /tmp/ccSp6EsV.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NMI_Handler,"ax",%progbits
  18              		.align	1
  19              		.global	NMI_Handler
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	NMI_Handler:
  26              	.LFB123:
  27              		.file 1 "Src/stm32f4xx_it.c"
   1:Src/stm32f4xx_it.c **** /**
   2:Src/stm32f4xx_it.c ****   ******************************************************************************
   3:Src/stm32f4xx_it.c ****   * @file    stm32f4xx_it.c
   4:Src/stm32f4xx_it.c ****   * @brief   Interrupt Service Routines.
   5:Src/stm32f4xx_it.c ****   ******************************************************************************
   6:Src/stm32f4xx_it.c ****   *
   7:Src/stm32f4xx_it.c ****   * COPYRIGHT(c) 2017 STMicroelectronics
   8:Src/stm32f4xx_it.c ****   *
   9:Src/stm32f4xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:Src/stm32f4xx_it.c ****   * are permitted provided that the following conditions are met:
  11:Src/stm32f4xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:Src/stm32f4xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:Src/stm32f4xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:Src/stm32f4xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:Src/stm32f4xx_it.c ****   *      and/or other materials provided with the distribution.
  16:Src/stm32f4xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:Src/stm32f4xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:Src/stm32f4xx_it.c ****   *      without specific prior written permission.
  19:Src/stm32f4xx_it.c ****   *
  20:Src/stm32f4xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:Src/stm32f4xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:Src/stm32f4xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:Src/stm32f4xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:Src/stm32f4xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:Src/stm32f4xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:Src/stm32f4xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:Src/stm32f4xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:Src/stm32f4xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:Src/stm32f4xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:Src/stm32f4xx_it.c ****   *
  31:Src/stm32f4xx_it.c ****   ******************************************************************************
ARM GAS  /tmp/ccSp6EsV.s 			page 2


  32:Src/stm32f4xx_it.c ****   */
  33:Src/stm32f4xx_it.c **** /* Includes ------------------------------------------------------------------*/
  34:Src/stm32f4xx_it.c **** #include "stm32f4xx_hal.h"
  35:Src/stm32f4xx_it.c **** #include "stm32f4xx.h"
  36:Src/stm32f4xx_it.c **** #include "stm32f4xx_it.h"
  37:Src/stm32f4xx_it.c **** 
  38:Src/stm32f4xx_it.c **** /* USER CODE BEGIN 0 */
  39:Src/stm32f4xx_it.c **** /* Use start_capture variable to suggest that hardware_trigger occured */
  40:Src/stm32f4xx_it.c **** extern unsigned char start_capture;
  41:Src/stm32f4xx_it.c **** 
  42:Src/stm32f4xx_it.c **** /* temp vector */
  43:Src/stm32f4xx_it.c **** volatile uint16_t tmp[2] = {0, 0};
  44:Src/stm32f4xx_it.c **** 
  45:Src/stm32f4xx_it.c **** /* uwDiffCapture will be initialized in main () */
  46:Src/stm32f4xx_it.c **** volatile uint16_t uwDiffCapture = 0;
  47:Src/stm32f4xx_it.c **** /* uIRQ_Temp will be initialized in main() */
  48:Src/stm32f4xx_it.c **** volatile extern unsigned char uIRQ_Temp;
  49:Src/stm32f4xx_it.c **** volatile extern unsigned char uPulse_width_2T;
  50:Src/stm32f4xx_it.c **** volatile extern unsigned char uPulse_width_T;
  51:Src/stm32f4xx_it.c **** 
  52:Src/stm32f4xx_it.c **** /* USER CODE END 0 */
  53:Src/stm32f4xx_it.c **** 
  54:Src/stm32f4xx_it.c **** /* External variables --------------------------------------------------------*/
  55:Src/stm32f4xx_it.c **** extern TIM_HandleTypeDef htim4;
  56:Src/stm32f4xx_it.c **** 
  57:Src/stm32f4xx_it.c **** /******************************************************************************/
  58:Src/stm32f4xx_it.c **** /*            Cortex-M4 Processor Interruption and Exception Handlers         */ 
  59:Src/stm32f4xx_it.c **** /******************************************************************************/
  60:Src/stm32f4xx_it.c **** 
  61:Src/stm32f4xx_it.c **** /**
  62:Src/stm32f4xx_it.c **** * @brief This function handles Non maskable interrupt.
  63:Src/stm32f4xx_it.c **** */
  64:Src/stm32f4xx_it.c **** void NMI_Handler(void)
  65:Src/stm32f4xx_it.c **** {
  28              		.loc 1 65 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE123:
  37              		.section	.text.HardFault_Handler,"ax",%progbits
  38              		.align	1
  39              		.global	HardFault_Handler
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  43              		.fpu fpv4-sp-d16
  45              	HardFault_Handler:
  46              	.LFB124:
  66:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  67:Src/stm32f4xx_it.c **** 
  68:Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  69:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  70:Src/stm32f4xx_it.c **** 
  71:Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
ARM GAS  /tmp/ccSp6EsV.s 			page 3


  72:Src/stm32f4xx_it.c **** }
  73:Src/stm32f4xx_it.c **** 
  74:Src/stm32f4xx_it.c **** /**
  75:Src/stm32f4xx_it.c **** * @brief This function handles Hard fault interrupt.
  76:Src/stm32f4xx_it.c **** */
  77:Src/stm32f4xx_it.c **** void HardFault_Handler(void)
  78:Src/stm32f4xx_it.c **** {
  47              		.loc 1 78 0
  48              		.cfi_startproc
  49              		@ Volatile: function does not return.
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              		@ link register save eliminated.
  53              	.L3:
  54 0000 FEE7     		b	.L3
  55              		.cfi_endproc
  56              	.LFE124:
  58              		.section	.text.MemManage_Handler,"ax",%progbits
  59              		.align	1
  60              		.global	MemManage_Handler
  61              		.syntax unified
  62              		.thumb
  63              		.thumb_func
  64              		.fpu fpv4-sp-d16
  66              	MemManage_Handler:
  67              	.LFB125:
  79:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  80:Src/stm32f4xx_it.c **** 
  81:Src/stm32f4xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  82:Src/stm32f4xx_it.c ****   while (1)
  83:Src/stm32f4xx_it.c ****   {
  84:Src/stm32f4xx_it.c ****   }
  85:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
  86:Src/stm32f4xx_it.c **** 
  87:Src/stm32f4xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
  88:Src/stm32f4xx_it.c **** }
  89:Src/stm32f4xx_it.c **** 
  90:Src/stm32f4xx_it.c **** /**
  91:Src/stm32f4xx_it.c **** * @brief This function handles Memory management fault.
  92:Src/stm32f4xx_it.c **** */
  93:Src/stm32f4xx_it.c **** void MemManage_Handler(void)
  94:Src/stm32f4xx_it.c **** {
  68              		.loc 1 94 0
  69              		.cfi_startproc
  70              		@ Volatile: function does not return.
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 0, uses_anonymous_args = 0
  73              		@ link register save eliminated.
  74              	.L5:
  75 0000 FEE7     		b	.L5
  76              		.cfi_endproc
  77              	.LFE125:
  79              		.section	.text.BusFault_Handler,"ax",%progbits
  80              		.align	1
  81              		.global	BusFault_Handler
  82              		.syntax unified
  83              		.thumb
ARM GAS  /tmp/ccSp6EsV.s 			page 4


  84              		.thumb_func
  85              		.fpu fpv4-sp-d16
  87              	BusFault_Handler:
  88              	.LFB126:
  95:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  96:Src/stm32f4xx_it.c **** 
  97:Src/stm32f4xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
  98:Src/stm32f4xx_it.c ****   while (1)
  99:Src/stm32f4xx_it.c ****   {
 100:Src/stm32f4xx_it.c ****   }
 101:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 1 */
 102:Src/stm32f4xx_it.c **** 
 103:Src/stm32f4xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 1 */
 104:Src/stm32f4xx_it.c **** }
 105:Src/stm32f4xx_it.c **** 
 106:Src/stm32f4xx_it.c **** /**
 107:Src/stm32f4xx_it.c **** * @brief This function handles Pre-fetch fault, memory access fault.
 108:Src/stm32f4xx_it.c **** */
 109:Src/stm32f4xx_it.c **** void BusFault_Handler(void)
 110:Src/stm32f4xx_it.c **** {
  89              		.loc 1 110 0
  90              		.cfi_startproc
  91              		@ Volatile: function does not return.
  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 0, uses_anonymous_args = 0
  94              		@ link register save eliminated.
  95              	.L7:
  96 0000 FEE7     		b	.L7
  97              		.cfi_endproc
  98              	.LFE126:
 100              		.section	.text.UsageFault_Handler,"ax",%progbits
 101              		.align	1
 102              		.global	UsageFault_Handler
 103              		.syntax unified
 104              		.thumb
 105              		.thumb_func
 106              		.fpu fpv4-sp-d16
 108              	UsageFault_Handler:
 109              	.LFB127:
 111:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 112:Src/stm32f4xx_it.c **** 
 113:Src/stm32f4xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 114:Src/stm32f4xx_it.c ****   while (1)
 115:Src/stm32f4xx_it.c ****   {
 116:Src/stm32f4xx_it.c ****   }
 117:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 1 */
 118:Src/stm32f4xx_it.c **** 
 119:Src/stm32f4xx_it.c ****   /* USER CODE END BusFault_IRQn 1 */
 120:Src/stm32f4xx_it.c **** }
 121:Src/stm32f4xx_it.c **** 
 122:Src/stm32f4xx_it.c **** /**
 123:Src/stm32f4xx_it.c **** * @brief This function handles Undefined instruction or illegal state.
 124:Src/stm32f4xx_it.c **** */
 125:Src/stm32f4xx_it.c **** void UsageFault_Handler(void)
 126:Src/stm32f4xx_it.c **** {
 110              		.loc 1 126 0
 111              		.cfi_startproc
ARM GAS  /tmp/ccSp6EsV.s 			page 5


 112              		@ Volatile: function does not return.
 113              		@ args = 0, pretend = 0, frame = 0
 114              		@ frame_needed = 0, uses_anonymous_args = 0
 115              		@ link register save eliminated.
 116              	.L9:
 117 0000 FEE7     		b	.L9
 118              		.cfi_endproc
 119              	.LFE127:
 121              		.section	.text.SVC_Handler,"ax",%progbits
 122              		.align	1
 123              		.global	SVC_Handler
 124              		.syntax unified
 125              		.thumb
 126              		.thumb_func
 127              		.fpu fpv4-sp-d16
 129              	SVC_Handler:
 130              	.LFB128:
 127:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 128:Src/stm32f4xx_it.c **** 
 129:Src/stm32f4xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 130:Src/stm32f4xx_it.c ****   while (1)
 131:Src/stm32f4xx_it.c ****   {
 132:Src/stm32f4xx_it.c ****   }
 133:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 1 */
 134:Src/stm32f4xx_it.c **** 
 135:Src/stm32f4xx_it.c ****   /* USER CODE END UsageFault_IRQn 1 */
 136:Src/stm32f4xx_it.c **** }
 137:Src/stm32f4xx_it.c **** 
 138:Src/stm32f4xx_it.c **** /**
 139:Src/stm32f4xx_it.c **** * @brief This function handles System service call via SWI instruction.
 140:Src/stm32f4xx_it.c **** */
 141:Src/stm32f4xx_it.c **** void SVC_Handler(void)
 142:Src/stm32f4xx_it.c **** {
 131              		.loc 1 142 0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 0
 134              		@ frame_needed = 0, uses_anonymous_args = 0
 135              		@ link register save eliminated.
 136 0000 7047     		bx	lr
 137              		.cfi_endproc
 138              	.LFE128:
 140              		.section	.text.DebugMon_Handler,"ax",%progbits
 141              		.align	1
 142              		.global	DebugMon_Handler
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 146              		.fpu fpv4-sp-d16
 148              	DebugMon_Handler:
 149              	.LFB129:
 143:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 144:Src/stm32f4xx_it.c **** 
 145:Src/stm32f4xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 146:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 147:Src/stm32f4xx_it.c **** 
 148:Src/stm32f4xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 149:Src/stm32f4xx_it.c **** }
ARM GAS  /tmp/ccSp6EsV.s 			page 6


 150:Src/stm32f4xx_it.c **** 
 151:Src/stm32f4xx_it.c **** /**
 152:Src/stm32f4xx_it.c **** * @brief This function handles Debug monitor.
 153:Src/stm32f4xx_it.c **** */
 154:Src/stm32f4xx_it.c **** void DebugMon_Handler(void)
 155:Src/stm32f4xx_it.c **** {
 150              		.loc 1 155 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154              		@ link register save eliminated.
 155 0000 7047     		bx	lr
 156              		.cfi_endproc
 157              	.LFE129:
 159              		.section	.text.PendSV_Handler,"ax",%progbits
 160              		.align	1
 161              		.global	PendSV_Handler
 162              		.syntax unified
 163              		.thumb
 164              		.thumb_func
 165              		.fpu fpv4-sp-d16
 167              	PendSV_Handler:
 168              	.LFB130:
 156:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 157:Src/stm32f4xx_it.c **** 
 158:Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 159:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 160:Src/stm32f4xx_it.c **** 
 161:Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 162:Src/stm32f4xx_it.c **** }
 163:Src/stm32f4xx_it.c **** 
 164:Src/stm32f4xx_it.c **** /**
 165:Src/stm32f4xx_it.c **** * @brief This function handles Pendable request for system service.
 166:Src/stm32f4xx_it.c **** */
 167:Src/stm32f4xx_it.c **** void PendSV_Handler(void)
 168:Src/stm32f4xx_it.c **** {
 169              		.loc 1 168 0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 0, uses_anonymous_args = 0
 173              		@ link register save eliminated.
 174 0000 7047     		bx	lr
 175              		.cfi_endproc
 176              	.LFE130:
 178              		.section	.text.SysTick_Handler,"ax",%progbits
 179              		.align	1
 180              		.global	SysTick_Handler
 181              		.syntax unified
 182              		.thumb
 183              		.thumb_func
 184              		.fpu fpv4-sp-d16
 186              	SysTick_Handler:
 187              	.LFB131:
 169:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 170:Src/stm32f4xx_it.c **** 
 171:Src/stm32f4xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 172:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
ARM GAS  /tmp/ccSp6EsV.s 			page 7


 173:Src/stm32f4xx_it.c **** 
 174:Src/stm32f4xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 175:Src/stm32f4xx_it.c **** }
 176:Src/stm32f4xx_it.c **** 
 177:Src/stm32f4xx_it.c **** /**
 178:Src/stm32f4xx_it.c **** * @brief This function handles System tick timer.
 179:Src/stm32f4xx_it.c **** */
 180:Src/stm32f4xx_it.c **** void SysTick_Handler(void)
 181:Src/stm32f4xx_it.c **** {
 188              		.loc 1 181 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 0, uses_anonymous_args = 0
 192              		.loc 1 181 0
 193 0000 08B5     		push	{r3, lr}
 194              	.LCFI0:
 195              		.cfi_def_cfa_offset 8
 196              		.cfi_offset 3, -8
 197              		.cfi_offset 14, -4
 182:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 183:Src/stm32f4xx_it.c **** 
 184:Src/stm32f4xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 185:Src/stm32f4xx_it.c ****   HAL_IncTick();
 198              		.loc 1 185 0
 199 0002 FFF7FEFF 		bl	HAL_IncTick
 200              	.LVL0:
 186:Src/stm32f4xx_it.c ****   HAL_SYSTICK_IRQHandler();
 201              		.loc 1 186 0
 202 0006 FFF7FEFF 		bl	HAL_SYSTICK_IRQHandler
 203              	.LVL1:
 204 000a 08BD     		pop	{r3, pc}
 205              		.cfi_endproc
 206              	.LFE131:
 208              		.section	.text.TIM4_IRQHandler,"ax",%progbits
 209              		.align	1
 210              		.global	TIM4_IRQHandler
 211              		.syntax unified
 212              		.thumb
 213              		.thumb_func
 214              		.fpu fpv4-sp-d16
 216              	TIM4_IRQHandler:
 217              	.LFB132:
 187:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 188:Src/stm32f4xx_it.c **** 
 189:Src/stm32f4xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 190:Src/stm32f4xx_it.c **** }
 191:Src/stm32f4xx_it.c **** 
 192:Src/stm32f4xx_it.c **** /******************************************************************************/
 193:Src/stm32f4xx_it.c **** /* STM32F4xx Peripheral Interrupt Handlers                                    */
 194:Src/stm32f4xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 195:Src/stm32f4xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 196:Src/stm32f4xx_it.c **** /* please refer to the startup file (startup_stm32f4xx.s).                    */
 197:Src/stm32f4xx_it.c **** /******************************************************************************/
 198:Src/stm32f4xx_it.c **** 
 199:Src/stm32f4xx_it.c **** /**
 200:Src/stm32f4xx_it.c **** * @brief This function handles TIM4 global interrupt.
 201:Src/stm32f4xx_it.c **** **/
ARM GAS  /tmp/ccSp6EsV.s 			page 8


 202:Src/stm32f4xx_it.c **** 
 203:Src/stm32f4xx_it.c **** void TIM4_IRQHandler(void)
 204:Src/stm32f4xx_it.c **** {
 218              		.loc 1 204 0
 219              		.cfi_startproc
 220              		@ args = 0, pretend = 0, frame = 0
 221              		@ frame_needed = 0, uses_anonymous_args = 0
 222 0000 10B5     		push	{r4, lr}
 223              	.LCFI1:
 224              		.cfi_def_cfa_offset 8
 225              		.cfi_offset 4, -8
 226              		.cfi_offset 14, -4
 205:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 0 */
 206:Src/stm32f4xx_it.c **** 
 207:Src/stm32f4xx_it.c ****   /* USER CODE END TIM4_IRQn 0 */
 208:Src/stm32f4xx_it.c ****   HAL_TIM_IRQHandler(&htim4);
 227              		.loc 1 208 0
 228 0002 2E4C     		ldr	r4, .L23
 229 0004 2046     		mov	r0, r4
 230 0006 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 231              	.LVL2:
 209:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 1 */
 210:Src/stm32f4xx_it.c ****   uPulse_width_2T = 0;
 232              		.loc 1 210 0
 233 000a 0023     		movs	r3, #0
 234 000c 2C4A     		ldr	r2, .L23+4
 235 000e 1370     		strb	r3, [r2]
 211:Src/stm32f4xx_it.c ****   uPulse_width_T = 0;
 236              		.loc 1 211 0
 237 0010 2C4A     		ldr	r2, .L23+8
 238 0012 1370     		strb	r3, [r2]
 212:Src/stm32f4xx_it.c ****   uIRQ_Temp = 0;
 239              		.loc 1 212 0
 240 0014 2C4A     		ldr	r2, .L23+12
 241 0016 1370     		strb	r3, [r2]
 213:Src/stm32f4xx_it.c ****   tmp[1] = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 242              		.loc 1 213 0
 243 0018 0821     		movs	r1, #8
 244 001a 2046     		mov	r0, r4
 245 001c FFF7FEFF 		bl	HAL_TIM_ReadCapturedValue
 246              	.LVL3:
 247 0020 80B2     		uxth	r0, r0
 248 0022 2A4B     		ldr	r3, .L23+16
 249 0024 5880     		strh	r0, [r3, #2]	@ movhi
 214:Src/stm32f4xx_it.c ****   
 215:Src/stm32f4xx_it.c ****   if(tmp[1] > tmp[0])
 250              		.loc 1 215 0
 251 0026 5A88     		ldrh	r2, [r3, #2]
 252 0028 92B2     		uxth	r2, r2
 253 002a 1B88     		ldrh	r3, [r3]
 254 002c 9BB2     		uxth	r3, r3
 255 002e 9A42     		cmp	r2, r3
 256 0030 29D9     		bls	.L16
 216:Src/stm32f4xx_it.c ****     {
 217:Src/stm32f4xx_it.c ****       uwDiffCapture = tmp[1] - tmp[0];
 257              		.loc 1 217 0
 258 0032 264A     		ldr	r2, .L23+16
ARM GAS  /tmp/ccSp6EsV.s 			page 9


 259 0034 5388     		ldrh	r3, [r2, #2]
 260 0036 9BB2     		uxth	r3, r3
 261 0038 1288     		ldrh	r2, [r2]
 262 003a 92B2     		uxth	r2, r2
 263 003c 9B1A     		subs	r3, r3, r2
 264 003e 9BB2     		uxth	r3, r3
 265 0040 234A     		ldr	r2, .L23+20
 266 0042 1380     		strh	r3, [r2]	@ movhi
 267              	.L17:
 218:Src/stm32f4xx_it.c ****     }
 219:Src/stm32f4xx_it.c ****   else /* if tmp[1] <= tmp[0]*/
 220:Src/stm32f4xx_it.c ****     {
 221:Src/stm32f4xx_it.c ****       uwDiffCapture = (0xFFFF - tmp[1]) + tmp[0];
 222:Src/stm32f4xx_it.c ****     }
 223:Src/stm32f4xx_it.c **** 
 224:Src/stm32f4xx_it.c ****   /* Checking for pulse of 2T width */
 225:Src/stm32f4xx_it.c ****   if((uwDiffCapture > 6300) && (uwDiffCapture < 6500))
 268              		.loc 1 225 0
 269 0044 224B     		ldr	r3, .L23+20
 270 0046 1B88     		ldrh	r3, [r3]
 271 0048 9BB2     		uxth	r3, r3
 272 004a 41F69C02 		movw	r2, #6300
 273 004e 9342     		cmp	r3, r2
 274 0050 06D9     		bls	.L18
 275              		.loc 1 225 0 is_stmt 0 discriminator 1
 276 0052 1F4B     		ldr	r3, .L23+20
 277 0054 1B88     		ldrh	r3, [r3]
 278 0056 9BB2     		uxth	r3, r3
 279 0058 41F66312 		movw	r2, #6499
 280 005c 9342     		cmp	r3, r2
 281 005e 1DD9     		bls	.L21
 282              	.L18:
 226:Src/stm32f4xx_it.c ****     {
 227:Src/stm32f4xx_it.c ****       uPulse_width_T = 1;
 228:Src/stm32f4xx_it.c ****       HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 229:Src/stm32f4xx_it.c ****     }
 230:Src/stm32f4xx_it.c ****   else if((uwDiffCapture > 12700) && (uwDiffCapture < 12900))
 283              		.loc 1 230 0 is_stmt 1
 284 0060 1B4B     		ldr	r3, .L23+20
 285 0062 1B88     		ldrh	r3, [r3]
 286 0064 9BB2     		uxth	r3, r3
 287 0066 43F29C12 		movw	r2, #12700
 288 006a 9342     		cmp	r3, r2
 289 006c 06D9     		bls	.L19
 290              		.loc 1 230 0 is_stmt 0 discriminator 1
 291 006e 184B     		ldr	r3, .L23+20
 292 0070 1B88     		ldrh	r3, [r3]
 293 0072 9BB2     		uxth	r3, r3
 294 0074 43F26322 		movw	r2, #12899
 295 0078 9342     		cmp	r3, r2
 296 007a 17D9     		bls	.L22
 297              	.L19:
 231:Src/stm32f4xx_it.c ****        {
 232:Src/stm32f4xx_it.c ****   	 uPulse_width_2T = 1;
 233:Src/stm32f4xx_it.c ****   	 HAL_GPIO_WritePin(LED_Yellow_GPIO_Port, LED_Yellow_Pin, GPIO_PIN_SET);
 234:Src/stm32f4xx_it.c ****        }
 235:Src/stm32f4xx_it.c **** 
ARM GAS  /tmp/ccSp6EsV.s 			page 10


 236:Src/stm32f4xx_it.c **** 
 237:Src/stm32f4xx_it.c **** 
 238:Src/stm32f4xx_it.c ****   /* Left shifting the vector */
 239:Src/stm32f4xx_it.c ****   tmp[0] = tmp[1];
 298              		.loc 1 239 0 is_stmt 1
 299 007c 134A     		ldr	r2, .L23+16
 300 007e 5388     		ldrh	r3, [r2, #2]
 301 0080 9BB2     		uxth	r3, r3
 302 0082 1380     		strh	r3, [r2]	@ movhi
 303 0084 10BD     		pop	{r4, pc}
 304              	.L16:
 221:Src/stm32f4xx_it.c ****     }
 305              		.loc 1 221 0
 306 0086 114A     		ldr	r2, .L23+16
 307 0088 1388     		ldrh	r3, [r2]
 308 008a 9BB2     		uxth	r3, r3
 309 008c 5288     		ldrh	r2, [r2, #2]
 310 008e 92B2     		uxth	r2, r2
 311 0090 9B1A     		subs	r3, r3, r2
 312 0092 013B     		subs	r3, r3, #1
 313 0094 9BB2     		uxth	r3, r3
 314 0096 0E4A     		ldr	r2, .L23+20
 315 0098 1380     		strh	r3, [r2]	@ movhi
 316 009a D3E7     		b	.L17
 317              	.L21:
 227:Src/stm32f4xx_it.c ****       HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 318              		.loc 1 227 0
 319 009c 0122     		movs	r2, #1
 320 009e 094B     		ldr	r3, .L23+8
 321 00a0 1A70     		strb	r2, [r3]
 228:Src/stm32f4xx_it.c ****     }
 322              		.loc 1 228 0
 323 00a2 0821     		movs	r1, #8
 324 00a4 0B48     		ldr	r0, .L23+24
 325 00a6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 326              	.LVL4:
 327 00aa E7E7     		b	.L19
 328              	.L22:
 232:Src/stm32f4xx_it.c ****   	 HAL_GPIO_WritePin(LED_Yellow_GPIO_Port, LED_Yellow_Pin, GPIO_PIN_SET);
 329              		.loc 1 232 0
 330 00ac 0122     		movs	r2, #1
 331 00ae 044B     		ldr	r3, .L23+4
 332 00b0 1A70     		strb	r2, [r3]
 233:Src/stm32f4xx_it.c ****        }
 333              		.loc 1 233 0
 334 00b2 1021     		movs	r1, #16
 335 00b4 0748     		ldr	r0, .L23+24
 336 00b6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 337              	.LVL5:
 338 00ba DFE7     		b	.L19
 339              	.L24:
 340              		.align	2
 341              	.L23:
 342 00bc 00000000 		.word	htim4
 343 00c0 00000000 		.word	uPulse_width_2T
 344 00c4 00000000 		.word	uPulse_width_T
 345 00c8 00000000 		.word	uIRQ_Temp
ARM GAS  /tmp/ccSp6EsV.s 			page 11


 346 00cc 00000000 		.word	.LANCHOR0
 347 00d0 00000000 		.word	.LANCHOR1
 348 00d4 00140240 		.word	1073878016
 349              		.cfi_endproc
 350              	.LFE132:
 352              		.section	.text.EXTI15_10_IRQHandler,"ax",%progbits
 353              		.align	1
 354              		.global	EXTI15_10_IRQHandler
 355              		.syntax unified
 356              		.thumb
 357              		.thumb_func
 358              		.fpu fpv4-sp-d16
 360              	EXTI15_10_IRQHandler:
 361              	.LFB133:
 240:Src/stm32f4xx_it.c **** 
 241:Src/stm32f4xx_it.c ****   /* if((uwDiffCapture > 12700) && (uwDiffCapture < 12900)) */
 242:Src/stm32f4xx_it.c ****   /*   { */
 243:Src/stm32f4xx_it.c ****   /*     variable1 = 1; */
 244:Src/stm32f4xx_it.c ****   /*   } */
 245:Src/stm32f4xx_it.c **** 
 246:Src/stm32f4xx_it.c ****   /* /\* Execute this code only if the variable1 = 1 *\/ */
 247:Src/stm32f4xx_it.c ****   /*     /\* Read state and write to Current bit; *\/ */
 248:Src/stm32f4xx_it.c ****   /*     if ((uwDiffCapture > 6300) && (uwDiffCapture < 6500)) */
 249:Src/stm32f4xx_it.c ****   /* 	{ */
 250:Src/stm32f4xx_it.c ****   /* 	  /\* Here update the receive buffer index *\/ */
 251:Src/stm32f4xx_it.c ****   /* 	  if ((uwDiffCapture > 6300) && (uwDiffCapture < 6500)) */
 252:Src/stm32f4xx_it.c ****   /* 	    { */
 253:Src/stm32f4xx_it.c ****   /* 	      tmp[i] = Current_bit; */
 254:Src/stm32f4xx_it.c ****   /* 	    } */
 255:Src/stm32f4xx_it.c ****   /* 	  else { */
 256:Src/stm32f4xx_it.c ****   /* 	    Error; */
 257:Src/stm32f4xx_it.c ****   /* 	  } */
 258:Src/stm32f4xx_it.c ****   /* 	} */
 259:Src/stm32f4xx_it.c ****   /*     else if((uwDiffCapture > 12700) && (uwDiffCapture > 12900)) */
 260:Src/stm32f4xx_it.c ****   /* 	{ */
 261:Src/stm32f4xx_it.c ****   /* 	  tmp[i] = ~ Current_bit; */
 262:Src/stm32f4xx_it.c ****   /* 	} */
 263:Src/stm32f4xx_it.c ****   /*     i++; */
 264:Src/stm32f4xx_it.c ****   /*     return i; */
 265:Src/stm32f4xx_it.c ****   /*   } */
 266:Src/stm32f4xx_it.c ****     
 267:Src/stm32f4xx_it.c ****   
 268:Src/stm32f4xx_it.c **** 
 269:Src/stm32f4xx_it.c ****   /* USER CODE END TIM4_IRQn 1 */
 270:Src/stm32f4xx_it.c **** }
 271:Src/stm32f4xx_it.c **** 
 272:Src/stm32f4xx_it.c **** /**
 273:Src/stm32f4xx_it.c **** * @brief This function handles EXTI line[15:10] interrupts.
 274:Src/stm32f4xx_it.c **** */
 275:Src/stm32f4xx_it.c **** void EXTI15_10_IRQHandler(void)
 276:Src/stm32f4xx_it.c **** {
 362              		.loc 1 276 0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 0
 365              		@ frame_needed = 0, uses_anonymous_args = 0
 366 0000 08B5     		push	{r3, lr}
 367              	.LCFI2:
ARM GAS  /tmp/ccSp6EsV.s 			page 12


 368              		.cfi_def_cfa_offset 8
 369              		.cfi_offset 3, -8
 370              		.cfi_offset 14, -4
 277:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN EXTI15_10_IRQn 0 */
 278:Src/stm32f4xx_it.c **** 
 279:Src/stm32f4xx_it.c ****   /* USER CODE END EXTI15_10_IRQn 0 */
 280:Src/stm32f4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 371              		.loc 1 280 0
 372 0002 4FF48050 		mov	r0, #4096
 373 0006 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 374              	.LVL6:
 281:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN EXTI15_10_IRQn 1 */
 282:Src/stm32f4xx_it.c ****   start_capture = 1;
 375              		.loc 1 282 0
 376 000a 0122     		movs	r2, #1
 377 000c 014B     		ldr	r3, .L27
 378 000e 1A70     		strb	r2, [r3]
 379 0010 08BD     		pop	{r3, pc}
 380              	.L28:
 381 0012 00BF     		.align	2
 382              	.L27:
 383 0014 00000000 		.word	start_capture
 384              		.cfi_endproc
 385              	.LFE133:
 387              		.global	uwDiffCapture
 388              		.global	tmp
 389              		.section	.bss.tmp,"aw",%nobits
 390              		.align	2
 391              		.set	.LANCHOR0,. + 0
 394              	tmp:
 395 0000 00000000 		.space	4
 396              		.section	.bss.uwDiffCapture,"aw",%nobits
 397              		.align	1
 398              		.set	.LANCHOR1,. + 0
 401              	uwDiffCapture:
 402 0000 0000     		.space	2
 403              		.text
 404              	.Letext0:
 405              		.file 2 "/home/saicharan/arm/arm-none-eabi/include/machine/_default_types.h"
 406              		.file 3 "/home/saicharan/arm/arm-none-eabi/include/stdint.h"
 407              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 408              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 409              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 410              		.file 7 "/home/saicharan/arm/arm-none-eabi/include/sys/lock.h"
 411              		.file 8 "/home/saicharan/arm/arm-none-eabi/include/sys/_types.h"
 412              		.file 9 "/home/saicharan/arm/lib/gcc/arm-none-eabi/6.3.0/include/stddef.h"
 413              		.file 10 "/home/saicharan/arm/arm-none-eabi/include/sys/reent.h"
 414              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 415              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 416              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 417              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 418              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 419              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
ARM GAS  /tmp/ccSp6EsV.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_it.c
     /tmp/ccSp6EsV.s:18     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccSp6EsV.s:25     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccSp6EsV.s:38     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccSp6EsV.s:45     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccSp6EsV.s:59     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccSp6EsV.s:66     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccSp6EsV.s:80     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccSp6EsV.s:87     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccSp6EsV.s:101    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccSp6EsV.s:108    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccSp6EsV.s:122    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccSp6EsV.s:129    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccSp6EsV.s:141    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccSp6EsV.s:148    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccSp6EsV.s:160    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccSp6EsV.s:167    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccSp6EsV.s:179    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccSp6EsV.s:186    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccSp6EsV.s:209    .text.TIM4_IRQHandler:0000000000000000 $t
     /tmp/ccSp6EsV.s:216    .text.TIM4_IRQHandler:0000000000000000 TIM4_IRQHandler
     /tmp/ccSp6EsV.s:342    .text.TIM4_IRQHandler:00000000000000bc $d
     /tmp/ccSp6EsV.s:353    .text.EXTI15_10_IRQHandler:0000000000000000 $t
     /tmp/ccSp6EsV.s:360    .text.EXTI15_10_IRQHandler:0000000000000000 EXTI15_10_IRQHandler
     /tmp/ccSp6EsV.s:383    .text.EXTI15_10_IRQHandler:0000000000000014 $d
     /tmp/ccSp6EsV.s:401    .bss.uwDiffCapture:0000000000000000 uwDiffCapture
     /tmp/ccSp6EsV.s:394    .bss.tmp:0000000000000000 tmp
     /tmp/ccSp6EsV.s:390    .bss.tmp:0000000000000000 $d
     /tmp/ccSp6EsV.s:397    .bss.uwDiffCapture:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_SYSTICK_IRQHandler
HAL_TIM_IRQHandler
HAL_TIM_ReadCapturedValue
HAL_GPIO_WritePin
htim4
uPulse_width_2T
uPulse_width_T
uIRQ_Temp
HAL_GPIO_EXTI_IRQHandler
start_capture
