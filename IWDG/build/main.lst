ARM GAS  /tmp/ccYUnjnK.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB125:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * File Name          : main.c
   4:Src/main.c    ****   * Description        : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   ** This notice applies to any and all portions of this file
   7:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
   9:Src/main.c    ****   * inserted by the user or by software development tools
  10:Src/main.c    ****   * are owned by their respective copyright owners.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * COPYRIGHT(c) 2017 STMicroelectronics
  13:Src/main.c    ****   *
  14:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  15:Src/main.c    ****   * are permitted provided that the following conditions are met:
  16:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  17:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  18:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  19:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  20:Src/main.c    ****   *      and/or other materials provided with the distribution.
  21:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  22:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  23:Src/main.c    ****   *      without specific prior written permission.
  24:Src/main.c    ****   *
  25:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  26:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  27:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  28:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  29:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  30:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  31:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  32:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
ARM GAS  /tmp/ccYUnjnK.s 			page 2


  33:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:Src/main.c    ****   *
  36:Src/main.c    ****   ******************************************************************************
  37:Src/main.c    ****   */
  38:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  39:Src/main.c    **** #include "main.h"
  40:Src/main.c    **** #include "stm32f4xx_hal.h"
  41:Src/main.c    **** 
  42:Src/main.c    **** /* USER CODE BEGIN Includes */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* USER CODE END Includes */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  47:Src/main.c    **** IWDG_HandleTypeDef hiwdg;
  48:Src/main.c    **** 
  49:Src/main.c    **** TIM_HandleTypeDef htim5;
  50:Src/main.c    **** 
  51:Src/main.c    **** /* USER CODE BEGIN PV */
  52:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  53:Src/main.c    **** static __IO uint32_t uwLsiFreq = 0;
  54:Src/main.c    **** __IO uint32_t uwCaptureNumber = 0;
  55:Src/main.c    **** __IO uint32_t uwPeriodValue = 0;
  56:Src/main.c    **** __IO uint32_t uwMeasurementDone = 0;
  57:Src/main.c    **** /* USER CODE END PV */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  60:Src/main.c    **** void SystemClock_Config(void);
  61:Src/main.c    **** static void MX_GPIO_Init(void);
  62:Src/main.c    **** /* static void MX_IWDG_Init(void); */
  63:Src/main.c    **** /* static void MX_TIM5_Init(void); */
  64:Src/main.c    **** 
  65:Src/main.c    **** /* USER CODE BEGIN PFP */
  66:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  67:Src/main.c    **** static uint32_t GetLSIFrequency(void);
  68:Src/main.c    **** /* USER CODE END PFP */
  69:Src/main.c    **** 
  70:Src/main.c    **** /* USER CODE BEGIN 0 */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END 0 */
  73:Src/main.c    **** 
  74:Src/main.c    **** int main(void)
  75:Src/main.c    **** {
  76:Src/main.c    **** 
  77:Src/main.c    ****   /* USER CODE BEGIN 1 */
  78:Src/main.c    **** 
  79:Src/main.c    ****   /* USER CODE END 1 */
  80:Src/main.c    **** 
  81:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
  82:Src/main.c    **** 
  83:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  84:Src/main.c    ****   HAL_Init();
  85:Src/main.c    **** 
  86:Src/main.c    ****   /* USER CODE BEGIN Init */
  87:Src/main.c    **** 
  88:Src/main.c    ****   /* USER CODE END Init */
  89:Src/main.c    **** 
ARM GAS  /tmp/ccYUnjnK.s 			page 3


  90:Src/main.c    ****   /* Configure the system clock */
  91:Src/main.c    ****   SystemClock_Config();
  92:Src/main.c    **** 
  93:Src/main.c    ****   /* USER CODE BEGIN SysInit */
  94:Src/main.c    **** 
  95:Src/main.c    ****   /* USER CODE END SysInit */
  96:Src/main.c    **** 
  97:Src/main.c    ****   /* Initialize all configured peripherals */
  98:Src/main.c    ****   MX_GPIO_Init();
  99:Src/main.c    ****   /* MX_IWDG_Init(); */
 100:Src/main.c    ****   /* MX_TIM5_Init(); */
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* USER CODE BEGIN 2 */
 103:Src/main.c    **** 
 104:Src/main.c    ****   /* ##-1- Check if the system has resumed from IWDG reset ###################### */
 105:Src/main.c    ****   if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET)
 106:Src/main.c    ****   {
 107:Src/main.c    ****     /* IWDGRST flag set: Turn LED_Blue on */
 108:Src/main.c    ****     HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 109:Src/main.c    **** 
 110:Src/main.c    ****     /* Clear reset flags */
 111:Src/main.c    ****     __HAL_RCC_CLEAR_RESET_FLAGS();
 112:Src/main.c    ****   }
 113:Src/main.c    ****   else
 114:Src/main.c    ****   {
 115:Src/main.c    ****     /* IWDGRST flag is not set: Turn LED_Blue off */
 116:Src/main.c    ****     HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 117:Src/main.c    ****   }
 118:Src/main.c    **** 
 119:Src/main.c    ****   /* /\*##-2- Get the LSI frequency: TIM5 is used to measure the LSI frequency ###*\/ */
 120:Src/main.c    ****   uwLsiFreq = GetLSIFrequency();
 121:Src/main.c    **** 
 122:Src/main.c    ****   /*##-3- Configure the IWDG peripheral #####################################*/
 123:Src/main.c    ****   /* Set counter reload value to obtain 250ms IWDG Timeout.
 124:Src/main.c    ****      IWDG counter clock frequency = LsiFreq / 32
 125:Src/main.c    ****      Counter Reload Value = 250ms / IWDG counter clock period
 126:Src/main.c    ****                           = 0.25s / (32/LsiFreq)
 127:Src/main.c    ****   			  = LsiFreq / 128 */
 128:Src/main.c    ****   hiwdg.Instance = IWDG;
 129:Src/main.c    ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 130:Src/main.c    ****   hiwdg.Init.Reload = uwLsiFreq/128;
 131:Src/main.c    ****   /* if (HAL_IWDG_Init(&hiwdg) != HAL_OK) */
 132:Src/main.c    ****   /* { */
 133:Src/main.c    ****   /*   _Error_Handler(__FILE__, __LINE__); */
 134:Src/main.c    ****   /* } */
 135:Src/main.c    ****   
 136:Src/main.c    ****   /* USER CODE END 2 */
 137:Src/main.c    **** 
 138:Src/main.c    ****   /* Infinite loop */
 139:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 140:Src/main.c    ****   while (1)
 141:Src/main.c    ****   {
 142:Src/main.c    ****     /* Toggle LED_Green */
 143:Src/main.c    ****     HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
 144:Src/main.c    **** 
 145:Src/main.c    ****     /* Insert 240ms delay */
 146:Src/main.c    ****     HAL_Delay(240);
ARM GAS  /tmp/ccYUnjnK.s 			page 4


 147:Src/main.c    **** 
 148:Src/main.c    ****     /* Refresh IWDG: reload counter */
 149:Src/main.c    ****     if(HAL_IWDG_Refresh(&hiwdg) != HAL_OK)
 150:Src/main.c    ****     {
 151:Src/main.c    ****       _Error_Handler(__FILE__, __LINE__);
 152:Src/main.c    ****     }
 153:Src/main.c    **** 
 154:Src/main.c    ****     
 155:Src/main.c    ****   /* USER CODE END WHILE */
 156:Src/main.c    **** 
 157:Src/main.c    ****   /* USER CODE BEGIN 3 */
 158:Src/main.c    **** 
 159:Src/main.c    ****   }
 160:Src/main.c    ****   /* USER CODE END 3 */
 161:Src/main.c    **** 
 162:Src/main.c    **** }
 163:Src/main.c    **** 
 164:Src/main.c    **** /** System Clock Configuration
 165:Src/main.c    **** */
 166:Src/main.c    **** void SystemClock_Config(void)
 167:Src/main.c    **** {
 168:Src/main.c    **** 
 169:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 170:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 171:Src/main.c    **** 
 172:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 173:Src/main.c    ****     */
 174:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 175:Src/main.c    **** 
 176:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 177:Src/main.c    **** 
 178:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 179:Src/main.c    ****     */
 180:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 181:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 182:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 183:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 184:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 185:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 186:Src/main.c    ****   {
 187:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 188:Src/main.c    ****   }
 189:Src/main.c    **** 
 190:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 191:Src/main.c    ****     */
 192:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 193:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 194:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 195:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 196:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 197:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 198:Src/main.c    **** 
 199:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 200:Src/main.c    ****   {
 201:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 202:Src/main.c    ****   }
 203:Src/main.c    **** 
ARM GAS  /tmp/ccYUnjnK.s 			page 5


 204:Src/main.c    ****     /**Configure the Systick interrupt time 
 205:Src/main.c    ****     */
 206:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 207:Src/main.c    **** 
 208:Src/main.c    ****     /**Configure the Systick 
 209:Src/main.c    ****     */
 210:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 211:Src/main.c    **** 
 212:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 213:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 214:Src/main.c    **** }
 215:Src/main.c    **** 
 216:Src/main.c    **** /* /\* IWDG init function *\/ */
 217:Src/main.c    **** /* static void MX_IWDG_Init(void) */
 218:Src/main.c    **** /* { */
 219:Src/main.c    **** 
 220:Src/main.c    **** /*   hiwdg.Instance = IWDG; */
 221:Src/main.c    **** /*   hiwdg.Init.Prescaler = IWDG_PRESCALER_32; */
 222:Src/main.c    **** /*   hiwdg.Init.Reload = 4095; */
 223:Src/main.c    **** /*   if (HAL_IWDG_Init(&hiwdg) != HAL_OK) */
 224:Src/main.c    **** /*   { */
 225:Src/main.c    **** /*     _Error_Handler(__FILE__, __LINE__); */
 226:Src/main.c    **** /*   } */
 227:Src/main.c    **** 
 228:Src/main.c    **** /* } */
 229:Src/main.c    **** 
 230:Src/main.c    **** /* /\* TIM5 init function *\/ */
 231:Src/main.c    **** /* static void MX_TIM5_Init(void) */
 232:Src/main.c    **** /* { */
 233:Src/main.c    **** 
 234:Src/main.c    **** /*   TIM_ClockConfigTypeDef sClockSourceConfig; */
 235:Src/main.c    **** /*   TIM_MasterConfigTypeDef sMasterConfig; */
 236:Src/main.c    **** /*   TIM_IC_InitTypeDef sConfigIC; */
 237:Src/main.c    **** 
 238:Src/main.c    **** /*   htim5.Instance = TIM5; */
 239:Src/main.c    **** /*   htim5.Init.Prescaler = 0; */
 240:Src/main.c    **** /*   htim5.Init.CounterMode = TIM_COUNTERMODE_UP; */
 241:Src/main.c    **** /*   htim5.Init.Period = 0xFFFF; */
 242:Src/main.c    **** /*   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1; */
 243:Src/main.c    **** /*   if (HAL_TIM_Base_Init(&htim5) != HAL_OK) */
 244:Src/main.c    **** /*   { */
 245:Src/main.c    **** /*     _Error_Handler(__FILE__, __LINE__); */
 246:Src/main.c    **** /*   } */
 247:Src/main.c    **** 
 248:Src/main.c    **** /*   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL; */
 249:Src/main.c    **** /*   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) */
 250:Src/main.c    **** /*   { */
 251:Src/main.c    **** /*     _Error_Handler(__FILE__, __LINE__); */
 252:Src/main.c    **** /*   } */
 253:Src/main.c    **** 
 254:Src/main.c    **** /*   if (HAL_TIM_IC_Init(&htim5) != HAL_OK) */
 255:Src/main.c    **** /*   { */
 256:Src/main.c    **** /*     _Error_Handler(__FILE__, __LINE__); */
 257:Src/main.c    **** /*   } */
 258:Src/main.c    **** 
 259:Src/main.c    **** /*   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET; */
 260:Src/main.c    **** /*   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE; */
ARM GAS  /tmp/ccYUnjnK.s 			page 6


 261:Src/main.c    **** /*   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) */
 262:Src/main.c    **** /*   { */
 263:Src/main.c    **** /*     _Error_Handler(__FILE__, __LINE__); */
 264:Src/main.c    **** /*   } */
 265:Src/main.c    **** 
 266:Src/main.c    **** /*   sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING; */
 267:Src/main.c    **** /*   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI; */
 268:Src/main.c    **** /*   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1; */
 269:Src/main.c    **** /*   sConfigIC.ICFilter = 0; */
 270:Src/main.c    **** /*   if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK) */
 271:Src/main.c    **** /*   { */
 272:Src/main.c    **** /*     _Error_Handler(__FILE__, __LINE__); */
 273:Src/main.c    **** /*   } */
 274:Src/main.c    **** 
 275:Src/main.c    **** /*   if (HAL_TIMEx_RemapConfig(&htim5, TIM_TIM5_LSI) != HAL_OK) */
 276:Src/main.c    **** /*   { */
 277:Src/main.c    **** /*     _Error_Handler(__FILE__, __LINE__); */
 278:Src/main.c    **** /*   } */
 279:Src/main.c    **** 
 280:Src/main.c    **** /* } */
 281:Src/main.c    **** 
 282:Src/main.c    **** /** Configure pins as 
 283:Src/main.c    ****         * Analog 
 284:Src/main.c    ****         * Input 
 285:Src/main.c    ****         * Output
 286:Src/main.c    ****         * EVENT_OUT
 287:Src/main.c    ****         * EXTI
 288:Src/main.c    **** */
 289:Src/main.c    **** static void MX_GPIO_Init(void)
 290:Src/main.c    **** {
  27              		.loc 1 290 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 24
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  38 0002 86B0     		sub	sp, sp, #24
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 40
  41              	.LBB2:
 291:Src/main.c    **** 
 292:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 293:Src/main.c    **** 
 294:Src/main.c    ****   /* GPIO Ports Clock Enable */
 295:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  42              		.loc 1 295 0
  43 0004 0024     		movs	r4, #0
  44 0006 0094     		str	r4, [sp]
  45 0008 144B     		ldr	r3, .L3
  46 000a 1A6B     		ldr	r2, [r3, #48]
  47 000c 42F02002 		orr	r2, r2, #32
  48 0010 1A63     		str	r2, [r3, #48]
ARM GAS  /tmp/ccYUnjnK.s 			page 7


  49 0012 1B6B     		ldr	r3, [r3, #48]
  50 0014 03F02003 		and	r3, r3, #32
  51 0018 0093     		str	r3, [sp]
  52 001a 009B     		ldr	r3, [sp]
  53              	.LBE2:
 296:Src/main.c    **** 
 297:Src/main.c    ****   /*Configure GPIO pin Output Level */
 298:Src/main.c    ****   HAL_GPIO_WritePin(GPIOF, LED_Green_Pin|LED_Blue_Pin|LED_Yellow_Pin|LED_Red_Pin, GPIO_PIN_RESET);
  54              		.loc 1 298 0
  55 001c 104D     		ldr	r5, .L3+4
  56 001e 2246     		mov	r2, r4
  57 0020 3C21     		movs	r1, #60
  58 0022 2846     		mov	r0, r5
  59 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
  60              	.LVL0:
 299:Src/main.c    **** 
 300:Src/main.c    ****   /*Configure GPIO pin : PUSH_BUTTON_1_Pin */
 301:Src/main.c    ****   GPIO_InitStruct.Pin = PUSH_BUTTON_1_Pin;
  61              		.loc 1 301 0
  62 0028 0126     		movs	r6, #1
  63 002a 0196     		str	r6, [sp, #4]
 302:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  64              		.loc 1 302 0
  65 002c 0D4B     		ldr	r3, .L3+8
  66 002e 0293     		str	r3, [sp, #8]
 303:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  67              		.loc 1 303 0
  68 0030 0394     		str	r4, [sp, #12]
 304:Src/main.c    ****   HAL_GPIO_Init(PUSH_BUTTON_1_GPIO_Port, &GPIO_InitStruct);
  69              		.loc 1 304 0
  70 0032 01A9     		add	r1, sp, #4
  71 0034 2846     		mov	r0, r5
  72 0036 FFF7FEFF 		bl	HAL_GPIO_Init
  73              	.LVL1:
 305:Src/main.c    **** 
 306:Src/main.c    ****   /*Configure GPIO pins : LED_Green_Pin LED_Blue_Pin LED_Yellow_Pin LED_Red_Pin */
 307:Src/main.c    ****   GPIO_InitStruct.Pin = LED_Green_Pin|LED_Blue_Pin|LED_Yellow_Pin|LED_Red_Pin;
  74              		.loc 1 307 0
  75 003a 3C23     		movs	r3, #60
  76 003c 0193     		str	r3, [sp, #4]
 308:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  77              		.loc 1 308 0
  78 003e 0296     		str	r6, [sp, #8]
 309:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  79              		.loc 1 309 0
  80 0040 0394     		str	r4, [sp, #12]
 310:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  81              		.loc 1 310 0
  82 0042 0494     		str	r4, [sp, #16]
 311:Src/main.c    ****   HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
  83              		.loc 1 311 0
  84 0044 01A9     		add	r1, sp, #4
  85 0046 2846     		mov	r0, r5
  86 0048 FFF7FEFF 		bl	HAL_GPIO_Init
  87              	.LVL2:
 312:Src/main.c    **** 
 313:Src/main.c    ****   /* EXTI interrupt init*/
ARM GAS  /tmp/ccYUnjnK.s 			page 8


 314:Src/main.c    ****   HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
  88              		.loc 1 314 0
  89 004c 2246     		mov	r2, r4
  90 004e 2146     		mov	r1, r4
  91 0050 0620     		movs	r0, #6
  92 0052 FFF7FEFF 		bl	HAL_NVIC_SetPriority
  93              	.LVL3:
 315:Src/main.c    ****   /* HAL_NVIC_EnableIRQ(EXTI0_IRQn); */
 316:Src/main.c    **** 
 317:Src/main.c    **** }
  94              		.loc 1 317 0
  95 0056 06B0     		add	sp, sp, #24
  96              	.LCFI2:
  97              		.cfi_def_cfa_offset 16
  98              		@ sp needed
  99 0058 70BD     		pop	{r4, r5, r6, pc}
 100              	.L4:
 101 005a 00BF     		.align	2
 102              	.L3:
 103 005c 00380240 		.word	1073887232
 104 0060 00140240 		.word	1073878016
 105 0064 00001110 		.word	269549568
 106              		.cfi_endproc
 107              	.LFE125:
 109              		.section	.text._Error_Handler,"ax",%progbits
 110              		.align	1
 111              		.global	_Error_Handler
 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 115              		.fpu fpv4-sp-d16
 117              	_Error_Handler:
 118              	.LFB127:
 318:Src/main.c    **** 
 319:Src/main.c    **** /* USER CODE BEGIN 4 */
 320:Src/main.c    **** /**
 321:Src/main.c    ****   * @brief  Configures TIM5 to measure the LSI oscillator frequency.
 322:Src/main.c    ****   * @param  None
 323:Src/main.c    ****   * @retval LSI Frequency
 324:Src/main.c    ****   */
 325:Src/main.c    **** static uint32_t GetLSIFrequency(void)
 326:Src/main.c    **** {
 327:Src/main.c    ****   uint32_t pclk1 = 0;
 328:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig;
 329:Src/main.c    ****   TIM_IC_InitTypeDef sConfigIC;
 330:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 331:Src/main.c    ****   
 332:Src/main.c    **** 
 333:Src/main.c    ****   /* Enable the LSI oscillator */
 334:Src/main.c    ****   __HAL_RCC_LSI_ENABLE();
 335:Src/main.c    **** 
 336:Src/main.c    ****   /* Wait till LSI is ready */
 337:Src/main.c    ****   while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 338:Src/main.c    ****   {
 339:Src/main.c    ****   }
 340:Src/main.c    **** 
 341:Src/main.c    ****   /* Configure the TIM peripheral */
ARM GAS  /tmp/ccYUnjnK.s 			page 9


 342:Src/main.c    ****   /* Set TIMx instance */
 343:Src/main.c    ****   htim5.Instance = TIM5;
 344:Src/main.c    **** 
 345:Src/main.c    ****   /* TIM5 configuration: Input capture mode ---------------------------
 346:Src/main.c    ****   The LSI oscillator is connected to TIM5 CH4.
 347:Src/main.c    ****   The Rising edge is used as active edge.
 348:Src/main.c    ****   The TIM5 CCR4 is used to compute the frequency value.
 349:Src/main.c    ****   -------------------------------------------------------------------*/
 350:Src/main.c    ****   htim5.Init.Prescaler         = 0;
 351:Src/main.c    ****   htim5.Init.CounterMode       = TIM_COUNTERMODE_UP;
 352:Src/main.c    ****   htim5.Init.Period            = 0xFFFF;
 353:Src/main.c    ****   htim5.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 354:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 355:Src/main.c    ****   {
 356:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 357:Src/main.c    ****   }
 358:Src/main.c    **** 
 359:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 360:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 361:Src/main.c    ****   {
 362:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 363:Src/main.c    ****   }
 364:Src/main.c    **** 
 365:Src/main.c    ****   if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 366:Src/main.c    ****   {
 367:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 368:Src/main.c    ****   }
 369:Src/main.c    **** 
 370:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 371:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 372:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 373:Src/main.c    ****   {
 374:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 375:Src/main.c    ****   }
 376:Src/main.c    **** 
 377:Src/main.c    ****   /* Configure the Input Capture of channel 4 */
 378:Src/main.c    ****   sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 379:Src/main.c    ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 380:Src/main.c    ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 381:Src/main.c    ****   sConfigIC.ICFilter = 0;
 382:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 383:Src/main.c    ****   {
 384:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 385:Src/main.c    ****   }
 386:Src/main.c    **** 
 387:Src/main.c    ****   /* Connect internally the TIM5_CH4 Input Capture to the LSI clock output */
 388:Src/main.c    ****   if (HAL_TIMEx_RemapConfig(&htim5, TIM_TIM5_LSI) != HAL_OK)
 389:Src/main.c    ****   {
 390:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 391:Src/main.c    ****   }
 392:Src/main.c    **** 
 393:Src/main.c    ****   /* Reset the flags */
 394:Src/main.c    ****   htim5.Instance->SR = 0;
 395:Src/main.c    **** 
 396:Src/main.c    ****   /* Start the TIM Input Capture Measurement in interrupt mode */
 397:Src/main.c    ****   if(HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4) != HAL_OK)
 398:Src/main.c    ****   {
ARM GAS  /tmp/ccYUnjnK.s 			page 10


 399:Src/main.c    ****     _Error_Handler(__FILE__,__LINE__);
 400:Src/main.c    ****   }
 401:Src/main.c    **** 
 402:Src/main.c    ****   /* Wait until the TIM5 get 2 LSI edges (refer to TIM5_IRQHandler()
 403:Src/main.c    ****      in stm32f4xx_it.c file) */
 404:Src/main.c    ****   while(uwMeasurementDone == 0)
 405:Src/main.c    ****   {
 406:Src/main.c    ****   }
 407:Src/main.c    ****   uwCaptureNumber = 0;
 408:Src/main.c    **** 
 409:Src/main.c    ****   /* Deinitialize the TIM5 peripheral registers to their default reset
 410:Src/main.c    ****      values */
 411:Src/main.c    ****   HAL_TIM_IC_DeInit(&htim5);
 412:Src/main.c    **** 
 413:Src/main.c    ****   /* Compute the LSI frequency, depending on TIM5 input clock
 414:Src/main.c    ****      frequency (PCLK1) */
 415:Src/main.c    ****   return (pclk1 / uwPeriodValue);
 416:Src/main.c    **** 
 417:Src/main.c    **** }
 418:Src/main.c    **** 
 419:Src/main.c    **** 
 420:Src/main.c    **** /* USER CODE END 4 */
 421:Src/main.c    **** 
 422:Src/main.c    **** /**
 423:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 424:Src/main.c    ****   * @param  None
 425:Src/main.c    ****   * @retval None
 426:Src/main.c    ****   */
 427:Src/main.c    **** void _Error_Handler(char * file, int line)
 428:Src/main.c    **** {
 119              		.loc 1 428 0
 120              		.cfi_startproc
 121              		@ Volatile: function does not return.
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              	.LVL4:
 125 0000 08B5     		push	{r3, lr}
 126              	.LCFI3:
 127              		.cfi_def_cfa_offset 8
 128              		.cfi_offset 3, -8
 129              		.cfi_offset 14, -4
 429:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 430:Src/main.c    ****   HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin);
 130              		.loc 1 430 0
 131 0002 2021     		movs	r1, #32
 132              	.LVL5:
 133 0004 0348     		ldr	r0, .L8
 134              	.LVL6:
 135 0006 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 136              	.LVL7:
 431:Src/main.c    ****   HAL_Delay(250);
 137              		.loc 1 431 0
 138 000a FA20     		movs	r0, #250
 139 000c FFF7FEFF 		bl	HAL_Delay
 140              	.LVL8:
 141              	.L6:
 142 0010 FEE7     		b	.L6
ARM GAS  /tmp/ccYUnjnK.s 			page 11


 143              	.L9:
 144 0012 00BF     		.align	2
 145              	.L8:
 146 0014 00140240 		.word	1073878016
 147              		.cfi_endproc
 148              	.LFE127:
 150              		.section	.text.GetLSIFrequency,"ax",%progbits
 151              		.align	1
 152              		.syntax unified
 153              		.thumb
 154              		.thumb_func
 155              		.fpu fpv4-sp-d16
 157              	GetLSIFrequency:
 158              	.LFB126:
 326:Src/main.c    ****   uint32_t pclk1 = 0;
 159              		.loc 1 326 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 40
 162              		@ frame_needed = 0, uses_anonymous_args = 0
 163 0000 10B5     		push	{r4, lr}
 164              	.LCFI4:
 165              		.cfi_def_cfa_offset 8
 166              		.cfi_offset 4, -8
 167              		.cfi_offset 14, -4
 168 0002 8AB0     		sub	sp, sp, #40
 169              	.LCFI5:
 170              		.cfi_def_cfa_offset 48
 171              	.LVL9:
 334:Src/main.c    **** 
 172              		.loc 1 334 0
 173 0004 0122     		movs	r2, #1
 174 0006 3D4B     		ldr	r3, .L27
 175 0008 1A60     		str	r2, [r3]
 176              	.L11:
 337:Src/main.c    ****   {
 177              		.loc 1 337 0 discriminator 1
 178 000a 3D4B     		ldr	r3, .L27+4
 179 000c 5B6F     		ldr	r3, [r3, #116]
 180 000e 13F0020F 		tst	r3, #2
 181 0012 FAD0     		beq	.L11
 343:Src/main.c    **** 
 182              		.loc 1 343 0
 183 0014 3B48     		ldr	r0, .L27+8
 184 0016 3C4B     		ldr	r3, .L27+12
 185 0018 0360     		str	r3, [r0]
 350:Src/main.c    ****   htim5.Init.CounterMode       = TIM_COUNTERMODE_UP;
 186              		.loc 1 350 0
 187 001a 0023     		movs	r3, #0
 188 001c 4360     		str	r3, [r0, #4]
 351:Src/main.c    ****   htim5.Init.Period            = 0xFFFF;
 189              		.loc 1 351 0
 190 001e 8360     		str	r3, [r0, #8]
 352:Src/main.c    ****   htim5.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 191              		.loc 1 352 0
 192 0020 4FF6FF72 		movw	r2, #65535
 193 0024 C260     		str	r2, [r0, #12]
 353:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
ARM GAS  /tmp/ccYUnjnK.s 			page 12


 194              		.loc 1 353 0
 195 0026 0361     		str	r3, [r0, #16]
 354:Src/main.c    ****   {
 196              		.loc 1 354 0
 197 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 198              	.LVL10:
 199 002c 0028     		cmp	r0, #0
 200 002e 41D1     		bne	.L20
 359:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 201              		.loc 1 359 0
 202 0030 0AA9     		add	r1, sp, #40
 203 0032 4FF48053 		mov	r3, #4096
 204 0036 41F8103D 		str	r3, [r1, #-16]!
 360:Src/main.c    ****   {
 205              		.loc 1 360 0
 206 003a 3248     		ldr	r0, .L27+8
 207 003c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 208              	.LVL11:
 209 0040 0028     		cmp	r0, #0
 210 0042 3CD1     		bne	.L21
 365:Src/main.c    ****   {
 211              		.loc 1 365 0
 212 0044 2F48     		ldr	r0, .L27+8
 213 0046 FFF7FEFF 		bl	HAL_TIM_IC_Init
 214              	.LVL12:
 215 004a 0028     		cmp	r0, #0
 216 004c 3CD1     		bne	.L22
 370:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 217              		.loc 1 370 0
 218 004e 0023     		movs	r3, #0
 219 0050 0093     		str	r3, [sp]
 371:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 220              		.loc 1 371 0
 221 0052 0193     		str	r3, [sp, #4]
 372:Src/main.c    ****   {
 222              		.loc 1 372 0
 223 0054 6946     		mov	r1, sp
 224 0056 2B48     		ldr	r0, .L27+8
 225 0058 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 226              	.LVL13:
 227 005c 0028     		cmp	r0, #0
 228 005e 38D1     		bne	.L23
 378:Src/main.c    ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 229              		.loc 1 378 0
 230 0060 0023     		movs	r3, #0
 231 0062 0293     		str	r3, [sp, #8]
 379:Src/main.c    ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 232              		.loc 1 379 0
 233 0064 0122     		movs	r2, #1
 234 0066 0392     		str	r2, [sp, #12]
 380:Src/main.c    ****   sConfigIC.ICFilter = 0;
 235              		.loc 1 380 0
 236 0068 0493     		str	r3, [sp, #16]
 381:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 237              		.loc 1 381 0
 238 006a 0593     		str	r3, [sp, #20]
 382:Src/main.c    ****   {
ARM GAS  /tmp/ccYUnjnK.s 			page 13


 239              		.loc 1 382 0
 240 006c 0C22     		movs	r2, #12
 241 006e 02A9     		add	r1, sp, #8
 242 0070 2448     		ldr	r0, .L27+8
 243 0072 FFF7FEFF 		bl	HAL_TIM_IC_ConfigChannel
 244              	.LVL14:
 245 0076 0028     		cmp	r0, #0
 246 0078 30D1     		bne	.L24
 388:Src/main.c    ****   {
 247              		.loc 1 388 0
 248 007a 4021     		movs	r1, #64
 249 007c 2148     		ldr	r0, .L27+8
 250 007e FFF7FEFF 		bl	HAL_TIMEx_RemapConfig
 251              	.LVL15:
 252 0082 0028     		cmp	r0, #0
 253 0084 2FD1     		bne	.L25
 394:Src/main.c    **** 
 254              		.loc 1 394 0
 255 0086 1F48     		ldr	r0, .L27+8
 256 0088 0368     		ldr	r3, [r0]
 257 008a 0022     		movs	r2, #0
 258 008c 1A61     		str	r2, [r3, #16]
 397:Src/main.c    ****   {
 259              		.loc 1 397 0
 260 008e 0C21     		movs	r1, #12
 261 0090 FFF7FEFF 		bl	HAL_TIM_IC_Start_IT
 262              	.LVL16:
 263 0094 60BB     		cbnz	r0, .L26
 264              	.L18:
 404:Src/main.c    ****   {
 265              		.loc 1 404 0 discriminator 1
 266 0096 1D4B     		ldr	r3, .L27+16
 267 0098 1B68     		ldr	r3, [r3]
 268 009a 002B     		cmp	r3, #0
 269 009c FBD0     		beq	.L18
 407:Src/main.c    **** 
 270              		.loc 1 407 0
 271 009e 0024     		movs	r4, #0
 272 00a0 1B4B     		ldr	r3, .L27+20
 273 00a2 1C60     		str	r4, [r3]
 411:Src/main.c    **** 
 274              		.loc 1 411 0
 275 00a4 1748     		ldr	r0, .L27+8
 276 00a6 FFF7FEFF 		bl	HAL_TIM_IC_DeInit
 277              	.LVL17:
 415:Src/main.c    **** 
 278              		.loc 1 415 0
 279 00aa 1A4B     		ldr	r3, .L27+24
 280 00ac 1B68     		ldr	r3, [r3]
 417:Src/main.c    **** 
 281              		.loc 1 417 0
 282 00ae 2046     		mov	r0, r4
 283 00b0 0AB0     		add	sp, sp, #40
 284              	.LCFI6:
 285              		.cfi_remember_state
 286              		.cfi_def_cfa_offset 8
 287              		@ sp needed
ARM GAS  /tmp/ccYUnjnK.s 			page 14


 288 00b2 10BD     		pop	{r4, pc}
 289              	.L20:
 290              	.LCFI7:
 291              		.cfi_restore_state
 356:Src/main.c    ****   }
 292              		.loc 1 356 0
 293 00b4 4FF4B271 		mov	r1, #356
 294 00b8 1748     		ldr	r0, .L27+28
 295 00ba FFF7FEFF 		bl	_Error_Handler
 296              	.LVL18:
 297              	.L21:
 362:Src/main.c    ****   }
 298              		.loc 1 362 0
 299 00be 4FF4B571 		mov	r1, #362
 300 00c2 1548     		ldr	r0, .L27+28
 301 00c4 FFF7FEFF 		bl	_Error_Handler
 302              	.LVL19:
 303              	.L22:
 367:Src/main.c    ****   }
 304              		.loc 1 367 0
 305 00c8 40F26F11 		movw	r1, #367
 306 00cc 1248     		ldr	r0, .L27+28
 307 00ce FFF7FEFF 		bl	_Error_Handler
 308              	.LVL20:
 309              	.L23:
 374:Src/main.c    ****   }
 310              		.loc 1 374 0
 311 00d2 4FF4BB71 		mov	r1, #374
 312 00d6 1048     		ldr	r0, .L27+28
 313 00d8 FFF7FEFF 		bl	_Error_Handler
 314              	.LVL21:
 315              	.L24:
 384:Src/main.c    ****   }
 316              		.loc 1 384 0
 317 00dc 4FF4C071 		mov	r1, #384
 318 00e0 0D48     		ldr	r0, .L27+28
 319 00e2 FFF7FEFF 		bl	_Error_Handler
 320              	.LVL22:
 321              	.L25:
 390:Src/main.c    ****   }
 322              		.loc 1 390 0
 323 00e6 4FF4C371 		mov	r1, #390
 324 00ea 0B48     		ldr	r0, .L27+28
 325 00ec FFF7FEFF 		bl	_Error_Handler
 326              	.LVL23:
 327              	.L26:
 399:Src/main.c    ****   }
 328              		.loc 1 399 0
 329 00f0 40F28F11 		movw	r1, #399
 330 00f4 0848     		ldr	r0, .L27+28
 331 00f6 FFF7FEFF 		bl	_Error_Handler
 332              	.LVL24:
 333              	.L28:
 334 00fa 00BF     		.align	2
 335              	.L27:
 336 00fc 800E4742 		.word	1111953024
 337 0100 00380240 		.word	1073887232
ARM GAS  /tmp/ccYUnjnK.s 			page 15


 338 0104 00000000 		.word	htim5
 339 0108 000C0040 		.word	1073744896
 340 010c 00000000 		.word	.LANCHOR0
 341 0110 00000000 		.word	.LANCHOR1
 342 0114 00000000 		.word	.LANCHOR2
 343 0118 00000000 		.word	.LC0
 344              		.cfi_endproc
 345              	.LFE126:
 347              		.section	.text.SystemClock_Config,"ax",%progbits
 348              		.align	1
 349              		.global	SystemClock_Config
 350              		.syntax unified
 351              		.thumb
 352              		.thumb_func
 353              		.fpu fpv4-sp-d16
 355              	SystemClock_Config:
 356              	.LFB124:
 167:Src/main.c    **** 
 357              		.loc 1 167 0
 358              		.cfi_startproc
 359              		@ args = 0, pretend = 0, frame = 80
 360              		@ frame_needed = 0, uses_anonymous_args = 0
 361 0000 00B5     		push	{lr}
 362              	.LCFI8:
 363              		.cfi_def_cfa_offset 4
 364              		.cfi_offset 14, -4
 365 0002 95B0     		sub	sp, sp, #84
 366              	.LCFI9:
 367              		.cfi_def_cfa_offset 88
 368              	.LBB3:
 174:Src/main.c    **** 
 369              		.loc 1 174 0
 370 0004 0023     		movs	r3, #0
 371 0006 0193     		str	r3, [sp, #4]
 372 0008 234A     		ldr	r2, .L35
 373 000a 116C     		ldr	r1, [r2, #64]
 374 000c 41F08051 		orr	r1, r1, #268435456
 375 0010 1164     		str	r1, [r2, #64]
 376 0012 126C     		ldr	r2, [r2, #64]
 377 0014 02F08052 		and	r2, r2, #268435456
 378 0018 0192     		str	r2, [sp, #4]
 379 001a 019A     		ldr	r2, [sp, #4]
 380              	.LBE3:
 381              	.LBB4:
 176:Src/main.c    **** 
 382              		.loc 1 176 0
 383 001c 0293     		str	r3, [sp, #8]
 384 001e 1F4A     		ldr	r2, .L35+4
 385 0020 1168     		ldr	r1, [r2]
 386 0022 41F48041 		orr	r1, r1, #16384
 387 0026 1160     		str	r1, [r2]
 388 0028 1268     		ldr	r2, [r2]
 389 002a 02F48042 		and	r2, r2, #16384
 390 002e 0292     		str	r2, [sp, #8]
 391 0030 029A     		ldr	r2, [sp, #8]
 392              	.LBE4:
 180:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
ARM GAS  /tmp/ccYUnjnK.s 			page 16


 393              		.loc 1 180 0
 394 0032 0A22     		movs	r2, #10
 395 0034 0892     		str	r2, [sp, #32]
 181:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 396              		.loc 1 181 0
 397 0036 0122     		movs	r2, #1
 398 0038 0B92     		str	r2, [sp, #44]
 182:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 399              		.loc 1 182 0
 400 003a 1021     		movs	r1, #16
 401 003c 0C91     		str	r1, [sp, #48]
 183:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 402              		.loc 1 183 0
 403 003e 0D92     		str	r2, [sp, #52]
 184:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 404              		.loc 1 184 0
 405 0040 0E93     		str	r3, [sp, #56]
 185:Src/main.c    ****   {
 406              		.loc 1 185 0
 407 0042 08A8     		add	r0, sp, #32
 408 0044 FFF7FEFF 		bl	HAL_RCC_OscConfig
 409              	.LVL25:
 410 0048 F0B9     		cbnz	r0, .L33
 192:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 411              		.loc 1 192 0
 412 004a 0F23     		movs	r3, #15
 413 004c 0393     		str	r3, [sp, #12]
 194:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 414              		.loc 1 194 0
 415 004e 0021     		movs	r1, #0
 416 0050 0491     		str	r1, [sp, #16]
 195:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 417              		.loc 1 195 0
 418 0052 0591     		str	r1, [sp, #20]
 196:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 419              		.loc 1 196 0
 420 0054 0691     		str	r1, [sp, #24]
 197:Src/main.c    **** 
 421              		.loc 1 197 0
 422 0056 0791     		str	r1, [sp, #28]
 199:Src/main.c    ****   {
 423              		.loc 1 199 0
 424 0058 03A8     		add	r0, sp, #12
 425 005a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 426              	.LVL26:
 427 005e B8B9     		cbnz	r0, .L34
 206:Src/main.c    **** 
 428              		.loc 1 206 0
 429 0060 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 430              	.LVL27:
 431 0064 0E4B     		ldr	r3, .L35+8
 432 0066 A3FB0030 		umull	r3, r0, r3, r0
 433 006a 8009     		lsrs	r0, r0, #6
 434 006c FFF7FEFF 		bl	HAL_SYSTICK_Config
 435              	.LVL28:
 210:Src/main.c    **** 
 436              		.loc 1 210 0
ARM GAS  /tmp/ccYUnjnK.s 			page 17


 437 0070 0420     		movs	r0, #4
 438 0072 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 439              	.LVL29:
 213:Src/main.c    **** }
 440              		.loc 1 213 0
 441 0076 0022     		movs	r2, #0
 442 0078 1146     		mov	r1, r2
 443 007a 4FF0FF30 		mov	r0, #-1
 444 007e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 445              	.LVL30:
 214:Src/main.c    **** 
 446              		.loc 1 214 0
 447 0082 15B0     		add	sp, sp, #84
 448              	.LCFI10:
 449              		.cfi_remember_state
 450              		.cfi_def_cfa_offset 4
 451              		@ sp needed
 452 0084 5DF804FB 		ldr	pc, [sp], #4
 453              	.L33:
 454              	.LCFI11:
 455              		.cfi_restore_state
 187:Src/main.c    ****   }
 456              		.loc 1 187 0
 457 0088 BB21     		movs	r1, #187
 458 008a 0648     		ldr	r0, .L35+12
 459 008c FFF7FEFF 		bl	_Error_Handler
 460              	.LVL31:
 461              	.L34:
 201:Src/main.c    ****   }
 462              		.loc 1 201 0
 463 0090 C921     		movs	r1, #201
 464 0092 0448     		ldr	r0, .L35+12
 465 0094 FFF7FEFF 		bl	_Error_Handler
 466              	.LVL32:
 467              	.L36:
 468              		.align	2
 469              	.L35:
 470 0098 00380240 		.word	1073887232
 471 009c 00700040 		.word	1073770496
 472 00a0 D34D6210 		.word	274877907
 473 00a4 00000000 		.word	.LC0
 474              		.cfi_endproc
 475              	.LFE124:
 477              		.section	.text.main,"ax",%progbits
 478              		.align	1
 479              		.global	main
 480              		.syntax unified
 481              		.thumb
 482              		.thumb_func
 483              		.fpu fpv4-sp-d16
 485              	main:
 486              	.LFB123:
  75:Src/main.c    **** 
 487              		.loc 1 75 0
 488              		.cfi_startproc
 489              		@ Volatile: function does not return.
 490              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccYUnjnK.s 			page 18


 491              		@ frame_needed = 0, uses_anonymous_args = 0
 492 0000 08B5     		push	{r3, lr}
 493              	.LCFI12:
 494              		.cfi_def_cfa_offset 8
 495              		.cfi_offset 3, -8
 496              		.cfi_offset 14, -4
  84:Src/main.c    **** 
 497              		.loc 1 84 0
 498 0002 FFF7FEFF 		bl	HAL_Init
 499              	.LVL33:
  91:Src/main.c    **** 
 500              		.loc 1 91 0
 501 0006 FFF7FEFF 		bl	SystemClock_Config
 502              	.LVL34:
  98:Src/main.c    ****   /* MX_IWDG_Init(); */
 503              		.loc 1 98 0
 504 000a FFF7FEFF 		bl	MX_GPIO_Init
 505              	.LVL35:
 105:Src/main.c    ****   {
 506              		.loc 1 105 0
 507 000e 184B     		ldr	r3, .L42
 508 0010 5B6F     		ldr	r3, [r3, #116]
 509 0012 13F0005F 		tst	r3, #536870912
 510 0016 25D0     		beq	.L38
 108:Src/main.c    **** 
 511              		.loc 1 108 0
 512 0018 0122     		movs	r2, #1
 513 001a 0821     		movs	r1, #8
 514 001c 1548     		ldr	r0, .L42+4
 515 001e FFF7FEFF 		bl	HAL_GPIO_WritePin
 516              	.LVL36:
 111:Src/main.c    ****   }
 517              		.loc 1 111 0
 518 0022 134A     		ldr	r2, .L42
 519 0024 536F     		ldr	r3, [r2, #116]
 520 0026 43F08073 		orr	r3, r3, #16777216
 521 002a 5367     		str	r3, [r2, #116]
 522              	.L39:
 120:Src/main.c    **** 
 523              		.loc 1 120 0
 524 002c FFF7FEFF 		bl	GetLSIFrequency
 525              	.LVL37:
 526 0030 114A     		ldr	r2, .L42+8
 527 0032 1060     		str	r0, [r2]
 128:Src/main.c    ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 528              		.loc 1 128 0
 529 0034 114B     		ldr	r3, .L42+12
 530 0036 1249     		ldr	r1, .L42+16
 531 0038 1960     		str	r1, [r3]
 129:Src/main.c    ****   hiwdg.Init.Reload = uwLsiFreq/128;
 532              		.loc 1 129 0
 533 003a 0321     		movs	r1, #3
 534 003c 5960     		str	r1, [r3, #4]
 130:Src/main.c    ****   /* if (HAL_IWDG_Init(&hiwdg) != HAL_OK) */
 535              		.loc 1 130 0
 536 003e 1268     		ldr	r2, [r2]
 537 0040 D209     		lsrs	r2, r2, #7
ARM GAS  /tmp/ccYUnjnK.s 			page 19


 538 0042 9A60     		str	r2, [r3, #8]
 539              	.L40:
 143:Src/main.c    **** 
 540              		.loc 1 143 0
 541 0044 0421     		movs	r1, #4
 542 0046 0B48     		ldr	r0, .L42+4
 543 0048 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 544              	.LVL38:
 146:Src/main.c    **** 
 545              		.loc 1 146 0
 546 004c F020     		movs	r0, #240
 547 004e FFF7FEFF 		bl	HAL_Delay
 548              	.LVL39:
 149:Src/main.c    ****     {
 549              		.loc 1 149 0
 550 0052 0A48     		ldr	r0, .L42+12
 551 0054 FFF7FEFF 		bl	HAL_IWDG_Refresh
 552              	.LVL40:
 553 0058 0028     		cmp	r0, #0
 554 005a F3D0     		beq	.L40
 151:Src/main.c    ****     }
 555              		.loc 1 151 0
 556 005c 9721     		movs	r1, #151
 557 005e 0948     		ldr	r0, .L42+20
 558 0060 FFF7FEFF 		bl	_Error_Handler
 559              	.LVL41:
 560              	.L38:
 116:Src/main.c    ****   }
 561              		.loc 1 116 0
 562 0064 0022     		movs	r2, #0
 563 0066 0821     		movs	r1, #8
 564 0068 0248     		ldr	r0, .L42+4
 565 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 566              	.LVL42:
 567 006e DDE7     		b	.L39
 568              	.L43:
 569              		.align	2
 570              	.L42:
 571 0070 00380240 		.word	1073887232
 572 0074 00140240 		.word	1073878016
 573 0078 00000000 		.word	.LANCHOR3
 574 007c 00000000 		.word	hiwdg
 575 0080 00300040 		.word	1073754112
 576 0084 00000000 		.word	.LC0
 577              		.cfi_endproc
 578              	.LFE123:
 580              		.section	.text.assert_failed,"ax",%progbits
 581              		.align	1
 582              		.global	assert_failed
 583              		.syntax unified
 584              		.thumb
 585              		.thumb_func
 586              		.fpu fpv4-sp-d16
 588              	assert_failed:
 589              	.LFB128:
 432:Src/main.c    ****     
 433:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
ARM GAS  /tmp/ccYUnjnK.s 			page 20


 434:Src/main.c    ****   while(1) 
 435:Src/main.c    ****   {
 436:Src/main.c    ****   }
 437:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */ 
 438:Src/main.c    **** }
 439:Src/main.c    **** 
 440:Src/main.c    **** #ifdef USE_FULL_ASSERT
 441:Src/main.c    **** 
 442:Src/main.c    **** /**
 443:Src/main.c    ****    * @brief Reports the name of the source file and the source line number
 444:Src/main.c    ****    * where the assert_param error has occurred.
 445:Src/main.c    ****    * @param file: pointer to the source file name
 446:Src/main.c    ****    * @param line: assert_param error line source number
 447:Src/main.c    ****    * @retval None
 448:Src/main.c    ****    */
 449:Src/main.c    **** void assert_failed(uint8_t* file, uint32_t line)
 450:Src/main.c    **** {
 590              		.loc 1 450 0
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 0
 593              		@ frame_needed = 0, uses_anonymous_args = 0
 594              		@ link register save eliminated.
 595              	.LVL43:
 596 0000 7047     		bx	lr
 597              		.cfi_endproc
 598              	.LFE128:
 600              		.global	uwMeasurementDone
 601              		.global	uwPeriodValue
 602              		.global	uwCaptureNumber
 603              		.comm	htim5,60,4
 604              		.comm	hiwdg,12,4
 605              		.section	.bss.uwCaptureNumber,"aw",%nobits
 606              		.align	2
 607              		.set	.LANCHOR1,. + 0
 610              	uwCaptureNumber:
 611 0000 00000000 		.space	4
 612              		.section	.bss.uwLsiFreq,"aw",%nobits
 613              		.align	2
 614              		.set	.LANCHOR3,. + 0
 617              	uwLsiFreq:
 618 0000 00000000 		.space	4
 619              		.section	.bss.uwMeasurementDone,"aw",%nobits
 620              		.align	2
 621              		.set	.LANCHOR0,. + 0
 624              	uwMeasurementDone:
 625 0000 00000000 		.space	4
 626              		.section	.bss.uwPeriodValue,"aw",%nobits
 627              		.align	2
 628              		.set	.LANCHOR2,. + 0
 631              	uwPeriodValue:
 632 0000 00000000 		.space	4
 633              		.section	.rodata.GetLSIFrequency.str1.4,"aMS",%progbits,1
 634              		.align	2
 635              	.LC0:
 636 0000 5372632F 		.ascii	"Src/main.c\000"
 636      6D61696E 
 636      2E6300
ARM GAS  /tmp/ccYUnjnK.s 			page 21


 637              		.text
 638              	.Letext0:
 639              		.file 2 "/home/saicharan/arm/arm-none-eabi/include/machine/_default_types.h"
 640              		.file 3 "/home/saicharan/arm/arm-none-eabi/include/stdint.h"
 641              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 642              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 643              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 644              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 645              		.file 8 "/home/saicharan/arm/arm-none-eabi/include/sys/lock.h"
 646              		.file 9 "/home/saicharan/arm/arm-none-eabi/include/sys/_types.h"
 647              		.file 10 "/home/saicharan/arm/lib/gcc/arm-none-eabi/6.3.0/include/stddef.h"
 648              		.file 11 "/home/saicharan/arm/arm-none-eabi/include/sys/reent.h"
 649              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 650              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 651              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 652              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 653              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 654              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_iwdg.h"
 655              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 656              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 657              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 658              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
ARM GAS  /tmp/ccYUnjnK.s 			page 22


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccYUnjnK.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccYUnjnK.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccYUnjnK.s:103    .text.MX_GPIO_Init:000000000000005c $d
     /tmp/ccYUnjnK.s:110    .text._Error_Handler:0000000000000000 $t
     /tmp/ccYUnjnK.s:117    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccYUnjnK.s:146    .text._Error_Handler:0000000000000014 $d
     /tmp/ccYUnjnK.s:151    .text.GetLSIFrequency:0000000000000000 $t
     /tmp/ccYUnjnK.s:157    .text.GetLSIFrequency:0000000000000000 GetLSIFrequency
     /tmp/ccYUnjnK.s:336    .text.GetLSIFrequency:00000000000000fc $d
                            *COM*:000000000000003c htim5
     /tmp/ccYUnjnK.s:348    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccYUnjnK.s:355    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccYUnjnK.s:470    .text.SystemClock_Config:0000000000000098 $d
     /tmp/ccYUnjnK.s:478    .text.main:0000000000000000 $t
     /tmp/ccYUnjnK.s:485    .text.main:0000000000000000 main
     /tmp/ccYUnjnK.s:571    .text.main:0000000000000070 $d
                            *COM*:000000000000000c hiwdg
     /tmp/ccYUnjnK.s:581    .text.assert_failed:0000000000000000 $t
     /tmp/ccYUnjnK.s:588    .text.assert_failed:0000000000000000 assert_failed
     /tmp/ccYUnjnK.s:624    .bss.uwMeasurementDone:0000000000000000 uwMeasurementDone
     /tmp/ccYUnjnK.s:631    .bss.uwPeriodValue:0000000000000000 uwPeriodValue
     /tmp/ccYUnjnK.s:610    .bss.uwCaptureNumber:0000000000000000 uwCaptureNumber
     /tmp/ccYUnjnK.s:606    .bss.uwCaptureNumber:0000000000000000 $d
     /tmp/ccYUnjnK.s:613    .bss.uwLsiFreq:0000000000000000 $d
     /tmp/ccYUnjnK.s:617    .bss.uwLsiFreq:0000000000000000 uwLsiFreq
     /tmp/ccYUnjnK.s:620    .bss.uwMeasurementDone:0000000000000000 $d
     /tmp/ccYUnjnK.s:627    .bss.uwPeriodValue:0000000000000000 $d
     /tmp/ccYUnjnK.s:634    .rodata.GetLSIFrequency.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_GPIO_TogglePin
HAL_Delay
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_IC_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_IC_ConfigChannel
HAL_TIMEx_RemapConfig
HAL_TIM_IC_Start_IT
HAL_TIM_IC_DeInit
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_Init
HAL_IWDG_Refresh
