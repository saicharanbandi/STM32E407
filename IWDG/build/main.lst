ARM GAS  /tmp/cc1ovdIk.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB125:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * File Name          : main.c
   4:Src/main.c    ****   * Description        : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   ** This notice applies to any and all portions of this file
   7:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
   9:Src/main.c    ****   * inserted by the user or by software development tools
  10:Src/main.c    ****   * are owned by their respective copyright owners.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * COPYRIGHT(c) 2017 STMicroelectronics
  13:Src/main.c    ****   *
  14:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  15:Src/main.c    ****   * are permitted provided that the following conditions are met:
  16:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  17:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  18:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  19:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  20:Src/main.c    ****   *      and/or other materials provided with the distribution.
  21:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  22:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  23:Src/main.c    ****   *      without specific prior written permission.
  24:Src/main.c    ****   *
  25:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  26:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  27:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  28:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  29:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  30:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  31:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  32:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
ARM GAS  /tmp/cc1ovdIk.s 			page 2


  33:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:Src/main.c    ****   *
  36:Src/main.c    ****   ******************************************************************************
  37:Src/main.c    ****   */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE BEGIN Includes */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* USER CODE END Includes */
  46:Src/main.c    **** 
  47:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  48:Src/main.c    **** IWDG_HandleTypeDef hiwdg;
  49:Src/main.c    **** 
  50:Src/main.c    **** TIM_HandleTypeDef htim5;
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE BEGIN PV */
  53:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  54:Src/main.c    **** static __IO uint32_t uwLsiFreq = 0;
  55:Src/main.c    **** __IO uint32_t uwCaptureNumber = 0;
  56:Src/main.c    **** __IO uint32_t uwPeriodValue = 0;
  57:Src/main.c    **** __IO uint32_t uwMeasurementDone = 0;
  58:Src/main.c    **** /* USER CODE END PV */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  61:Src/main.c    **** void SystemClock_Config(void);
  62:Src/main.c    **** static void MX_GPIO_Init(void);
  63:Src/main.c    **** /* static void MX_IWDG_Init(void); */
  64:Src/main.c    **** /* static void MX_TIM5_Init(void); */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* USER CODE BEGIN PFP */
  67:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  68:Src/main.c    **** static uint32_t GetLSIFrequency(void);
  69:Src/main.c    **** /* USER CODE END PFP */
  70:Src/main.c    **** 
  71:Src/main.c    **** /* USER CODE BEGIN 0 */
  72:Src/main.c    **** 
  73:Src/main.c    **** /* USER CODE END 0 */
  74:Src/main.c    **** 
  75:Src/main.c    **** int main(void)
  76:Src/main.c    **** {
  77:Src/main.c    **** 
  78:Src/main.c    ****   /* USER CODE BEGIN 1 */
  79:Src/main.c    **** 
  80:Src/main.c    ****   /* USER CODE END 1 */
  81:Src/main.c    **** 
  82:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
  83:Src/main.c    **** 
  84:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  85:Src/main.c    ****   HAL_Init();
  86:Src/main.c    **** 
  87:Src/main.c    ****   /* USER CODE BEGIN Init */
  88:Src/main.c    **** 
  89:Src/main.c    ****   /* USER CODE END Init */
ARM GAS  /tmp/cc1ovdIk.s 			page 3


  90:Src/main.c    **** 
  91:Src/main.c    ****   /* Configure the system clock */
  92:Src/main.c    ****   SystemClock_Config();
  93:Src/main.c    **** 
  94:Src/main.c    ****   /* USER CODE BEGIN SysInit */
  95:Src/main.c    **** 
  96:Src/main.c    ****   /* USER CODE END SysInit */
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* Initialize all configured peripherals */
  99:Src/main.c    ****   MX_GPIO_Init();
 100:Src/main.c    ****   /* MX_IWDG_Init(); */
 101:Src/main.c    ****   /* MX_TIM5_Init(); */
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* USER CODE BEGIN 2 */
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* ##-1- Check if the system has resumed from IWDG reset ###################### */
 106:Src/main.c    ****   if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET)
 107:Src/main.c    ****   {
 108:Src/main.c    ****     /* IWDGRST flag set: Turn LED_Blue on */
 109:Src/main.c    ****     HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 110:Src/main.c    **** 
 111:Src/main.c    ****     /* Clear reset flags */
 112:Src/main.c    ****     __HAL_RCC_CLEAR_RESET_FLAGS();
 113:Src/main.c    ****   }
 114:Src/main.c    ****   else
 115:Src/main.c    ****   {
 116:Src/main.c    ****     /* IWDGRST flag is not set: Turn LED_Blue off */
 117:Src/main.c    ****     HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 118:Src/main.c    ****   }
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* /\*##-2- Get the LSI frequency: TIM5 is used to measure the LSI frequency ###*\/ */
 121:Src/main.c    ****   uwLsiFreq = GetLSIFrequency();
 122:Src/main.c    **** 
 123:Src/main.c    ****   /*##-3- Configure the IWDG peripheral #####################################*/
 124:Src/main.c    ****   /* Set counter reload value to obtain 250ms IWDG Timeout.
 125:Src/main.c    ****      IWDG counter clock frequency = LsiFreq / 32
 126:Src/main.c    ****      Counter Reload Value = 250ms / IWDG counter clock period
 127:Src/main.c    ****                           = 0.25s / (32/LsiFreq)
 128:Src/main.c    ****   			  = LsiFreq / 128 */
 129:Src/main.c    ****   hiwdg.Instance = IWDG;
 130:Src/main.c    ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 131:Src/main.c    ****   hiwdg.Init.Reload = uwLsiFreq/128;
 132:Src/main.c    ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 133:Src/main.c    ****   {
 134:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 135:Src/main.c    ****   }
 136:Src/main.c    ****   
 137:Src/main.c    ****   /* USER CODE END 2 */
 138:Src/main.c    **** 
 139:Src/main.c    ****   /* Infinite loop */
 140:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 141:Src/main.c    ****   while (1)
 142:Src/main.c    ****   {
 143:Src/main.c    ****     /* Toggle LED_Green */
 144:Src/main.c    ****     HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
 145:Src/main.c    **** 
 146:Src/main.c    ****     /* Insert 240ms delay */
ARM GAS  /tmp/cc1ovdIk.s 			page 4


 147:Src/main.c    ****     HAL_Delay(240);
 148:Src/main.c    **** 
 149:Src/main.c    ****     /* Refresh IWDG: reload counter */
 150:Src/main.c    ****     if(HAL_IWDG_Refresh(&hiwdg) != HAL_OK)
 151:Src/main.c    ****     {
 152:Src/main.c    ****       _Error_Handler(__FILE__, __LINE__);
 153:Src/main.c    ****     }
 154:Src/main.c    **** 
 155:Src/main.c    ****   /* USER CODE END WHILE */
 156:Src/main.c    **** 
 157:Src/main.c    ****   /* USER CODE BEGIN 3 */
 158:Src/main.c    **** 
 159:Src/main.c    ****   }
 160:Src/main.c    ****   /* USER CODE END 3 */
 161:Src/main.c    **** 
 162:Src/main.c    **** }
 163:Src/main.c    **** 
 164:Src/main.c    **** /** System Clock Configuration
 165:Src/main.c    **** */
 166:Src/main.c    **** void SystemClock_Config(void)
 167:Src/main.c    **** {
 168:Src/main.c    **** 
 169:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 170:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 171:Src/main.c    **** 
 172:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 173:Src/main.c    ****     */
 174:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 175:Src/main.c    **** 
 176:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 177:Src/main.c    **** 
 178:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 179:Src/main.c    ****     */
 180:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 181:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 182:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 183:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 184:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 185:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 186:Src/main.c    ****   {
 187:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 188:Src/main.c    ****   }
 189:Src/main.c    **** 
 190:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 191:Src/main.c    ****     */
 192:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 193:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 194:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 195:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 196:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 197:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 198:Src/main.c    **** 
 199:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 200:Src/main.c    ****   {
 201:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 202:Src/main.c    ****   }
 203:Src/main.c    **** 
ARM GAS  /tmp/cc1ovdIk.s 			page 5


 204:Src/main.c    ****     /**Configure the Systick interrupt time 
 205:Src/main.c    ****     */
 206:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 207:Src/main.c    **** 
 208:Src/main.c    ****     /**Configure the Systick 
 209:Src/main.c    ****     */
 210:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 211:Src/main.c    **** 
 212:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 213:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 214:Src/main.c    **** }
 215:Src/main.c    **** 
 216:Src/main.c    **** /* /\* IWDG init function *\/ */
 217:Src/main.c    **** /* static void MX_IWDG_Init(void) */
 218:Src/main.c    **** /* { */
 219:Src/main.c    **** 
 220:Src/main.c    **** /*   hiwdg.Instance = IWDG; */
 221:Src/main.c    **** /*   hiwdg.Init.Prescaler = IWDG_PRESCALER_4; */
 222:Src/main.c    **** /*   hiwdg.Init.Reload = 4095; */
 223:Src/main.c    **** /*   if (HAL_IWDG_Init(&hiwdg) != HAL_OK) */
 224:Src/main.c    **** /*   { */
 225:Src/main.c    **** /*     _Error_Handler(__FILE__, __LINE__); */
 226:Src/main.c    **** /*   } */
 227:Src/main.c    **** 
 228:Src/main.c    **** /* } */
 229:Src/main.c    **** 
 230:Src/main.c    **** /* /\* TIM5 init function *\/ */
 231:Src/main.c    **** /* static void MX_TIM5_Init(void) */
 232:Src/main.c    **** /* { */
 233:Src/main.c    **** 
 234:Src/main.c    **** /*   TIM_ClockConfigTypeDef sClockSourceConfig; */
 235:Src/main.c    **** /*   TIM_MasterConfigTypeDef sMasterConfig; */
 236:Src/main.c    **** /*   TIM_IC_InitTypeDef sConfigIC; */
 237:Src/main.c    **** 
 238:Src/main.c    **** /*   htim5.Instance = TIM5; */
 239:Src/main.c    **** /*   htim5.Init.Prescaler = 0; */
 240:Src/main.c    **** /*   htim5.Init.CounterMode = TIM_COUNTERMODE_UP; */
 241:Src/main.c    **** /*   htim5.Init.Period = 0xFFFF; */
 242:Src/main.c    **** /*   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1; */
 243:Src/main.c    **** /*   if (HAL_TIM_Base_Init(&htim5) != HAL_OK) */
 244:Src/main.c    **** /*   { */
 245:Src/main.c    **** /*     _Error_Handler(__FILE__, __LINE__); */
 246:Src/main.c    **** /*   } */
 247:Src/main.c    **** 
 248:Src/main.c    **** /*   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL; */
 249:Src/main.c    **** /*   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) */
 250:Src/main.c    **** /*   { */
 251:Src/main.c    **** /*     _Error_Handler(__FILE__, __LINE__); */
 252:Src/main.c    **** /*   } */
 253:Src/main.c    **** 
 254:Src/main.c    **** /*   if (HAL_TIM_IC_Init(&htim5) != HAL_OK) */
 255:Src/main.c    **** /*   { */
 256:Src/main.c    **** /*     _Error_Handler(__FILE__, __LINE__); */
 257:Src/main.c    **** /*   } */
 258:Src/main.c    **** 
 259:Src/main.c    **** /*   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET; */
 260:Src/main.c    **** /*   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE; */
ARM GAS  /tmp/cc1ovdIk.s 			page 6


 261:Src/main.c    **** /*   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) */
 262:Src/main.c    **** /*   { */
 263:Src/main.c    **** /*     _Error_Handler(__FILE__, __LINE__); */
 264:Src/main.c    **** /*   } */
 265:Src/main.c    **** 
 266:Src/main.c    **** /*   sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING; */
 267:Src/main.c    **** /*   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI; */
 268:Src/main.c    **** /*   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1; */
 269:Src/main.c    **** /*   sConfigIC.ICFilter = 0; */
 270:Src/main.c    **** /*   if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK) */
 271:Src/main.c    **** /*   { */
 272:Src/main.c    **** /*     _Error_Handler(__FILE__, __LINE__); */
 273:Src/main.c    **** /*   } */
 274:Src/main.c    **** 
 275:Src/main.c    **** /*   if (HAL_TIMEx_RemapConfig(&htim5, TIM_TIM5_LSI) != HAL_OK) */
 276:Src/main.c    **** /*   { */
 277:Src/main.c    **** /*     _Error_Handler(__FILE__, __LINE__); */
 278:Src/main.c    **** /*   } */
 279:Src/main.c    **** 
 280:Src/main.c    **** /* } */
 281:Src/main.c    **** 
 282:Src/main.c    **** /** Configure pins as 
 283:Src/main.c    ****         * Analog 
 284:Src/main.c    ****         * Input 
 285:Src/main.c    ****         * Output
 286:Src/main.c    ****         * EVENT_OUT
 287:Src/main.c    ****         * EXTI
 288:Src/main.c    **** */
 289:Src/main.c    **** static void MX_GPIO_Init(void)
 290:Src/main.c    **** {
  27              		.loc 1 290 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 32
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  38 0002 88B0     		sub	sp, sp, #32
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 48
  41              	.LBB2:
 291:Src/main.c    **** 
 292:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 293:Src/main.c    **** 
 294:Src/main.c    ****   /* GPIO Ports Clock Enable */
 295:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  42              		.loc 1 295 0
  43 0004 0024     		movs	r4, #0
  44 0006 0194     		str	r4, [sp, #4]
  45 0008 1A4B     		ldr	r3, .L3
  46 000a 1A6B     		ldr	r2, [r3, #48]
  47 000c 42F02002 		orr	r2, r2, #32
  48 0010 1A63     		str	r2, [r3, #48]
ARM GAS  /tmp/cc1ovdIk.s 			page 7


  49 0012 1A6B     		ldr	r2, [r3, #48]
  50 0014 02F02002 		and	r2, r2, #32
  51 0018 0192     		str	r2, [sp, #4]
  52 001a 019A     		ldr	r2, [sp, #4]
  53              	.LBE2:
  54              	.LBB3:
 296:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  55              		.loc 1 296 0
  56 001c 0294     		str	r4, [sp, #8]
  57 001e 1A6B     		ldr	r2, [r3, #48]
  58 0020 42F00102 		orr	r2, r2, #1
  59 0024 1A63     		str	r2, [r3, #48]
  60 0026 1B6B     		ldr	r3, [r3, #48]
  61 0028 03F00103 		and	r3, r3, #1
  62 002c 0293     		str	r3, [sp, #8]
  63 002e 029B     		ldr	r3, [sp, #8]
  64              	.LBE3:
 297:Src/main.c    **** 
 298:Src/main.c    ****   /*Configure GPIO pin Output Level */
 299:Src/main.c    ****   HAL_GPIO_WritePin(GPIOF, LED_Green_Pin|LED_Blue_Pin|LED_Yellow_Pin|LED_Red_Pin, GPIO_PIN_RESET);
  65              		.loc 1 299 0
  66 0030 114E     		ldr	r6, .L3+4
  67 0032 2246     		mov	r2, r4
  68 0034 3C21     		movs	r1, #60
  69 0036 3046     		mov	r0, r6
  70 0038 FFF7FEFF 		bl	HAL_GPIO_WritePin
  71              	.LVL0:
 300:Src/main.c    **** 
 301:Src/main.c    ****   /*Configure GPIO pins : LED_Green_Pin LED_Blue_Pin LED_Yellow_Pin LED_Red_Pin */
 302:Src/main.c    ****   GPIO_InitStruct.Pin = LED_Green_Pin|LED_Blue_Pin|LED_Yellow_Pin|LED_Red_Pin;
  72              		.loc 1 302 0
  73 003c 3C23     		movs	r3, #60
  74 003e 0393     		str	r3, [sp, #12]
 303:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  75              		.loc 1 303 0
  76 0040 0125     		movs	r5, #1
  77 0042 0495     		str	r5, [sp, #16]
 304:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  78              		.loc 1 304 0
  79 0044 0594     		str	r4, [sp, #20]
 305:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  80              		.loc 1 305 0
  81 0046 0694     		str	r4, [sp, #24]
 306:Src/main.c    ****   HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
  82              		.loc 1 306 0
  83 0048 03A9     		add	r1, sp, #12
  84 004a 3046     		mov	r0, r6
  85 004c FFF7FEFF 		bl	HAL_GPIO_Init
  86              	.LVL1:
 307:Src/main.c    **** 
 308:Src/main.c    ****   /*Configure GPIO pin : WKUP_BUTTON_Pin */
 309:Src/main.c    ****   GPIO_InitStruct.Pin = WKUP_BUTTON_Pin;
  87              		.loc 1 309 0
  88 0050 0395     		str	r5, [sp, #12]
 310:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  89              		.loc 1 310 0
  90 0052 0A4B     		ldr	r3, .L3+8
ARM GAS  /tmp/cc1ovdIk.s 			page 8


  91 0054 0493     		str	r3, [sp, #16]
 311:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  92              		.loc 1 311 0
  93 0056 0594     		str	r4, [sp, #20]
 312:Src/main.c    ****   HAL_GPIO_Init(WKUP_BUTTON_GPIO_Port, &GPIO_InitStruct);
  94              		.loc 1 312 0
  95 0058 03A9     		add	r1, sp, #12
  96 005a 0948     		ldr	r0, .L3+12
  97 005c FFF7FEFF 		bl	HAL_GPIO_Init
  98              	.LVL2:
 313:Src/main.c    **** 
 314:Src/main.c    ****   /* EXTI interrupt init*/
 315:Src/main.c    ****   HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 1);
  99              		.loc 1 315 0
 100 0060 2A46     		mov	r2, r5
 101 0062 2946     		mov	r1, r5
 102 0064 0620     		movs	r0, #6
 103 0066 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 104              	.LVL3:
 316:Src/main.c    ****   HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 105              		.loc 1 316 0
 106 006a 0620     		movs	r0, #6
 107 006c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 108              	.LVL4:
 317:Src/main.c    **** 
 318:Src/main.c    **** }
 109              		.loc 1 318 0
 110 0070 08B0     		add	sp, sp, #32
 111              	.LCFI2:
 112              		.cfi_def_cfa_offset 16
 113              		@ sp needed
 114 0072 70BD     		pop	{r4, r5, r6, pc}
 115              	.L4:
 116              		.align	2
 117              	.L3:
 118 0074 00380240 		.word	1073887232
 119 0078 00140240 		.word	1073878016
 120 007c 00001110 		.word	269549568
 121 0080 00000240 		.word	1073872896
 122              		.cfi_endproc
 123              	.LFE125:
 125              		.section	.text._Error_Handler,"ax",%progbits
 126              		.align	1
 127              		.global	_Error_Handler
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	_Error_Handler:
 134              	.LFB127:
 319:Src/main.c    **** 
 320:Src/main.c    **** /* USER CODE BEGIN 4 */
 321:Src/main.c    **** /**
 322:Src/main.c    ****   * @brief  Configures TIM5 to measure the LSI oscillator frequency.
 323:Src/main.c    ****   * @param  None
 324:Src/main.c    ****   * @retval LSI Frequency
 325:Src/main.c    ****   */
ARM GAS  /tmp/cc1ovdIk.s 			page 9


 326:Src/main.c    **** static uint32_t GetLSIFrequency(void)
 327:Src/main.c    **** {
 328:Src/main.c    ****   uint32_t pclk1 = 0;
 329:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig;
 330:Src/main.c    ****   TIM_IC_InitTypeDef sConfigIC;
 331:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 332:Src/main.c    ****   
 333:Src/main.c    **** 
 334:Src/main.c    ****   /* Enable the LSI oscillator */
 335:Src/main.c    ****   __HAL_RCC_LSI_ENABLE();
 336:Src/main.c    **** 
 337:Src/main.c    ****   /* Wait till LSI is ready */
 338:Src/main.c    ****   while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 339:Src/main.c    ****   {
 340:Src/main.c    ****   }
 341:Src/main.c    **** 
 342:Src/main.c    ****   /* Configure the TIM peripheral */
 343:Src/main.c    ****   /* Set TIMx instance */
 344:Src/main.c    ****   htim5.Instance = TIM5;
 345:Src/main.c    **** 
 346:Src/main.c    ****   /* TIM5 configuration: Input capture mode ---------------------------
 347:Src/main.c    ****   The LSI oscillator is connected to TIM5 CH4.
 348:Src/main.c    ****   The Rising edge is used as active edge.
 349:Src/main.c    ****   The TIM5 CCR4 is used to compute the frequency value.
 350:Src/main.c    ****   -------------------------------------------------------------------*/
 351:Src/main.c    ****   htim5.Init.Prescaler         = 0;
 352:Src/main.c    ****   htim5.Init.CounterMode       = TIM_COUNTERMODE_UP;
 353:Src/main.c    ****   htim5.Init.Period            = 0xFFFF;
 354:Src/main.c    ****   htim5.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 355:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 356:Src/main.c    ****   {
 357:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 358:Src/main.c    ****   }
 359:Src/main.c    **** 
 360:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 361:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 362:Src/main.c    ****   {
 363:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 364:Src/main.c    ****   }
 365:Src/main.c    **** 
 366:Src/main.c    ****   if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 367:Src/main.c    ****   {
 368:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 369:Src/main.c    ****   }
 370:Src/main.c    **** 
 371:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 372:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 373:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 374:Src/main.c    ****   {
 375:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 376:Src/main.c    ****   }
 377:Src/main.c    **** 
 378:Src/main.c    ****   /* Configure the Input Capture of channel 4 */
 379:Src/main.c    ****   sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 380:Src/main.c    ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 381:Src/main.c    ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 382:Src/main.c    ****   sConfigIC.ICFilter = 0;
ARM GAS  /tmp/cc1ovdIk.s 			page 10


 383:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 384:Src/main.c    ****   {
 385:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 386:Src/main.c    ****   }
 387:Src/main.c    **** 
 388:Src/main.c    ****   /* Connect internally the TIM5_CH4 Input Capture to the LSI clock output */
 389:Src/main.c    ****   if (HAL_TIMEx_RemapConfig(&htim5, TIM_TIM5_LSI) != HAL_OK)
 390:Src/main.c    ****   {
 391:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 392:Src/main.c    ****   }
 393:Src/main.c    **** 
 394:Src/main.c    ****   /* Reset the flags */
 395:Src/main.c    ****   htim5.Instance->SR = 0;
 396:Src/main.c    **** 
 397:Src/main.c    ****   /* Start the TIM Input Capture Measurement in interrupt mode */
 398:Src/main.c    ****   if(HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4) != HAL_OK)
 399:Src/main.c    ****   {
 400:Src/main.c    ****     _Error_Handler(__FILE__,__LINE__);
 401:Src/main.c    ****   }
 402:Src/main.c    **** 
 403:Src/main.c    ****   /* Wait until the TIM5 get 2 LSI edges (refer to TIM5_IRQHandler()
 404:Src/main.c    ****      in stm32f4xx_it.c file) */
 405:Src/main.c    ****   while(uwMeasurementDone == 0)
 406:Src/main.c    ****   {
 407:Src/main.c    ****   }
 408:Src/main.c    ****   uwCaptureNumber = 0;
 409:Src/main.c    **** 
 410:Src/main.c    ****   /* Deinitialize the TIM5 peripheral registers to their default reset
 411:Src/main.c    ****      values */
 412:Src/main.c    ****   HAL_TIM_IC_DeInit(&htim5);
 413:Src/main.c    **** 
 414:Src/main.c    ****   /* Compute the LSI frequency, depending on TIM5 input clock
 415:Src/main.c    ****      frequency (PCLK1) */
 416:Src/main.c    ****   pclk1 = HAL_RCC_GetPCLK1Freq();
 417:Src/main.c    ****   return (pclk1 / uwPeriodValue);
 418:Src/main.c    **** 
 419:Src/main.c    **** }
 420:Src/main.c    **** 
 421:Src/main.c    **** 
 422:Src/main.c    **** /* USER CODE END 4 */
 423:Src/main.c    **** 
 424:Src/main.c    **** /**
 425:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 426:Src/main.c    ****   * @param  None
 427:Src/main.c    ****   * @retval None
 428:Src/main.c    ****   */
 429:Src/main.c    **** void _Error_Handler(char * file, int line)
 430:Src/main.c    **** {
 135              		.loc 1 430 0
 136              		.cfi_startproc
 137              		@ Volatile: function does not return.
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140              	.LVL5:
 141 0000 08B5     		push	{r3, lr}
 142              	.LCFI3:
 143              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc1ovdIk.s 			page 11


 144              		.cfi_offset 3, -8
 145              		.cfi_offset 14, -4
 431:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 432:Src/main.c    ****   HAL_GPIO_WritePin(LED_Yellow_GPIO_Port, LED_Yellow_Pin, GPIO_PIN_SET);
 146              		.loc 1 432 0
 147 0002 0122     		movs	r2, #1
 148 0004 1021     		movs	r1, #16
 149              	.LVL6:
 150 0006 0248     		ldr	r0, .L8
 151              	.LVL7:
 152 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 153              	.LVL8:
 154              	.L6:
 155 000c FEE7     		b	.L6
 156              	.L9:
 157 000e 00BF     		.align	2
 158              	.L8:
 159 0010 00140240 		.word	1073878016
 160              		.cfi_endproc
 161              	.LFE127:
 163              		.section	.text.GetLSIFrequency,"ax",%progbits
 164              		.align	1
 165              		.syntax unified
 166              		.thumb
 167              		.thumb_func
 168              		.fpu fpv4-sp-d16
 170              	GetLSIFrequency:
 171              	.LFB126:
 327:Src/main.c    ****   uint32_t pclk1 = 0;
 172              		.loc 1 327 0
 173              		.cfi_startproc
 174              		@ args = 0, pretend = 0, frame = 40
 175              		@ frame_needed = 0, uses_anonymous_args = 0
 176 0000 00B5     		push	{lr}
 177              	.LCFI4:
 178              		.cfi_def_cfa_offset 4
 179              		.cfi_offset 14, -4
 180 0002 8BB0     		sub	sp, sp, #44
 181              	.LCFI5:
 182              		.cfi_def_cfa_offset 48
 183              	.LVL9:
 335:Src/main.c    **** 
 184              		.loc 1 335 0
 185 0004 0122     		movs	r2, #1
 186 0006 3F4B     		ldr	r3, .L27
 187 0008 1A60     		str	r2, [r3]
 188              	.L11:
 338:Src/main.c    ****   {
 189              		.loc 1 338 0 discriminator 1
 190 000a 3F4B     		ldr	r3, .L27+4
 191 000c 5B6F     		ldr	r3, [r3, #116]
 192 000e 13F0020F 		tst	r3, #2
 193 0012 FAD0     		beq	.L11
 344:Src/main.c    **** 
 194              		.loc 1 344 0
 195 0014 3D48     		ldr	r0, .L27+8
 196 0016 3E4B     		ldr	r3, .L27+12
ARM GAS  /tmp/cc1ovdIk.s 			page 12


 197 0018 0360     		str	r3, [r0]
 351:Src/main.c    ****   htim5.Init.CounterMode       = TIM_COUNTERMODE_UP;
 198              		.loc 1 351 0
 199 001a 0023     		movs	r3, #0
 200 001c 4360     		str	r3, [r0, #4]
 352:Src/main.c    ****   htim5.Init.Period            = 0xFFFF;
 201              		.loc 1 352 0
 202 001e 8360     		str	r3, [r0, #8]
 353:Src/main.c    ****   htim5.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 203              		.loc 1 353 0
 204 0020 4FF6FF72 		movw	r2, #65535
 205 0024 C260     		str	r2, [r0, #12]
 354:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 206              		.loc 1 354 0
 207 0026 0361     		str	r3, [r0, #16]
 355:Src/main.c    ****   {
 208              		.loc 1 355 0
 209 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 210              	.LVL10:
 211 002c 0028     		cmp	r0, #0
 212 002e 46D1     		bne	.L20
 360:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 213              		.loc 1 360 0
 214 0030 0AA9     		add	r1, sp, #40
 215 0032 4FF48053 		mov	r3, #4096
 216 0036 41F8103D 		str	r3, [r1, #-16]!
 361:Src/main.c    ****   {
 217              		.loc 1 361 0
 218 003a 3448     		ldr	r0, .L27+8
 219 003c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 220              	.LVL11:
 221 0040 0028     		cmp	r0, #0
 222 0042 41D1     		bne	.L21
 366:Src/main.c    ****   {
 223              		.loc 1 366 0
 224 0044 3148     		ldr	r0, .L27+8
 225 0046 FFF7FEFF 		bl	HAL_TIM_IC_Init
 226              	.LVL12:
 227 004a 0028     		cmp	r0, #0
 228 004c 41D1     		bne	.L22
 371:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 229              		.loc 1 371 0
 230 004e 0023     		movs	r3, #0
 231 0050 0093     		str	r3, [sp]
 372:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 232              		.loc 1 372 0
 233 0052 0193     		str	r3, [sp, #4]
 373:Src/main.c    ****   {
 234              		.loc 1 373 0
 235 0054 6946     		mov	r1, sp
 236 0056 2D48     		ldr	r0, .L27+8
 237 0058 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 238              	.LVL13:
 239 005c 0028     		cmp	r0, #0
 240 005e 3DD1     		bne	.L23
 379:Src/main.c    ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 241              		.loc 1 379 0
ARM GAS  /tmp/cc1ovdIk.s 			page 13


 242 0060 0023     		movs	r3, #0
 243 0062 0293     		str	r3, [sp, #8]
 380:Src/main.c    ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 244              		.loc 1 380 0
 245 0064 0122     		movs	r2, #1
 246 0066 0392     		str	r2, [sp, #12]
 381:Src/main.c    ****   sConfigIC.ICFilter = 0;
 247              		.loc 1 381 0
 248 0068 0493     		str	r3, [sp, #16]
 382:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 249              		.loc 1 382 0
 250 006a 0593     		str	r3, [sp, #20]
 383:Src/main.c    ****   {
 251              		.loc 1 383 0
 252 006c 0C22     		movs	r2, #12
 253 006e 02A9     		add	r1, sp, #8
 254 0070 2648     		ldr	r0, .L27+8
 255 0072 FFF7FEFF 		bl	HAL_TIM_IC_ConfigChannel
 256              	.LVL14:
 257 0076 0028     		cmp	r0, #0
 258 0078 35D1     		bne	.L24
 389:Src/main.c    ****   {
 259              		.loc 1 389 0
 260 007a 4021     		movs	r1, #64
 261 007c 2348     		ldr	r0, .L27+8
 262 007e FFF7FEFF 		bl	HAL_TIMEx_RemapConfig
 263              	.LVL15:
 264 0082 0028     		cmp	r0, #0
 265 0084 34D1     		bne	.L25
 395:Src/main.c    **** 
 266              		.loc 1 395 0
 267 0086 2148     		ldr	r0, .L27+8
 268 0088 0368     		ldr	r3, [r0]
 269 008a 0022     		movs	r2, #0
 270 008c 1A61     		str	r2, [r3, #16]
 398:Src/main.c    ****   {
 271              		.loc 1 398 0
 272 008e 0C21     		movs	r1, #12
 273 0090 FFF7FEFF 		bl	HAL_TIM_IC_Start_IT
 274              	.LVL16:
 275 0094 0028     		cmp	r0, #0
 276 0096 30D1     		bne	.L26
 277              	.L18:
 405:Src/main.c    ****   {
 278              		.loc 1 405 0 discriminator 1
 279 0098 1E4B     		ldr	r3, .L27+16
 280 009a 1B68     		ldr	r3, [r3]
 281 009c 002B     		cmp	r3, #0
 282 009e FBD0     		beq	.L18
 408:Src/main.c    **** 
 283              		.loc 1 408 0
 284 00a0 0022     		movs	r2, #0
 285 00a2 1D4B     		ldr	r3, .L27+20
 286 00a4 1A60     		str	r2, [r3]
 412:Src/main.c    **** 
 287              		.loc 1 412 0
 288 00a6 1948     		ldr	r0, .L27+8
ARM GAS  /tmp/cc1ovdIk.s 			page 14


 289 00a8 FFF7FEFF 		bl	HAL_TIM_IC_DeInit
 290              	.LVL17:
 416:Src/main.c    ****   return (pclk1 / uwPeriodValue);
 291              		.loc 1 416 0
 292 00ac FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 293              	.LVL18:
 417:Src/main.c    **** 
 294              		.loc 1 417 0
 295 00b0 1A4B     		ldr	r3, .L27+24
 296 00b2 1B68     		ldr	r3, [r3]
 419:Src/main.c    **** 
 297              		.loc 1 419 0
 298 00b4 B0FBF3F0 		udiv	r0, r0, r3
 299              	.LVL19:
 300 00b8 0BB0     		add	sp, sp, #44
 301              	.LCFI6:
 302              		.cfi_remember_state
 303              		.cfi_def_cfa_offset 4
 304              		@ sp needed
 305 00ba 5DF804FB 		ldr	pc, [sp], #4
 306              	.LVL20:
 307              	.L20:
 308              	.LCFI7:
 309              		.cfi_restore_state
 357:Src/main.c    ****   }
 310              		.loc 1 357 0
 311 00be 40F26511 		movw	r1, #357
 312 00c2 1748     		ldr	r0, .L27+28
 313 00c4 FFF7FEFF 		bl	_Error_Handler
 314              	.LVL21:
 315              	.L21:
 363:Src/main.c    ****   }
 316              		.loc 1 363 0
 317 00c8 40F26B11 		movw	r1, #363
 318 00cc 1448     		ldr	r0, .L27+28
 319 00ce FFF7FEFF 		bl	_Error_Handler
 320              	.LVL22:
 321              	.L22:
 368:Src/main.c    ****   }
 322              		.loc 1 368 0
 323 00d2 4FF4B871 		mov	r1, #368
 324 00d6 1248     		ldr	r0, .L27+28
 325 00d8 FFF7FEFF 		bl	_Error_Handler
 326              	.LVL23:
 327              	.L23:
 375:Src/main.c    ****   }
 328              		.loc 1 375 0
 329 00dc 40F27711 		movw	r1, #375
 330 00e0 0F48     		ldr	r0, .L27+28
 331 00e2 FFF7FEFF 		bl	_Error_Handler
 332              	.LVL24:
 333              	.L24:
 385:Src/main.c    ****   }
 334              		.loc 1 385 0
 335 00e6 40F28111 		movw	r1, #385
 336 00ea 0D48     		ldr	r0, .L27+28
 337 00ec FFF7FEFF 		bl	_Error_Handler
ARM GAS  /tmp/cc1ovdIk.s 			page 15


 338              	.LVL25:
 339              	.L25:
 391:Src/main.c    ****   }
 340              		.loc 1 391 0
 341 00f0 40F28711 		movw	r1, #391
 342 00f4 0A48     		ldr	r0, .L27+28
 343 00f6 FFF7FEFF 		bl	_Error_Handler
 344              	.LVL26:
 345              	.L26:
 400:Src/main.c    ****   }
 346              		.loc 1 400 0
 347 00fa 4FF4C871 		mov	r1, #400
 348 00fe 0848     		ldr	r0, .L27+28
 349 0100 FFF7FEFF 		bl	_Error_Handler
 350              	.LVL27:
 351              	.L28:
 352              		.align	2
 353              	.L27:
 354 0104 800E4742 		.word	1111953024
 355 0108 00380240 		.word	1073887232
 356 010c 00000000 		.word	htim5
 357 0110 000C0040 		.word	1073744896
 358 0114 00000000 		.word	.LANCHOR0
 359 0118 00000000 		.word	.LANCHOR1
 360 011c 00000000 		.word	.LANCHOR2
 361 0120 00000000 		.word	.LC0
 362              		.cfi_endproc
 363              	.LFE126:
 365              		.section	.text.SystemClock_Config,"ax",%progbits
 366              		.align	1
 367              		.global	SystemClock_Config
 368              		.syntax unified
 369              		.thumb
 370              		.thumb_func
 371              		.fpu fpv4-sp-d16
 373              	SystemClock_Config:
 374              	.LFB124:
 167:Src/main.c    **** 
 375              		.loc 1 167 0
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 80
 378              		@ frame_needed = 0, uses_anonymous_args = 0
 379 0000 00B5     		push	{lr}
 380              	.LCFI8:
 381              		.cfi_def_cfa_offset 4
 382              		.cfi_offset 14, -4
 383 0002 95B0     		sub	sp, sp, #84
 384              	.LCFI9:
 385              		.cfi_def_cfa_offset 88
 386              	.LBB4:
 174:Src/main.c    **** 
 387              		.loc 1 174 0
 388 0004 0023     		movs	r3, #0
 389 0006 0193     		str	r3, [sp, #4]
 390 0008 234A     		ldr	r2, .L35
 391 000a 116C     		ldr	r1, [r2, #64]
 392 000c 41F08051 		orr	r1, r1, #268435456
ARM GAS  /tmp/cc1ovdIk.s 			page 16


 393 0010 1164     		str	r1, [r2, #64]
 394 0012 126C     		ldr	r2, [r2, #64]
 395 0014 02F08052 		and	r2, r2, #268435456
 396 0018 0192     		str	r2, [sp, #4]
 397 001a 019A     		ldr	r2, [sp, #4]
 398              	.LBE4:
 399              	.LBB5:
 176:Src/main.c    **** 
 400              		.loc 1 176 0
 401 001c 0293     		str	r3, [sp, #8]
 402 001e 1F4A     		ldr	r2, .L35+4
 403 0020 1168     		ldr	r1, [r2]
 404 0022 41F48041 		orr	r1, r1, #16384
 405 0026 1160     		str	r1, [r2]
 406 0028 1268     		ldr	r2, [r2]
 407 002a 02F48042 		and	r2, r2, #16384
 408 002e 0292     		str	r2, [sp, #8]
 409 0030 029A     		ldr	r2, [sp, #8]
 410              	.LBE5:
 180:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 411              		.loc 1 180 0
 412 0032 0A22     		movs	r2, #10
 413 0034 0892     		str	r2, [sp, #32]
 181:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 414              		.loc 1 181 0
 415 0036 0122     		movs	r2, #1
 416 0038 0B92     		str	r2, [sp, #44]
 182:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 417              		.loc 1 182 0
 418 003a 1021     		movs	r1, #16
 419 003c 0C91     		str	r1, [sp, #48]
 183:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 420              		.loc 1 183 0
 421 003e 0D92     		str	r2, [sp, #52]
 184:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 422              		.loc 1 184 0
 423 0040 0E93     		str	r3, [sp, #56]
 185:Src/main.c    ****   {
 424              		.loc 1 185 0
 425 0042 08A8     		add	r0, sp, #32
 426 0044 FFF7FEFF 		bl	HAL_RCC_OscConfig
 427              	.LVL28:
 428 0048 F0B9     		cbnz	r0, .L33
 192:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 429              		.loc 1 192 0
 430 004a 0F23     		movs	r3, #15
 431 004c 0393     		str	r3, [sp, #12]
 194:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 432              		.loc 1 194 0
 433 004e 0021     		movs	r1, #0
 434 0050 0491     		str	r1, [sp, #16]
 195:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 435              		.loc 1 195 0
 436 0052 0591     		str	r1, [sp, #20]
 196:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 437              		.loc 1 196 0
 438 0054 0691     		str	r1, [sp, #24]
ARM GAS  /tmp/cc1ovdIk.s 			page 17


 197:Src/main.c    **** 
 439              		.loc 1 197 0
 440 0056 0791     		str	r1, [sp, #28]
 199:Src/main.c    ****   {
 441              		.loc 1 199 0
 442 0058 03A8     		add	r0, sp, #12
 443 005a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 444              	.LVL29:
 445 005e B8B9     		cbnz	r0, .L34
 206:Src/main.c    **** 
 446              		.loc 1 206 0
 447 0060 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 448              	.LVL30:
 449 0064 0E4B     		ldr	r3, .L35+8
 450 0066 A3FB0030 		umull	r3, r0, r3, r0
 451 006a 8009     		lsrs	r0, r0, #6
 452 006c FFF7FEFF 		bl	HAL_SYSTICK_Config
 453              	.LVL31:
 210:Src/main.c    **** 
 454              		.loc 1 210 0
 455 0070 0420     		movs	r0, #4
 456 0072 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 457              	.LVL32:
 213:Src/main.c    **** }
 458              		.loc 1 213 0
 459 0076 0022     		movs	r2, #0
 460 0078 1146     		mov	r1, r2
 461 007a 4FF0FF30 		mov	r0, #-1
 462 007e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 463              	.LVL33:
 214:Src/main.c    **** 
 464              		.loc 1 214 0
 465 0082 15B0     		add	sp, sp, #84
 466              	.LCFI10:
 467              		.cfi_remember_state
 468              		.cfi_def_cfa_offset 4
 469              		@ sp needed
 470 0084 5DF804FB 		ldr	pc, [sp], #4
 471              	.L33:
 472              	.LCFI11:
 473              		.cfi_restore_state
 187:Src/main.c    ****   }
 474              		.loc 1 187 0
 475 0088 BB21     		movs	r1, #187
 476 008a 0648     		ldr	r0, .L35+12
 477 008c FFF7FEFF 		bl	_Error_Handler
 478              	.LVL34:
 479              	.L34:
 201:Src/main.c    ****   }
 480              		.loc 1 201 0
 481 0090 C921     		movs	r1, #201
 482 0092 0448     		ldr	r0, .L35+12
 483 0094 FFF7FEFF 		bl	_Error_Handler
 484              	.LVL35:
 485              	.L36:
 486              		.align	2
 487              	.L35:
ARM GAS  /tmp/cc1ovdIk.s 			page 18


 488 0098 00380240 		.word	1073887232
 489 009c 00700040 		.word	1073770496
 490 00a0 D34D6210 		.word	274877907
 491 00a4 00000000 		.word	.LC0
 492              		.cfi_endproc
 493              	.LFE124:
 495              		.section	.text.main,"ax",%progbits
 496              		.align	1
 497              		.global	main
 498              		.syntax unified
 499              		.thumb
 500              		.thumb_func
 501              		.fpu fpv4-sp-d16
 503              	main:
 504              	.LFB123:
  76:Src/main.c    **** 
 505              		.loc 1 76 0
 506              		.cfi_startproc
 507              		@ Volatile: function does not return.
 508              		@ args = 0, pretend = 0, frame = 0
 509              		@ frame_needed = 0, uses_anonymous_args = 0
 510 0000 08B5     		push	{r3, lr}
 511              	.LCFI12:
 512              		.cfi_def_cfa_offset 8
 513              		.cfi_offset 3, -8
 514              		.cfi_offset 14, -4
  85:Src/main.c    **** 
 515              		.loc 1 85 0
 516 0002 FFF7FEFF 		bl	HAL_Init
 517              	.LVL36:
  92:Src/main.c    **** 
 518              		.loc 1 92 0
 519 0006 FFF7FEFF 		bl	SystemClock_Config
 520              	.LVL37:
  99:Src/main.c    ****   /* MX_IWDG_Init(); */
 521              		.loc 1 99 0
 522 000a FFF7FEFF 		bl	MX_GPIO_Init
 523              	.LVL38:
 106:Src/main.c    ****   {
 524              		.loc 1 106 0
 525 000e 1C4B     		ldr	r3, .L43
 526 0010 5B6F     		ldr	r3, [r3, #116]
 527 0012 13F0005F 		tst	r3, #536870912
 528 0016 28D0     		beq	.L38
 109:Src/main.c    **** 
 529              		.loc 1 109 0
 530 0018 0122     		movs	r2, #1
 531 001a 0821     		movs	r1, #8
 532 001c 1948     		ldr	r0, .L43+4
 533 001e FFF7FEFF 		bl	HAL_GPIO_WritePin
 534              	.LVL39:
 112:Src/main.c    ****   }
 535              		.loc 1 112 0
 536 0022 174A     		ldr	r2, .L43
 537 0024 536F     		ldr	r3, [r2, #116]
 538 0026 43F08073 		orr	r3, r3, #16777216
 539 002a 5367     		str	r3, [r2, #116]
ARM GAS  /tmp/cc1ovdIk.s 			page 19


 540              	.L39:
 121:Src/main.c    **** 
 541              		.loc 1 121 0
 542 002c FFF7FEFF 		bl	GetLSIFrequency
 543              	.LVL40:
 544 0030 154B     		ldr	r3, .L43+8
 545 0032 1860     		str	r0, [r3]
 129:Src/main.c    ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 546              		.loc 1 129 0
 547 0034 1548     		ldr	r0, .L43+12
 548 0036 164A     		ldr	r2, .L43+16
 549 0038 0260     		str	r2, [r0]
 130:Src/main.c    ****   hiwdg.Init.Reload = uwLsiFreq/128;
 550              		.loc 1 130 0
 551 003a 0322     		movs	r2, #3
 552 003c 4260     		str	r2, [r0, #4]
 131:Src/main.c    ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 553              		.loc 1 131 0
 554 003e 1B68     		ldr	r3, [r3]
 555 0040 DB09     		lsrs	r3, r3, #7
 556 0042 8360     		str	r3, [r0, #8]
 132:Src/main.c    ****   {
 557              		.loc 1 132 0
 558 0044 FFF7FEFF 		bl	HAL_IWDG_Init
 559              	.LVL41:
 560 0048 A8B9     		cbnz	r0, .L42
 561              	.L40:
 144:Src/main.c    **** 
 562              		.loc 1 144 0
 563 004a 0421     		movs	r1, #4
 564 004c 0D48     		ldr	r0, .L43+4
 565 004e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 566              	.LVL42:
 147:Src/main.c    **** 
 567              		.loc 1 147 0
 568 0052 F020     		movs	r0, #240
 569 0054 FFF7FEFF 		bl	HAL_Delay
 570              	.LVL43:
 150:Src/main.c    ****     {
 571              		.loc 1 150 0
 572 0058 0C48     		ldr	r0, .L43+12
 573 005a FFF7FEFF 		bl	HAL_IWDG_Refresh
 574              	.LVL44:
 575 005e 0028     		cmp	r0, #0
 576 0060 F3D0     		beq	.L40
 152:Src/main.c    ****     }
 577              		.loc 1 152 0
 578 0062 9821     		movs	r1, #152
 579 0064 0B48     		ldr	r0, .L43+20
 580 0066 FFF7FEFF 		bl	_Error_Handler
 581              	.LVL45:
 582              	.L38:
 117:Src/main.c    ****   }
 583              		.loc 1 117 0
 584 006a 0022     		movs	r2, #0
 585 006c 0821     		movs	r1, #8
 586 006e 0548     		ldr	r0, .L43+4
ARM GAS  /tmp/cc1ovdIk.s 			page 20


 587 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 588              	.LVL46:
 589 0074 DAE7     		b	.L39
 590              	.L42:
 134:Src/main.c    ****   }
 591              		.loc 1 134 0
 592 0076 8621     		movs	r1, #134
 593 0078 0648     		ldr	r0, .L43+20
 594 007a FFF7FEFF 		bl	_Error_Handler
 595              	.LVL47:
 596              	.L44:
 597 007e 00BF     		.align	2
 598              	.L43:
 599 0080 00380240 		.word	1073887232
 600 0084 00140240 		.word	1073878016
 601 0088 00000000 		.word	.LANCHOR3
 602 008c 00000000 		.word	hiwdg
 603 0090 00300040 		.word	1073754112
 604 0094 00000000 		.word	.LC0
 605              		.cfi_endproc
 606              	.LFE123:
 608              		.section	.text.assert_failed,"ax",%progbits
 609              		.align	1
 610              		.global	assert_failed
 611              		.syntax unified
 612              		.thumb
 613              		.thumb_func
 614              		.fpu fpv4-sp-d16
 616              	assert_failed:
 617              	.LFB128:
 433:Src/main.c    ****   
 434:Src/main.c    ****     
 435:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 436:Src/main.c    ****   while(1) 
 437:Src/main.c    ****   {
 438:Src/main.c    ****   }
 439:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */ 
 440:Src/main.c    **** }
 441:Src/main.c    **** 
 442:Src/main.c    **** #ifdef USE_FULL_ASSERT
 443:Src/main.c    **** 
 444:Src/main.c    **** /**
 445:Src/main.c    ****    * @brief Reports the name of the source file and the source line number
 446:Src/main.c    ****    * where the assert_param error has occurred.
 447:Src/main.c    ****    * @param file: pointer to the source file name
 448:Src/main.c    ****    * @param line: assert_param error line source number
 449:Src/main.c    ****    * @retval None
 450:Src/main.c    ****    */
 451:Src/main.c    **** void assert_failed(uint8_t* file, uint32_t line)
 452:Src/main.c    **** {
 618              		.loc 1 452 0
 619              		.cfi_startproc
 620              		@ args = 0, pretend = 0, frame = 0
 621              		@ frame_needed = 0, uses_anonymous_args = 0
 622              		@ link register save eliminated.
 623              	.LVL48:
 624 0000 7047     		bx	lr
ARM GAS  /tmp/cc1ovdIk.s 			page 21


 625              		.cfi_endproc
 626              	.LFE128:
 628              		.global	uwMeasurementDone
 629              		.global	uwPeriodValue
 630              		.global	uwCaptureNumber
 631              		.comm	htim5,60,4
 632              		.comm	hiwdg,12,4
 633              		.section	.bss.uwCaptureNumber,"aw",%nobits
 634              		.align	2
 635              		.set	.LANCHOR1,. + 0
 638              	uwCaptureNumber:
 639 0000 00000000 		.space	4
 640              		.section	.bss.uwLsiFreq,"aw",%nobits
 641              		.align	2
 642              		.set	.LANCHOR3,. + 0
 645              	uwLsiFreq:
 646 0000 00000000 		.space	4
 647              		.section	.bss.uwMeasurementDone,"aw",%nobits
 648              		.align	2
 649              		.set	.LANCHOR0,. + 0
 652              	uwMeasurementDone:
 653 0000 00000000 		.space	4
 654              		.section	.bss.uwPeriodValue,"aw",%nobits
 655              		.align	2
 656              		.set	.LANCHOR2,. + 0
 659              	uwPeriodValue:
 660 0000 00000000 		.space	4
 661              		.section	.rodata.GetLSIFrequency.str1.4,"aMS",%progbits,1
 662              		.align	2
 663              	.LC0:
 664 0000 5372632F 		.ascii	"Src/main.c\000"
 664      6D61696E 
 664      2E6300
 665              		.text
 666              	.Letext0:
 667              		.file 2 "/home/saicharan/arm/arm-none-eabi/include/machine/_default_types.h"
 668              		.file 3 "/home/saicharan/arm/arm-none-eabi/include/stdint.h"
 669              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 670              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 671              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 672              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 673              		.file 8 "/home/saicharan/arm/arm-none-eabi/include/sys/lock.h"
 674              		.file 9 "/home/saicharan/arm/arm-none-eabi/include/sys/_types.h"
 675              		.file 10 "/home/saicharan/arm/lib/gcc/arm-none-eabi/6.3.0/include/stddef.h"
 676              		.file 11 "/home/saicharan/arm/arm-none-eabi/include/sys/reent.h"
 677              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 678              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 679              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 680              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 681              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 682              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_iwdg.h"
 683              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 684              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 685              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 686              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/cc1ovdIk.s 			page 22


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc1ovdIk.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc1ovdIk.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc1ovdIk.s:118    .text.MX_GPIO_Init:0000000000000074 $d
     /tmp/cc1ovdIk.s:126    .text._Error_Handler:0000000000000000 $t
     /tmp/cc1ovdIk.s:133    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/cc1ovdIk.s:159    .text._Error_Handler:0000000000000010 $d
     /tmp/cc1ovdIk.s:164    .text.GetLSIFrequency:0000000000000000 $t
     /tmp/cc1ovdIk.s:170    .text.GetLSIFrequency:0000000000000000 GetLSIFrequency
     /tmp/cc1ovdIk.s:354    .text.GetLSIFrequency:0000000000000104 $d
                            *COM*:000000000000003c htim5
     /tmp/cc1ovdIk.s:366    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc1ovdIk.s:373    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc1ovdIk.s:488    .text.SystemClock_Config:0000000000000098 $d
     /tmp/cc1ovdIk.s:496    .text.main:0000000000000000 $t
     /tmp/cc1ovdIk.s:503    .text.main:0000000000000000 main
     /tmp/cc1ovdIk.s:599    .text.main:0000000000000080 $d
                            *COM*:000000000000000c hiwdg
     /tmp/cc1ovdIk.s:609    .text.assert_failed:0000000000000000 $t
     /tmp/cc1ovdIk.s:616    .text.assert_failed:0000000000000000 assert_failed
     /tmp/cc1ovdIk.s:652    .bss.uwMeasurementDone:0000000000000000 uwMeasurementDone
     /tmp/cc1ovdIk.s:659    .bss.uwPeriodValue:0000000000000000 uwPeriodValue
     /tmp/cc1ovdIk.s:638    .bss.uwCaptureNumber:0000000000000000 uwCaptureNumber
     /tmp/cc1ovdIk.s:634    .bss.uwCaptureNumber:0000000000000000 $d
     /tmp/cc1ovdIk.s:641    .bss.uwLsiFreq:0000000000000000 $d
     /tmp/cc1ovdIk.s:645    .bss.uwLsiFreq:0000000000000000 uwLsiFreq
     /tmp/cc1ovdIk.s:648    .bss.uwMeasurementDone:0000000000000000 $d
     /tmp/cc1ovdIk.s:655    .bss.uwPeriodValue:0000000000000000 $d
     /tmp/cc1ovdIk.s:662    .rodata.GetLSIFrequency.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_IC_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_IC_ConfigChannel
HAL_TIMEx_RemapConfig
HAL_TIM_IC_Start_IT
HAL_TIM_IC_DeInit
HAL_RCC_GetPCLK1Freq
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_Init
HAL_IWDG_Init
HAL_GPIO_TogglePin
HAL_Delay
HAL_IWDG_Refresh
