ARM GAS  /tmp/ccYjNPIU.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB127:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * File Name          : main.c
   4:Src/main.c    ****   * Description        : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   ** This notice applies to any and all portions of this file
   7:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
   9:Src/main.c    ****   * inserted by the user or by software development tools
  10:Src/main.c    ****   * are owned by their respective copyright owners.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * COPYRIGHT(c) 2017 STMicroelectronics
  13:Src/main.c    ****   *
  14:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  15:Src/main.c    ****   * are permitted provided that the following conditions are met:
  16:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  17:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  18:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  19:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  20:Src/main.c    ****   *      and/or other materials provided with the distribution.
  21:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  22:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  23:Src/main.c    ****   *      without specific prior written permission.
  24:Src/main.c    ****   *
  25:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  26:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  27:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  28:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  29:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  30:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  31:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  32:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
ARM GAS  /tmp/ccYjNPIU.s 			page 2


  33:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:Src/main.c    ****   *
  36:Src/main.c    ****   ******************************************************************************
  37:Src/main.c    ****   */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE BEGIN Includes */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* USER CODE END Includes */
  46:Src/main.c    **** 
  47:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  48:Src/main.c    **** IWDG_HandleTypeDef hiwdg;
  49:Src/main.c    **** 
  50:Src/main.c    **** TIM_HandleTypeDef htim5;
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE BEGIN PV */
  53:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  54:Src/main.c    **** static __IO uint32_t uwLsiFreq = 0;
  55:Src/main.c    **** __IO uint32_t uwCaptureNumber = 0;
  56:Src/main.c    **** __IO uint32_t uwPeriodValue = 0;
  57:Src/main.c    **** __IO uint32_t uwMeasurementDone = 0;
  58:Src/main.c    **** /* USER CODE END PV */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  61:Src/main.c    **** void SystemClock_Config(void);
  62:Src/main.c    **** static void MX_GPIO_Init(void);
  63:Src/main.c    **** static void MX_IWDG_Init(void);
  64:Src/main.c    **** static void MX_TIM5_Init(void);
  65:Src/main.c    **** 
  66:Src/main.c    **** /* USER CODE BEGIN PFP */
  67:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  68:Src/main.c    **** static uint32_t GetLSIFrequency(void);
  69:Src/main.c    **** /* USER CODE END PFP */
  70:Src/main.c    **** 
  71:Src/main.c    **** /* USER CODE BEGIN 0 */
  72:Src/main.c    **** 
  73:Src/main.c    **** /* USER CODE END 0 */
  74:Src/main.c    **** 
  75:Src/main.c    **** int main(void)
  76:Src/main.c    **** {
  77:Src/main.c    **** 
  78:Src/main.c    ****   /* USER CODE BEGIN 1 */
  79:Src/main.c    **** 
  80:Src/main.c    ****   /* USER CODE END 1 */
  81:Src/main.c    **** 
  82:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
  83:Src/main.c    **** 
  84:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  85:Src/main.c    ****   HAL_Init();
  86:Src/main.c    **** 
  87:Src/main.c    ****   /* USER CODE BEGIN Init */
  88:Src/main.c    **** 
  89:Src/main.c    ****   /* USER CODE END Init */
ARM GAS  /tmp/ccYjNPIU.s 			page 3


  90:Src/main.c    **** 
  91:Src/main.c    ****   /* Configure the system clock */
  92:Src/main.c    ****   SystemClock_Config();
  93:Src/main.c    **** 
  94:Src/main.c    ****   /* USER CODE BEGIN SysInit */
  95:Src/main.c    **** 
  96:Src/main.c    ****   /* USER CODE END SysInit */
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* Initialize all configured peripherals */
  99:Src/main.c    ****   MX_GPIO_Init();
 100:Src/main.c    ****   MX_IWDG_Init();
 101:Src/main.c    ****   MX_TIM5_Init();
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* USER CODE BEGIN 2 */
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* ##-1- Check if the system has resumed from IWDG reset ###################### */
 106:Src/main.c    ****   if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET)
 107:Src/main.c    ****   {
 108:Src/main.c    ****     /* IWDGRST flag set: Turn LED_Blue on */
 109:Src/main.c    ****     HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 110:Src/main.c    **** 
 111:Src/main.c    ****     /* Clear reset flags */
 112:Src/main.c    ****     __HAL_RCC_CLEAR_RESET_FLAGS();
 113:Src/main.c    ****   }
 114:Src/main.c    ****   else
 115:Src/main.c    ****   {
 116:Src/main.c    ****     /* IWDGRST flag is not set: Turn LED_Blue off */
 117:Src/main.c    ****     HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 118:Src/main.c    ****   }
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* /\*##-2- Get the LSI frequency: TIM5 is used to measure the LSI frequency ###*\/ */
 121:Src/main.c    ****   uwLsiFreq = GetLSIFrequency();
 122:Src/main.c    **** 
 123:Src/main.c    ****   /*##-3- Configure the IWDG peripheral #####################################*/
 124:Src/main.c    ****   /* Set counter reload value to obtain 250ms IWDG Timeout.
 125:Src/main.c    ****      IWDG counter clock frequency = LsiFreq / 32
 126:Src/main.c    ****      Counter Reload Value = 250ms / IWDG counter clock period
 127:Src/main.c    ****                           = 0.25s / (32/LsiFreq)
 128:Src/main.c    ****   			  = LsiFreq / 128 */
 129:Src/main.c    ****   hiwdg.Instance = IWDG;
 130:Src/main.c    ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 131:Src/main.c    ****   hiwdg.Init.Reload = uwLsiFreq/128;
 132:Src/main.c    ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 133:Src/main.c    ****   {
 134:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 135:Src/main.c    ****   }
 136:Src/main.c    ****   
 137:Src/main.c    ****   /* USER CODE END 2 */
 138:Src/main.c    **** 
 139:Src/main.c    ****   /* Infinite loop */
 140:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 141:Src/main.c    ****   while (1)
 142:Src/main.c    ****   {
 143:Src/main.c    ****     /* Toggle LED_Green */
 144:Src/main.c    ****     HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
 145:Src/main.c    **** 
 146:Src/main.c    ****     /* Insert 240ms delay */
ARM GAS  /tmp/ccYjNPIU.s 			page 4


 147:Src/main.c    ****     HAL_Delay(240);
 148:Src/main.c    **** 
 149:Src/main.c    ****     /* Refresh IWDG: reload counter */
 150:Src/main.c    ****     if(HAL_IWDG_Refresh(&hiwdg) != HAL_OK)
 151:Src/main.c    ****     {
 152:Src/main.c    ****       _Error_Handler(__FILE__, __LINE__);
 153:Src/main.c    ****     }
 154:Src/main.c    **** 
 155:Src/main.c    ****   /* USER CODE END WHILE */
 156:Src/main.c    **** 
 157:Src/main.c    ****   /* USER CODE BEGIN 3 */
 158:Src/main.c    **** 
 159:Src/main.c    ****   }
 160:Src/main.c    ****   /* USER CODE END 3 */
 161:Src/main.c    **** 
 162:Src/main.c    **** }
 163:Src/main.c    **** 
 164:Src/main.c    **** /** System Clock Configuration
 165:Src/main.c    **** */
 166:Src/main.c    **** void SystemClock_Config(void)
 167:Src/main.c    **** {
 168:Src/main.c    **** 
 169:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 170:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 171:Src/main.c    **** 
 172:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 173:Src/main.c    ****     */
 174:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 175:Src/main.c    **** 
 176:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 177:Src/main.c    **** 
 178:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 179:Src/main.c    ****     */
 180:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 181:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 182:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 183:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 184:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 185:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 186:Src/main.c    ****   {
 187:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 188:Src/main.c    ****   }
 189:Src/main.c    **** 
 190:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 191:Src/main.c    ****     */
 192:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 193:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 194:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 195:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 196:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 197:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 198:Src/main.c    **** 
 199:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 200:Src/main.c    ****   {
 201:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 202:Src/main.c    ****   }
 203:Src/main.c    **** 
ARM GAS  /tmp/ccYjNPIU.s 			page 5


 204:Src/main.c    ****     /**Configure the Systick interrupt time 
 205:Src/main.c    ****     */
 206:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 207:Src/main.c    **** 
 208:Src/main.c    ****     /**Configure the Systick 
 209:Src/main.c    ****     */
 210:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 211:Src/main.c    **** 
 212:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 213:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 214:Src/main.c    **** }
 215:Src/main.c    **** 
 216:Src/main.c    **** /* IWDG init function */
 217:Src/main.c    **** static void MX_IWDG_Init(void)
 218:Src/main.c    **** {
 219:Src/main.c    **** 
 220:Src/main.c    ****   hiwdg.Instance = IWDG;
 221:Src/main.c    ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 222:Src/main.c    ****   hiwdg.Init.Reload = 4095;
 223:Src/main.c    ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 224:Src/main.c    ****   {
 225:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 226:Src/main.c    ****   }
 227:Src/main.c    **** 
 228:Src/main.c    **** }
 229:Src/main.c    **** 
 230:Src/main.c    **** /* TIM5 init function */
 231:Src/main.c    **** static void MX_TIM5_Init(void)
 232:Src/main.c    **** {
 233:Src/main.c    **** 
 234:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig;
 235:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 236:Src/main.c    ****   TIM_IC_InitTypeDef sConfigIC;
 237:Src/main.c    **** 
 238:Src/main.c    ****   htim5.Instance = TIM5;
 239:Src/main.c    ****   htim5.Init.Prescaler = 0;
 240:Src/main.c    ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 241:Src/main.c    ****   htim5.Init.Period = 0xFFFF;
 242:Src/main.c    ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 243:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 244:Src/main.c    ****   {
 245:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 246:Src/main.c    ****   }
 247:Src/main.c    **** 
 248:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 249:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 250:Src/main.c    ****   {
 251:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 252:Src/main.c    ****   }
 253:Src/main.c    **** 
 254:Src/main.c    ****   if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 255:Src/main.c    ****   {
 256:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 257:Src/main.c    ****   }
 258:Src/main.c    **** 
 259:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 260:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
ARM GAS  /tmp/ccYjNPIU.s 			page 6


 261:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 262:Src/main.c    ****   {
 263:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 264:Src/main.c    ****   }
 265:Src/main.c    **** 
 266:Src/main.c    ****   sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 267:Src/main.c    ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 268:Src/main.c    ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 269:Src/main.c    ****   sConfigIC.ICFilter = 0;
 270:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 271:Src/main.c    ****   {
 272:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 273:Src/main.c    ****   }
 274:Src/main.c    **** 
 275:Src/main.c    ****   if (HAL_TIMEx_RemapConfig(&htim5, TIM_TIM5_LSI) != HAL_OK)
 276:Src/main.c    ****   {
 277:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 278:Src/main.c    ****   }
 279:Src/main.c    **** 
 280:Src/main.c    **** }
 281:Src/main.c    **** 
 282:Src/main.c    **** /** Configure pins as 
 283:Src/main.c    ****         * Analog 
 284:Src/main.c    ****         * Input 
 285:Src/main.c    ****         * Output
 286:Src/main.c    ****         * EVENT_OUT
 287:Src/main.c    ****         * EXTI
 288:Src/main.c    **** */
 289:Src/main.c    **** static void MX_GPIO_Init(void)
 290:Src/main.c    **** {
  27              		.loc 1 290 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 32
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  38 0002 88B0     		sub	sp, sp, #32
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 48
  41              	.LBB2:
 291:Src/main.c    **** 
 292:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 293:Src/main.c    **** 
 294:Src/main.c    ****   /* GPIO Ports Clock Enable */
 295:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  42              		.loc 1 295 0
  43 0004 0024     		movs	r4, #0
  44 0006 0194     		str	r4, [sp, #4]
  45 0008 1A4B     		ldr	r3, .L3
  46 000a 1A6B     		ldr	r2, [r3, #48]
  47 000c 42F02002 		orr	r2, r2, #32
  48 0010 1A63     		str	r2, [r3, #48]
ARM GAS  /tmp/ccYjNPIU.s 			page 7


  49 0012 1A6B     		ldr	r2, [r3, #48]
  50 0014 02F02002 		and	r2, r2, #32
  51 0018 0192     		str	r2, [sp, #4]
  52 001a 019A     		ldr	r2, [sp, #4]
  53              	.LBE2:
  54              	.LBB3:
 296:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  55              		.loc 1 296 0
  56 001c 0294     		str	r4, [sp, #8]
  57 001e 1A6B     		ldr	r2, [r3, #48]
  58 0020 42F00102 		orr	r2, r2, #1
  59 0024 1A63     		str	r2, [r3, #48]
  60 0026 1B6B     		ldr	r3, [r3, #48]
  61 0028 03F00103 		and	r3, r3, #1
  62 002c 0293     		str	r3, [sp, #8]
  63 002e 029B     		ldr	r3, [sp, #8]
  64              	.LBE3:
 297:Src/main.c    **** 
 298:Src/main.c    ****   /*Configure GPIO pin Output Level */
 299:Src/main.c    ****   HAL_GPIO_WritePin(GPIOF, LED_Green_Pin|LED_Blue_Pin|LED_Yellow_Pin|LED_Red_Pin, GPIO_PIN_RESET);
  65              		.loc 1 299 0
  66 0030 114E     		ldr	r6, .L3+4
  67 0032 2246     		mov	r2, r4
  68 0034 3C21     		movs	r1, #60
  69 0036 3046     		mov	r0, r6
  70 0038 FFF7FEFF 		bl	HAL_GPIO_WritePin
  71              	.LVL0:
 300:Src/main.c    **** 
 301:Src/main.c    ****   /*Configure GPIO pins : LED_Green_Pin LED_Blue_Pin LED_Yellow_Pin LED_Red_Pin */
 302:Src/main.c    ****   GPIO_InitStruct.Pin = LED_Green_Pin|LED_Blue_Pin|LED_Yellow_Pin|LED_Red_Pin;
  72              		.loc 1 302 0
  73 003c 3C23     		movs	r3, #60
  74 003e 0393     		str	r3, [sp, #12]
 303:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  75              		.loc 1 303 0
  76 0040 0125     		movs	r5, #1
  77 0042 0495     		str	r5, [sp, #16]
 304:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  78              		.loc 1 304 0
  79 0044 0594     		str	r4, [sp, #20]
 305:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  80              		.loc 1 305 0
  81 0046 0694     		str	r4, [sp, #24]
 306:Src/main.c    ****   HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
  82              		.loc 1 306 0
  83 0048 03A9     		add	r1, sp, #12
  84 004a 3046     		mov	r0, r6
  85 004c FFF7FEFF 		bl	HAL_GPIO_Init
  86              	.LVL1:
 307:Src/main.c    **** 
 308:Src/main.c    ****   /*Configure GPIO pin : WKUP_BUTTON_Pin */
 309:Src/main.c    ****   GPIO_InitStruct.Pin = WKUP_BUTTON_Pin;
  87              		.loc 1 309 0
  88 0050 0395     		str	r5, [sp, #12]
 310:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  89              		.loc 1 310 0
  90 0052 0A4B     		ldr	r3, .L3+8
ARM GAS  /tmp/ccYjNPIU.s 			page 8


  91 0054 0493     		str	r3, [sp, #16]
 311:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  92              		.loc 1 311 0
  93 0056 0594     		str	r4, [sp, #20]
 312:Src/main.c    ****   HAL_GPIO_Init(WKUP_BUTTON_GPIO_Port, &GPIO_InitStruct);
  94              		.loc 1 312 0
  95 0058 03A9     		add	r1, sp, #12
  96 005a 0948     		ldr	r0, .L3+12
  97 005c FFF7FEFF 		bl	HAL_GPIO_Init
  98              	.LVL2:
 313:Src/main.c    **** 
 314:Src/main.c    ****   /* EXTI interrupt init*/
 315:Src/main.c    ****   HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
  99              		.loc 1 315 0
 100 0060 2246     		mov	r2, r4
 101 0062 2146     		mov	r1, r4
 102 0064 0620     		movs	r0, #6
 103 0066 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 104              	.LVL3:
 316:Src/main.c    ****   HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 105              		.loc 1 316 0
 106 006a 0620     		movs	r0, #6
 107 006c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 108              	.LVL4:
 317:Src/main.c    **** 
 318:Src/main.c    **** }
 109              		.loc 1 318 0
 110 0070 08B0     		add	sp, sp, #32
 111              	.LCFI2:
 112              		.cfi_def_cfa_offset 16
 113              		@ sp needed
 114 0072 70BD     		pop	{r4, r5, r6, pc}
 115              	.L4:
 116              		.align	2
 117              	.L3:
 118 0074 00380240 		.word	1073887232
 119 0078 00140240 		.word	1073878016
 120 007c 00001110 		.word	269549568
 121 0080 00000240 		.word	1073872896
 122              		.cfi_endproc
 123              	.LFE127:
 125              		.section	.text._Error_Handler,"ax",%progbits
 126              		.align	1
 127              		.global	_Error_Handler
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv4-sp-d16
 133              	_Error_Handler:
 134              	.LFB129:
 319:Src/main.c    **** 
 320:Src/main.c    **** /* USER CODE BEGIN 4 */
 321:Src/main.c    **** /**
 322:Src/main.c    ****   * @brief  Configures TIM5 to measure the LSI oscillator frequency.
 323:Src/main.c    ****   * @param  None
 324:Src/main.c    ****   * @retval LSI Frequency
 325:Src/main.c    ****   */
ARM GAS  /tmp/ccYjNPIU.s 			page 9


 326:Src/main.c    **** static uint32_t GetLSIFrequency(void)
 327:Src/main.c    **** {
 328:Src/main.c    ****   uint32_t pclk1 = 0;
 329:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig;
 330:Src/main.c    ****   TIM_IC_InitTypeDef sConfigIC;
 331:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 332:Src/main.c    ****   
 333:Src/main.c    **** 
 334:Src/main.c    ****   /* Enable the LSI oscillator */
 335:Src/main.c    ****   __HAL_RCC_LSI_ENABLE();
 336:Src/main.c    **** 
 337:Src/main.c    ****   /* Wait till LSI is ready */
 338:Src/main.c    ****   while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 339:Src/main.c    ****   {
 340:Src/main.c    ****   }
 341:Src/main.c    **** 
 342:Src/main.c    ****   /* Configure the TIM peripheral */
 343:Src/main.c    ****   /* Set TIMx instance */
 344:Src/main.c    ****   htim5.Instance = TIM5;
 345:Src/main.c    **** 
 346:Src/main.c    ****   /* TIM5 configuration: Input capture mode ---------------------------
 347:Src/main.c    ****   The LSI oscillator is connected to TIM5 CH4.
 348:Src/main.c    ****   The Rising edge is used as active edge.
 349:Src/main.c    ****   The TIM5 CCR4 is used to compute the frequency value.
 350:Src/main.c    ****   -------------------------------------------------------------------*/
 351:Src/main.c    ****   htim5.Init.Prescaler         = 0;
 352:Src/main.c    ****   htim5.Init.CounterMode       = TIM_COUNTERMODE_UP;
 353:Src/main.c    ****   htim5.Init.Period            = 0xFFFF;
 354:Src/main.c    ****   htim5.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 355:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 356:Src/main.c    ****   {
 357:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 358:Src/main.c    ****   }
 359:Src/main.c    **** 
 360:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 361:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 362:Src/main.c    ****   {
 363:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 364:Src/main.c    ****   }
 365:Src/main.c    **** 
 366:Src/main.c    ****   if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 367:Src/main.c    ****   {
 368:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 369:Src/main.c    ****   }
 370:Src/main.c    **** 
 371:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 372:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 373:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 374:Src/main.c    ****   {
 375:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 376:Src/main.c    ****   }
 377:Src/main.c    **** 
 378:Src/main.c    ****   /* Configure the Input Capture of channel 4 */
 379:Src/main.c    ****   sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 380:Src/main.c    ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 381:Src/main.c    ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 382:Src/main.c    ****   sConfigIC.ICFilter = 0;
ARM GAS  /tmp/ccYjNPIU.s 			page 10


 383:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 384:Src/main.c    ****   {
 385:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 386:Src/main.c    ****   }
 387:Src/main.c    **** 
 388:Src/main.c    ****   /* Connect internally the TIM5_CH4 Input Capture to the LSI clock output */
 389:Src/main.c    ****   if (HAL_TIMEx_RemapConfig(&htim5, TIM_TIM5_LSI) != HAL_OK)
 390:Src/main.c    ****   {
 391:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 392:Src/main.c    ****   }
 393:Src/main.c    **** 
 394:Src/main.c    ****   /* Reset the flags */
 395:Src/main.c    ****   htim5.Instance->SR = 0;
 396:Src/main.c    **** 
 397:Src/main.c    ****   /* Start the TIM Input Capture Measurement in interrupt mode */
 398:Src/main.c    ****   if(HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4) != HAL_OK)
 399:Src/main.c    ****   {
 400:Src/main.c    ****     _Error_Handler(__FILE__,__LINE__);
 401:Src/main.c    ****   }
 402:Src/main.c    **** 
 403:Src/main.c    ****   /* Wait until the TIM5 get 2 LSI edges (refer to TIM5_IRQHandler()
 404:Src/main.c    ****      in stm32f4xx_it.c file) */
 405:Src/main.c    ****   while(uwMeasurementDone == 0)
 406:Src/main.c    ****   {
 407:Src/main.c    ****   }
 408:Src/main.c    ****   uwCaptureNumber = 0;
 409:Src/main.c    **** 
 410:Src/main.c    ****   /* Deinitialize the TIM5 peripheral registers to their default reset
 411:Src/main.c    ****      values */
 412:Src/main.c    ****   HAL_TIM_IC_DeInit(&htim5);
 413:Src/main.c    **** 
 414:Src/main.c    ****   /* Compute the LSI frequency, depending on TIM5 input clock
 415:Src/main.c    ****      frequency (PCLK1) */
 416:Src/main.c    ****   pclk1 = HAL_RCC_GetPCLK1Freq();
 417:Src/main.c    ****   return (pclk1 / uwPeriodValue);
 418:Src/main.c    **** 
 419:Src/main.c    **** }
 420:Src/main.c    **** 
 421:Src/main.c    **** 
 422:Src/main.c    **** /* USER CODE END 4 */
 423:Src/main.c    **** 
 424:Src/main.c    **** /**
 425:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 426:Src/main.c    ****   * @param  None
 427:Src/main.c    ****   * @retval None
 428:Src/main.c    ****   */
 429:Src/main.c    **** void _Error_Handler(char * file, int line)
 430:Src/main.c    **** {
 135              		.loc 1 430 0
 136              		.cfi_startproc
 137              		@ Volatile: function does not return.
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140              	.LVL5:
 141 0000 08B5     		push	{r3, lr}
 142              	.LCFI3:
 143              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccYjNPIU.s 			page 11


 144              		.cfi_offset 3, -8
 145              		.cfi_offset 14, -4
 431:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 432:Src/main.c    ****   HAL_GPIO_WritePin(LED_Yellow_GPIO_Port, LED_Yellow_Pin, GPIO_PIN_SET);
 146              		.loc 1 432 0
 147 0002 0122     		movs	r2, #1
 148 0004 1021     		movs	r1, #16
 149              	.LVL6:
 150 0006 0248     		ldr	r0, .L8
 151              	.LVL7:
 152 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 153              	.LVL8:
 154              	.L6:
 155 000c FEE7     		b	.L6
 156              	.L9:
 157 000e 00BF     		.align	2
 158              	.L8:
 159 0010 00140240 		.word	1073878016
 160              		.cfi_endproc
 161              	.LFE129:
 163              		.section	.text.MX_IWDG_Init,"ax",%progbits
 164              		.align	1
 165              		.syntax unified
 166              		.thumb
 167              		.thumb_func
 168              		.fpu fpv4-sp-d16
 170              	MX_IWDG_Init:
 171              	.LFB125:
 218:Src/main.c    **** 
 172              		.loc 1 218 0
 173              		.cfi_startproc
 174              		@ args = 0, pretend = 0, frame = 0
 175              		@ frame_needed = 0, uses_anonymous_args = 0
 176 0000 08B5     		push	{r3, lr}
 177              	.LCFI4:
 178              		.cfi_def_cfa_offset 8
 179              		.cfi_offset 3, -8
 180              		.cfi_offset 14, -4
 220:Src/main.c    ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 181              		.loc 1 220 0
 182 0002 0848     		ldr	r0, .L14
 183 0004 084B     		ldr	r3, .L14+4
 184 0006 0360     		str	r3, [r0]
 221:Src/main.c    ****   hiwdg.Init.Reload = 4095;
 185              		.loc 1 221 0
 186 0008 0023     		movs	r3, #0
 187 000a 4360     		str	r3, [r0, #4]
 222:Src/main.c    ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 188              		.loc 1 222 0
 189 000c 40F6FF73 		movw	r3, #4095
 190 0010 8360     		str	r3, [r0, #8]
 223:Src/main.c    ****   {
 191              		.loc 1 223 0
 192 0012 FFF7FEFF 		bl	HAL_IWDG_Init
 193              	.LVL9:
 194 0016 00B9     		cbnz	r0, .L13
 195 0018 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccYjNPIU.s 			page 12


 196              	.L13:
 225:Src/main.c    ****   }
 197              		.loc 1 225 0
 198 001a E121     		movs	r1, #225
 199 001c 0348     		ldr	r0, .L14+8
 200 001e FFF7FEFF 		bl	_Error_Handler
 201              	.LVL10:
 202              	.L15:
 203 0022 00BF     		.align	2
 204              	.L14:
 205 0024 00000000 		.word	hiwdg
 206 0028 00300040 		.word	1073754112
 207 002c 00000000 		.word	.LC0
 208              		.cfi_endproc
 209              	.LFE125:
 211              		.section	.text.MX_TIM5_Init,"ax",%progbits
 212              		.align	1
 213              		.syntax unified
 214              		.thumb
 215              		.thumb_func
 216              		.fpu fpv4-sp-d16
 218              	MX_TIM5_Init:
 219              	.LFB126:
 232:Src/main.c    **** 
 220              		.loc 1 232 0
 221              		.cfi_startproc
 222              		@ args = 0, pretend = 0, frame = 40
 223              		@ frame_needed = 0, uses_anonymous_args = 0
 224 0000 00B5     		push	{lr}
 225              	.LCFI5:
 226              		.cfi_def_cfa_offset 4
 227              		.cfi_offset 14, -4
 228 0002 8BB0     		sub	sp, sp, #44
 229              	.LCFI6:
 230              		.cfi_def_cfa_offset 48
 238:Src/main.c    ****   htim5.Init.Prescaler = 0;
 231              		.loc 1 238 0
 232 0004 2848     		ldr	r0, .L30
 233 0006 294B     		ldr	r3, .L30+4
 234 0008 0360     		str	r3, [r0]
 239:Src/main.c    ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 235              		.loc 1 239 0
 236 000a 0023     		movs	r3, #0
 237 000c 4360     		str	r3, [r0, #4]
 240:Src/main.c    ****   htim5.Init.Period = 0xFFFF;
 238              		.loc 1 240 0
 239 000e 8360     		str	r3, [r0, #8]
 241:Src/main.c    ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 240              		.loc 1 241 0
 241 0010 4FF6FF72 		movw	r2, #65535
 242 0014 C260     		str	r2, [r0, #12]
 242:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 243              		.loc 1 242 0
 244 0016 0361     		str	r3, [r0, #16]
 243:Src/main.c    ****   {
 245              		.loc 1 243 0
 246 0018 FFF7FEFF 		bl	HAL_TIM_Base_Init
ARM GAS  /tmp/ccYjNPIU.s 			page 13


 247              	.LVL11:
 248 001c 40BB     		cbnz	r0, .L24
 248:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 249              		.loc 1 248 0
 250 001e 0AA9     		add	r1, sp, #40
 251 0020 4FF48053 		mov	r3, #4096
 252 0024 41F8103D 		str	r3, [r1, #-16]!
 249:Src/main.c    ****   {
 253              		.loc 1 249 0
 254 0028 1F48     		ldr	r0, .L30
 255 002a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 256              	.LVL12:
 257 002e 18BB     		cbnz	r0, .L25
 254:Src/main.c    ****   {
 258              		.loc 1 254 0
 259 0030 1D48     		ldr	r0, .L30
 260 0032 FFF7FEFF 		bl	HAL_TIM_IC_Init
 261              	.LVL13:
 262 0036 18BB     		cbnz	r0, .L26
 259:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 263              		.loc 1 259 0
 264 0038 0023     		movs	r3, #0
 265 003a 0493     		str	r3, [sp, #16]
 260:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 266              		.loc 1 260 0
 267 003c 0593     		str	r3, [sp, #20]
 261:Src/main.c    ****   {
 268              		.loc 1 261 0
 269 003e 04A9     		add	r1, sp, #16
 270 0040 1948     		ldr	r0, .L30
 271 0042 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 272              	.LVL14:
 273 0046 00BB     		cbnz	r0, .L27
 266:Src/main.c    ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 274              		.loc 1 266 0
 275 0048 0023     		movs	r3, #0
 276 004a 0093     		str	r3, [sp]
 267:Src/main.c    ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 277              		.loc 1 267 0
 278 004c 0122     		movs	r2, #1
 279 004e 0192     		str	r2, [sp, #4]
 268:Src/main.c    ****   sConfigIC.ICFilter = 0;
 280              		.loc 1 268 0
 281 0050 0293     		str	r3, [sp, #8]
 269:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 282              		.loc 1 269 0
 283 0052 0393     		str	r3, [sp, #12]
 270:Src/main.c    ****   {
 284              		.loc 1 270 0
 285 0054 0C22     		movs	r2, #12
 286 0056 6946     		mov	r1, sp
 287 0058 1348     		ldr	r0, .L30
 288 005a FFF7FEFF 		bl	HAL_TIM_IC_ConfigChannel
 289              	.LVL15:
 290 005e C8B9     		cbnz	r0, .L28
 275:Src/main.c    ****   {
 291              		.loc 1 275 0
ARM GAS  /tmp/ccYjNPIU.s 			page 14


 292 0060 4021     		movs	r1, #64
 293 0062 1148     		ldr	r0, .L30
 294 0064 FFF7FEFF 		bl	HAL_TIMEx_RemapConfig
 295              	.LVL16:
 296 0068 C8B9     		cbnz	r0, .L29
 280:Src/main.c    **** 
 297              		.loc 1 280 0
 298 006a 0BB0     		add	sp, sp, #44
 299              	.LCFI7:
 300              		.cfi_remember_state
 301              		.cfi_def_cfa_offset 4
 302              		@ sp needed
 303 006c 5DF804FB 		ldr	pc, [sp], #4
 304              	.L24:
 305              	.LCFI8:
 306              		.cfi_restore_state
 245:Src/main.c    ****   }
 307              		.loc 1 245 0
 308 0070 F521     		movs	r1, #245
 309 0072 0F48     		ldr	r0, .L30+8
 310 0074 FFF7FEFF 		bl	_Error_Handler
 311              	.LVL17:
 312              	.L25:
 251:Src/main.c    ****   }
 313              		.loc 1 251 0
 314 0078 FB21     		movs	r1, #251
 315 007a 0D48     		ldr	r0, .L30+8
 316 007c FFF7FEFF 		bl	_Error_Handler
 317              	.LVL18:
 318              	.L26:
 256:Src/main.c    ****   }
 319              		.loc 1 256 0
 320 0080 4FF48071 		mov	r1, #256
 321 0084 0A48     		ldr	r0, .L30+8
 322 0086 FFF7FEFF 		bl	_Error_Handler
 323              	.LVL19:
 324              	.L27:
 263:Src/main.c    ****   }
 325              		.loc 1 263 0
 326 008a 40F20711 		movw	r1, #263
 327 008e 0848     		ldr	r0, .L30+8
 328 0090 FFF7FEFF 		bl	_Error_Handler
 329              	.LVL20:
 330              	.L28:
 272:Src/main.c    ****   }
 331              		.loc 1 272 0
 332 0094 4FF48871 		mov	r1, #272
 333 0098 0548     		ldr	r0, .L30+8
 334 009a FFF7FEFF 		bl	_Error_Handler
 335              	.LVL21:
 336              	.L29:
 277:Src/main.c    ****   }
 337              		.loc 1 277 0
 338 009e 40F21511 		movw	r1, #277
 339 00a2 0348     		ldr	r0, .L30+8
 340 00a4 FFF7FEFF 		bl	_Error_Handler
 341              	.LVL22:
ARM GAS  /tmp/ccYjNPIU.s 			page 15


 342              	.L31:
 343              		.align	2
 344              	.L30:
 345 00a8 00000000 		.word	htim5
 346 00ac 000C0040 		.word	1073744896
 347 00b0 00000000 		.word	.LC0
 348              		.cfi_endproc
 349              	.LFE126:
 351              		.section	.text.GetLSIFrequency,"ax",%progbits
 352              		.align	1
 353              		.syntax unified
 354              		.thumb
 355              		.thumb_func
 356              		.fpu fpv4-sp-d16
 358              	GetLSIFrequency:
 359              	.LFB128:
 327:Src/main.c    ****   uint32_t pclk1 = 0;
 360              		.loc 1 327 0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 40
 363              		@ frame_needed = 0, uses_anonymous_args = 0
 364 0000 00B5     		push	{lr}
 365              	.LCFI9:
 366              		.cfi_def_cfa_offset 4
 367              		.cfi_offset 14, -4
 368 0002 8BB0     		sub	sp, sp, #44
 369              	.LCFI10:
 370              		.cfi_def_cfa_offset 48
 371              	.LVL23:
 335:Src/main.c    **** 
 372              		.loc 1 335 0
 373 0004 0122     		movs	r2, #1
 374 0006 3F4B     		ldr	r3, .L49
 375 0008 1A60     		str	r2, [r3]
 376              	.L33:
 338:Src/main.c    ****   {
 377              		.loc 1 338 0 discriminator 1
 378 000a 3F4B     		ldr	r3, .L49+4
 379 000c 5B6F     		ldr	r3, [r3, #116]
 380 000e 13F0020F 		tst	r3, #2
 381 0012 FAD0     		beq	.L33
 344:Src/main.c    **** 
 382              		.loc 1 344 0
 383 0014 3D48     		ldr	r0, .L49+8
 384 0016 3E4B     		ldr	r3, .L49+12
 385 0018 0360     		str	r3, [r0]
 351:Src/main.c    ****   htim5.Init.CounterMode       = TIM_COUNTERMODE_UP;
 386              		.loc 1 351 0
 387 001a 0023     		movs	r3, #0
 388 001c 4360     		str	r3, [r0, #4]
 352:Src/main.c    ****   htim5.Init.Period            = 0xFFFF;
 389              		.loc 1 352 0
 390 001e 8360     		str	r3, [r0, #8]
 353:Src/main.c    ****   htim5.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 391              		.loc 1 353 0
 392 0020 4FF6FF72 		movw	r2, #65535
 393 0024 C260     		str	r2, [r0, #12]
ARM GAS  /tmp/ccYjNPIU.s 			page 16


 354:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 394              		.loc 1 354 0
 395 0026 0361     		str	r3, [r0, #16]
 355:Src/main.c    ****   {
 396              		.loc 1 355 0
 397 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 398              	.LVL24:
 399 002c 0028     		cmp	r0, #0
 400 002e 46D1     		bne	.L42
 360:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 401              		.loc 1 360 0
 402 0030 0AA9     		add	r1, sp, #40
 403 0032 4FF48053 		mov	r3, #4096
 404 0036 41F8103D 		str	r3, [r1, #-16]!
 361:Src/main.c    ****   {
 405              		.loc 1 361 0
 406 003a 3448     		ldr	r0, .L49+8
 407 003c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 408              	.LVL25:
 409 0040 0028     		cmp	r0, #0
 410 0042 41D1     		bne	.L43
 366:Src/main.c    ****   {
 411              		.loc 1 366 0
 412 0044 3148     		ldr	r0, .L49+8
 413 0046 FFF7FEFF 		bl	HAL_TIM_IC_Init
 414              	.LVL26:
 415 004a 0028     		cmp	r0, #0
 416 004c 41D1     		bne	.L44
 371:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 417              		.loc 1 371 0
 418 004e 0023     		movs	r3, #0
 419 0050 0093     		str	r3, [sp]
 372:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 420              		.loc 1 372 0
 421 0052 0193     		str	r3, [sp, #4]
 373:Src/main.c    ****   {
 422              		.loc 1 373 0
 423 0054 6946     		mov	r1, sp
 424 0056 2D48     		ldr	r0, .L49+8
 425 0058 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 426              	.LVL27:
 427 005c 0028     		cmp	r0, #0
 428 005e 3DD1     		bne	.L45
 379:Src/main.c    ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 429              		.loc 1 379 0
 430 0060 0023     		movs	r3, #0
 431 0062 0293     		str	r3, [sp, #8]
 380:Src/main.c    ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 432              		.loc 1 380 0
 433 0064 0122     		movs	r2, #1
 434 0066 0392     		str	r2, [sp, #12]
 381:Src/main.c    ****   sConfigIC.ICFilter = 0;
 435              		.loc 1 381 0
 436 0068 0493     		str	r3, [sp, #16]
 382:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 437              		.loc 1 382 0
 438 006a 0593     		str	r3, [sp, #20]
ARM GAS  /tmp/ccYjNPIU.s 			page 17


 383:Src/main.c    ****   {
 439              		.loc 1 383 0
 440 006c 0C22     		movs	r2, #12
 441 006e 02A9     		add	r1, sp, #8
 442 0070 2648     		ldr	r0, .L49+8
 443 0072 FFF7FEFF 		bl	HAL_TIM_IC_ConfigChannel
 444              	.LVL28:
 445 0076 0028     		cmp	r0, #0
 446 0078 35D1     		bne	.L46
 389:Src/main.c    ****   {
 447              		.loc 1 389 0
 448 007a 4021     		movs	r1, #64
 449 007c 2348     		ldr	r0, .L49+8
 450 007e FFF7FEFF 		bl	HAL_TIMEx_RemapConfig
 451              	.LVL29:
 452 0082 0028     		cmp	r0, #0
 453 0084 34D1     		bne	.L47
 395:Src/main.c    **** 
 454              		.loc 1 395 0
 455 0086 2148     		ldr	r0, .L49+8
 456 0088 0368     		ldr	r3, [r0]
 457 008a 0022     		movs	r2, #0
 458 008c 1A61     		str	r2, [r3, #16]
 398:Src/main.c    ****   {
 459              		.loc 1 398 0
 460 008e 0C21     		movs	r1, #12
 461 0090 FFF7FEFF 		bl	HAL_TIM_IC_Start_IT
 462              	.LVL30:
 463 0094 0028     		cmp	r0, #0
 464 0096 30D1     		bne	.L48
 465              	.L40:
 405:Src/main.c    ****   {
 466              		.loc 1 405 0 discriminator 1
 467 0098 1E4B     		ldr	r3, .L49+16
 468 009a 1B68     		ldr	r3, [r3]
 469 009c 002B     		cmp	r3, #0
 470 009e FBD0     		beq	.L40
 408:Src/main.c    **** 
 471              		.loc 1 408 0
 472 00a0 0022     		movs	r2, #0
 473 00a2 1D4B     		ldr	r3, .L49+20
 474 00a4 1A60     		str	r2, [r3]
 412:Src/main.c    **** 
 475              		.loc 1 412 0
 476 00a6 1948     		ldr	r0, .L49+8
 477 00a8 FFF7FEFF 		bl	HAL_TIM_IC_DeInit
 478              	.LVL31:
 416:Src/main.c    ****   return (pclk1 / uwPeriodValue);
 479              		.loc 1 416 0
 480 00ac FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 481              	.LVL32:
 417:Src/main.c    **** 
 482              		.loc 1 417 0
 483 00b0 1A4B     		ldr	r3, .L49+24
 484 00b2 1B68     		ldr	r3, [r3]
 419:Src/main.c    **** 
 485              		.loc 1 419 0
ARM GAS  /tmp/ccYjNPIU.s 			page 18


 486 00b4 B0FBF3F0 		udiv	r0, r0, r3
 487              	.LVL33:
 488 00b8 0BB0     		add	sp, sp, #44
 489              	.LCFI11:
 490              		.cfi_remember_state
 491              		.cfi_def_cfa_offset 4
 492              		@ sp needed
 493 00ba 5DF804FB 		ldr	pc, [sp], #4
 494              	.LVL34:
 495              	.L42:
 496              	.LCFI12:
 497              		.cfi_restore_state
 357:Src/main.c    ****   }
 498              		.loc 1 357 0
 499 00be 40F26511 		movw	r1, #357
 500 00c2 1748     		ldr	r0, .L49+28
 501 00c4 FFF7FEFF 		bl	_Error_Handler
 502              	.LVL35:
 503              	.L43:
 363:Src/main.c    ****   }
 504              		.loc 1 363 0
 505 00c8 40F26B11 		movw	r1, #363
 506 00cc 1448     		ldr	r0, .L49+28
 507 00ce FFF7FEFF 		bl	_Error_Handler
 508              	.LVL36:
 509              	.L44:
 368:Src/main.c    ****   }
 510              		.loc 1 368 0
 511 00d2 4FF4B871 		mov	r1, #368
 512 00d6 1248     		ldr	r0, .L49+28
 513 00d8 FFF7FEFF 		bl	_Error_Handler
 514              	.LVL37:
 515              	.L45:
 375:Src/main.c    ****   }
 516              		.loc 1 375 0
 517 00dc 40F27711 		movw	r1, #375
 518 00e0 0F48     		ldr	r0, .L49+28
 519 00e2 FFF7FEFF 		bl	_Error_Handler
 520              	.LVL38:
 521              	.L46:
 385:Src/main.c    ****   }
 522              		.loc 1 385 0
 523 00e6 40F28111 		movw	r1, #385
 524 00ea 0D48     		ldr	r0, .L49+28
 525 00ec FFF7FEFF 		bl	_Error_Handler
 526              	.LVL39:
 527              	.L47:
 391:Src/main.c    ****   }
 528              		.loc 1 391 0
 529 00f0 40F28711 		movw	r1, #391
 530 00f4 0A48     		ldr	r0, .L49+28
 531 00f6 FFF7FEFF 		bl	_Error_Handler
 532              	.LVL40:
 533              	.L48:
 400:Src/main.c    ****   }
 534              		.loc 1 400 0
 535 00fa 4FF4C871 		mov	r1, #400
ARM GAS  /tmp/ccYjNPIU.s 			page 19


 536 00fe 0848     		ldr	r0, .L49+28
 537 0100 FFF7FEFF 		bl	_Error_Handler
 538              	.LVL41:
 539              	.L50:
 540              		.align	2
 541              	.L49:
 542 0104 800E4742 		.word	1111953024
 543 0108 00380240 		.word	1073887232
 544 010c 00000000 		.word	htim5
 545 0110 000C0040 		.word	1073744896
 546 0114 00000000 		.word	.LANCHOR0
 547 0118 00000000 		.word	.LANCHOR1
 548 011c 00000000 		.word	.LANCHOR2
 549 0120 00000000 		.word	.LC0
 550              		.cfi_endproc
 551              	.LFE128:
 553              		.section	.text.SystemClock_Config,"ax",%progbits
 554              		.align	1
 555              		.global	SystemClock_Config
 556              		.syntax unified
 557              		.thumb
 558              		.thumb_func
 559              		.fpu fpv4-sp-d16
 561              	SystemClock_Config:
 562              	.LFB124:
 167:Src/main.c    **** 
 563              		.loc 1 167 0
 564              		.cfi_startproc
 565              		@ args = 0, pretend = 0, frame = 80
 566              		@ frame_needed = 0, uses_anonymous_args = 0
 567 0000 00B5     		push	{lr}
 568              	.LCFI13:
 569              		.cfi_def_cfa_offset 4
 570              		.cfi_offset 14, -4
 571 0002 95B0     		sub	sp, sp, #84
 572              	.LCFI14:
 573              		.cfi_def_cfa_offset 88
 574              	.LBB4:
 174:Src/main.c    **** 
 575              		.loc 1 174 0
 576 0004 0023     		movs	r3, #0
 577 0006 0193     		str	r3, [sp, #4]
 578 0008 234A     		ldr	r2, .L57
 579 000a 116C     		ldr	r1, [r2, #64]
 580 000c 41F08051 		orr	r1, r1, #268435456
 581 0010 1164     		str	r1, [r2, #64]
 582 0012 126C     		ldr	r2, [r2, #64]
 583 0014 02F08052 		and	r2, r2, #268435456
 584 0018 0192     		str	r2, [sp, #4]
 585 001a 019A     		ldr	r2, [sp, #4]
 586              	.LBE4:
 587              	.LBB5:
 176:Src/main.c    **** 
 588              		.loc 1 176 0
 589 001c 0293     		str	r3, [sp, #8]
 590 001e 1F4A     		ldr	r2, .L57+4
 591 0020 1168     		ldr	r1, [r2]
ARM GAS  /tmp/ccYjNPIU.s 			page 20


 592 0022 41F48041 		orr	r1, r1, #16384
 593 0026 1160     		str	r1, [r2]
 594 0028 1268     		ldr	r2, [r2]
 595 002a 02F48042 		and	r2, r2, #16384
 596 002e 0292     		str	r2, [sp, #8]
 597 0030 029A     		ldr	r2, [sp, #8]
 598              	.LBE5:
 180:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 599              		.loc 1 180 0
 600 0032 0A22     		movs	r2, #10
 601 0034 0892     		str	r2, [sp, #32]
 181:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 602              		.loc 1 181 0
 603 0036 0122     		movs	r2, #1
 604 0038 0B92     		str	r2, [sp, #44]
 182:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 605              		.loc 1 182 0
 606 003a 1021     		movs	r1, #16
 607 003c 0C91     		str	r1, [sp, #48]
 183:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 608              		.loc 1 183 0
 609 003e 0D92     		str	r2, [sp, #52]
 184:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 610              		.loc 1 184 0
 611 0040 0E93     		str	r3, [sp, #56]
 185:Src/main.c    ****   {
 612              		.loc 1 185 0
 613 0042 08A8     		add	r0, sp, #32
 614 0044 FFF7FEFF 		bl	HAL_RCC_OscConfig
 615              	.LVL42:
 616 0048 F0B9     		cbnz	r0, .L55
 192:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 617              		.loc 1 192 0
 618 004a 0F23     		movs	r3, #15
 619 004c 0393     		str	r3, [sp, #12]
 194:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 620              		.loc 1 194 0
 621 004e 0021     		movs	r1, #0
 622 0050 0491     		str	r1, [sp, #16]
 195:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 623              		.loc 1 195 0
 624 0052 0591     		str	r1, [sp, #20]
 196:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 625              		.loc 1 196 0
 626 0054 0691     		str	r1, [sp, #24]
 197:Src/main.c    **** 
 627              		.loc 1 197 0
 628 0056 0791     		str	r1, [sp, #28]
 199:Src/main.c    ****   {
 629              		.loc 1 199 0
 630 0058 03A8     		add	r0, sp, #12
 631 005a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 632              	.LVL43:
 633 005e B8B9     		cbnz	r0, .L56
 206:Src/main.c    **** 
 634              		.loc 1 206 0
 635 0060 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
ARM GAS  /tmp/ccYjNPIU.s 			page 21


 636              	.LVL44:
 637 0064 0E4B     		ldr	r3, .L57+8
 638 0066 A3FB0030 		umull	r3, r0, r3, r0
 639 006a 8009     		lsrs	r0, r0, #6
 640 006c FFF7FEFF 		bl	HAL_SYSTICK_Config
 641              	.LVL45:
 210:Src/main.c    **** 
 642              		.loc 1 210 0
 643 0070 0420     		movs	r0, #4
 644 0072 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 645              	.LVL46:
 213:Src/main.c    **** }
 646              		.loc 1 213 0
 647 0076 0022     		movs	r2, #0
 648 0078 1146     		mov	r1, r2
 649 007a 4FF0FF30 		mov	r0, #-1
 650 007e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 651              	.LVL47:
 214:Src/main.c    **** 
 652              		.loc 1 214 0
 653 0082 15B0     		add	sp, sp, #84
 654              	.LCFI15:
 655              		.cfi_remember_state
 656              		.cfi_def_cfa_offset 4
 657              		@ sp needed
 658 0084 5DF804FB 		ldr	pc, [sp], #4
 659              	.L55:
 660              	.LCFI16:
 661              		.cfi_restore_state
 187:Src/main.c    ****   }
 662              		.loc 1 187 0
 663 0088 BB21     		movs	r1, #187
 664 008a 0648     		ldr	r0, .L57+12
 665 008c FFF7FEFF 		bl	_Error_Handler
 666              	.LVL48:
 667              	.L56:
 201:Src/main.c    ****   }
 668              		.loc 1 201 0
 669 0090 C921     		movs	r1, #201
 670 0092 0448     		ldr	r0, .L57+12
 671 0094 FFF7FEFF 		bl	_Error_Handler
 672              	.LVL49:
 673              	.L58:
 674              		.align	2
 675              	.L57:
 676 0098 00380240 		.word	1073887232
 677 009c 00700040 		.word	1073770496
 678 00a0 D34D6210 		.word	274877907
 679 00a4 00000000 		.word	.LC0
 680              		.cfi_endproc
 681              	.LFE124:
 683              		.section	.text.main,"ax",%progbits
 684              		.align	1
 685              		.global	main
 686              		.syntax unified
 687              		.thumb
 688              		.thumb_func
ARM GAS  /tmp/ccYjNPIU.s 			page 22


 689              		.fpu fpv4-sp-d16
 691              	main:
 692              	.LFB123:
  76:Src/main.c    **** 
 693              		.loc 1 76 0
 694              		.cfi_startproc
 695              		@ Volatile: function does not return.
 696              		@ args = 0, pretend = 0, frame = 0
 697              		@ frame_needed = 0, uses_anonymous_args = 0
 698 0000 08B5     		push	{r3, lr}
 699              	.LCFI17:
 700              		.cfi_def_cfa_offset 8
 701              		.cfi_offset 3, -8
 702              		.cfi_offset 14, -4
  85:Src/main.c    **** 
 703              		.loc 1 85 0
 704 0002 FFF7FEFF 		bl	HAL_Init
 705              	.LVL50:
  92:Src/main.c    **** 
 706              		.loc 1 92 0
 707 0006 FFF7FEFF 		bl	SystemClock_Config
 708              	.LVL51:
  99:Src/main.c    ****   MX_IWDG_Init();
 709              		.loc 1 99 0
 710 000a FFF7FEFF 		bl	MX_GPIO_Init
 711              	.LVL52:
 100:Src/main.c    ****   MX_TIM5_Init();
 712              		.loc 1 100 0
 713 000e FFF7FEFF 		bl	MX_IWDG_Init
 714              	.LVL53:
 101:Src/main.c    **** 
 715              		.loc 1 101 0
 716 0012 FFF7FEFF 		bl	MX_TIM5_Init
 717              	.LVL54:
 106:Src/main.c    ****   {
 718              		.loc 1 106 0
 719 0016 1C4B     		ldr	r3, .L65
 720 0018 5B6F     		ldr	r3, [r3, #116]
 721 001a 13F0005F 		tst	r3, #536870912
 722 001e 28D0     		beq	.L60
 109:Src/main.c    **** 
 723              		.loc 1 109 0
 724 0020 0122     		movs	r2, #1
 725 0022 0821     		movs	r1, #8
 726 0024 1948     		ldr	r0, .L65+4
 727 0026 FFF7FEFF 		bl	HAL_GPIO_WritePin
 728              	.LVL55:
 112:Src/main.c    ****   }
 729              		.loc 1 112 0
 730 002a 174A     		ldr	r2, .L65
 731 002c 536F     		ldr	r3, [r2, #116]
 732 002e 43F08073 		orr	r3, r3, #16777216
 733 0032 5367     		str	r3, [r2, #116]
 734              	.L61:
 121:Src/main.c    **** 
 735              		.loc 1 121 0
 736 0034 FFF7FEFF 		bl	GetLSIFrequency
ARM GAS  /tmp/ccYjNPIU.s 			page 23


 737              	.LVL56:
 738 0038 154B     		ldr	r3, .L65+8
 739 003a 1860     		str	r0, [r3]
 129:Src/main.c    ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 740              		.loc 1 129 0
 741 003c 1548     		ldr	r0, .L65+12
 742 003e 164A     		ldr	r2, .L65+16
 743 0040 0260     		str	r2, [r0]
 130:Src/main.c    ****   hiwdg.Init.Reload = uwLsiFreq/128;
 744              		.loc 1 130 0
 745 0042 0322     		movs	r2, #3
 746 0044 4260     		str	r2, [r0, #4]
 131:Src/main.c    ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 747              		.loc 1 131 0
 748 0046 1B68     		ldr	r3, [r3]
 749 0048 DB09     		lsrs	r3, r3, #7
 750 004a 8360     		str	r3, [r0, #8]
 132:Src/main.c    ****   {
 751              		.loc 1 132 0
 752 004c FFF7FEFF 		bl	HAL_IWDG_Init
 753              	.LVL57:
 754 0050 A8B9     		cbnz	r0, .L64
 755              	.L62:
 144:Src/main.c    **** 
 756              		.loc 1 144 0
 757 0052 0421     		movs	r1, #4
 758 0054 0D48     		ldr	r0, .L65+4
 759 0056 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 760              	.LVL58:
 147:Src/main.c    **** 
 761              		.loc 1 147 0
 762 005a F020     		movs	r0, #240
 763 005c FFF7FEFF 		bl	HAL_Delay
 764              	.LVL59:
 150:Src/main.c    ****     {
 765              		.loc 1 150 0
 766 0060 0C48     		ldr	r0, .L65+12
 767 0062 FFF7FEFF 		bl	HAL_IWDG_Refresh
 768              	.LVL60:
 769 0066 0028     		cmp	r0, #0
 770 0068 F3D0     		beq	.L62
 152:Src/main.c    ****     }
 771              		.loc 1 152 0
 772 006a 9821     		movs	r1, #152
 773 006c 0B48     		ldr	r0, .L65+20
 774 006e FFF7FEFF 		bl	_Error_Handler
 775              	.LVL61:
 776              	.L60:
 117:Src/main.c    ****   }
 777              		.loc 1 117 0
 778 0072 0022     		movs	r2, #0
 779 0074 0821     		movs	r1, #8
 780 0076 0548     		ldr	r0, .L65+4
 781 0078 FFF7FEFF 		bl	HAL_GPIO_WritePin
 782              	.LVL62:
 783 007c DAE7     		b	.L61
 784              	.L64:
ARM GAS  /tmp/ccYjNPIU.s 			page 24


 134:Src/main.c    ****   }
 785              		.loc 1 134 0
 786 007e 8621     		movs	r1, #134
 787 0080 0648     		ldr	r0, .L65+20
 788 0082 FFF7FEFF 		bl	_Error_Handler
 789              	.LVL63:
 790              	.L66:
 791 0086 00BF     		.align	2
 792              	.L65:
 793 0088 00380240 		.word	1073887232
 794 008c 00140240 		.word	1073878016
 795 0090 00000000 		.word	.LANCHOR3
 796 0094 00000000 		.word	hiwdg
 797 0098 00300040 		.word	1073754112
 798 009c 00000000 		.word	.LC0
 799              		.cfi_endproc
 800              	.LFE123:
 802              		.section	.text.assert_failed,"ax",%progbits
 803              		.align	1
 804              		.global	assert_failed
 805              		.syntax unified
 806              		.thumb
 807              		.thumb_func
 808              		.fpu fpv4-sp-d16
 810              	assert_failed:
 811              	.LFB130:
 433:Src/main.c    ****   
 434:Src/main.c    ****     
 435:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 436:Src/main.c    ****   while(1) 
 437:Src/main.c    ****   {
 438:Src/main.c    ****   }
 439:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */ 
 440:Src/main.c    **** }
 441:Src/main.c    **** 
 442:Src/main.c    **** #ifdef USE_FULL_ASSERT
 443:Src/main.c    **** 
 444:Src/main.c    **** /**
 445:Src/main.c    ****    * @brief Reports the name of the source file and the source line number
 446:Src/main.c    ****    * where the assert_param error has occurred.
 447:Src/main.c    ****    * @param file: pointer to the source file name
 448:Src/main.c    ****    * @param line: assert_param error line source number
 449:Src/main.c    ****    * @retval None
 450:Src/main.c    ****    */
 451:Src/main.c    **** void assert_failed(uint8_t* file, uint32_t line)
 452:Src/main.c    **** {
 812              		.loc 1 452 0
 813              		.cfi_startproc
 814              		@ args = 0, pretend = 0, frame = 0
 815              		@ frame_needed = 0, uses_anonymous_args = 0
 816              		@ link register save eliminated.
 817              	.LVL64:
 818 0000 7047     		bx	lr
 819              		.cfi_endproc
 820              	.LFE130:
 822              		.global	uwMeasurementDone
 823              		.global	uwPeriodValue
ARM GAS  /tmp/ccYjNPIU.s 			page 25


 824              		.global	uwCaptureNumber
 825              		.comm	htim5,60,4
 826              		.comm	hiwdg,12,4
 827              		.section	.bss.uwCaptureNumber,"aw",%nobits
 828              		.align	2
 829              		.set	.LANCHOR1,. + 0
 832              	uwCaptureNumber:
 833 0000 00000000 		.space	4
 834              		.section	.bss.uwLsiFreq,"aw",%nobits
 835              		.align	2
 836              		.set	.LANCHOR3,. + 0
 839              	uwLsiFreq:
 840 0000 00000000 		.space	4
 841              		.section	.bss.uwMeasurementDone,"aw",%nobits
 842              		.align	2
 843              		.set	.LANCHOR0,. + 0
 846              	uwMeasurementDone:
 847 0000 00000000 		.space	4
 848              		.section	.bss.uwPeriodValue,"aw",%nobits
 849              		.align	2
 850              		.set	.LANCHOR2,. + 0
 853              	uwPeriodValue:
 854 0000 00000000 		.space	4
 855              		.section	.rodata.MX_IWDG_Init.str1.4,"aMS",%progbits,1
 856              		.align	2
 857              	.LC0:
 858 0000 5372632F 		.ascii	"Src/main.c\000"
 858      6D61696E 
 858      2E6300
 859              		.text
 860              	.Letext0:
 861              		.file 2 "/home/saicharan/arm/arm-none-eabi/include/machine/_default_types.h"
 862              		.file 3 "/home/saicharan/arm/arm-none-eabi/include/stdint.h"
 863              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 864              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 865              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 866              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 867              		.file 8 "/home/saicharan/arm/arm-none-eabi/include/sys/lock.h"
 868              		.file 9 "/home/saicharan/arm/arm-none-eabi/include/sys/_types.h"
 869              		.file 10 "/home/saicharan/arm/lib/gcc/arm-none-eabi/6.3.0/include/stddef.h"
 870              		.file 11 "/home/saicharan/arm/arm-none-eabi/include/sys/reent.h"
 871              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 872              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 873              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 874              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 875              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 876              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_iwdg.h"
 877              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 878              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 879              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 880              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccYjNPIU.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccYjNPIU.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccYjNPIU.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccYjNPIU.s:118    .text.MX_GPIO_Init:0000000000000074 $d
     /tmp/ccYjNPIU.s:126    .text._Error_Handler:0000000000000000 $t
     /tmp/ccYjNPIU.s:133    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccYjNPIU.s:159    .text._Error_Handler:0000000000000010 $d
     /tmp/ccYjNPIU.s:164    .text.MX_IWDG_Init:0000000000000000 $t
     /tmp/ccYjNPIU.s:170    .text.MX_IWDG_Init:0000000000000000 MX_IWDG_Init
     /tmp/ccYjNPIU.s:205    .text.MX_IWDG_Init:0000000000000024 $d
                            *COM*:000000000000000c hiwdg
     /tmp/ccYjNPIU.s:212    .text.MX_TIM5_Init:0000000000000000 $t
     /tmp/ccYjNPIU.s:218    .text.MX_TIM5_Init:0000000000000000 MX_TIM5_Init
     /tmp/ccYjNPIU.s:345    .text.MX_TIM5_Init:00000000000000a8 $d
                            *COM*:000000000000003c htim5
     /tmp/ccYjNPIU.s:352    .text.GetLSIFrequency:0000000000000000 $t
     /tmp/ccYjNPIU.s:358    .text.GetLSIFrequency:0000000000000000 GetLSIFrequency
     /tmp/ccYjNPIU.s:542    .text.GetLSIFrequency:0000000000000104 $d
     /tmp/ccYjNPIU.s:554    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccYjNPIU.s:561    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccYjNPIU.s:676    .text.SystemClock_Config:0000000000000098 $d
     /tmp/ccYjNPIU.s:684    .text.main:0000000000000000 $t
     /tmp/ccYjNPIU.s:691    .text.main:0000000000000000 main
     /tmp/ccYjNPIU.s:793    .text.main:0000000000000088 $d
     /tmp/ccYjNPIU.s:803    .text.assert_failed:0000000000000000 $t
     /tmp/ccYjNPIU.s:810    .text.assert_failed:0000000000000000 assert_failed
     /tmp/ccYjNPIU.s:846    .bss.uwMeasurementDone:0000000000000000 uwMeasurementDone
     /tmp/ccYjNPIU.s:853    .bss.uwPeriodValue:0000000000000000 uwPeriodValue
     /tmp/ccYjNPIU.s:832    .bss.uwCaptureNumber:0000000000000000 uwCaptureNumber
     /tmp/ccYjNPIU.s:828    .bss.uwCaptureNumber:0000000000000000 $d
     /tmp/ccYjNPIU.s:835    .bss.uwLsiFreq:0000000000000000 $d
     /tmp/ccYjNPIU.s:839    .bss.uwLsiFreq:0000000000000000 uwLsiFreq
     /tmp/ccYjNPIU.s:842    .bss.uwMeasurementDone:0000000000000000 $d
     /tmp/ccYjNPIU.s:849    .bss.uwPeriodValue:0000000000000000 $d
     /tmp/ccYjNPIU.s:856    .rodata.MX_IWDG_Init.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_IWDG_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_IC_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_IC_ConfigChannel
HAL_TIMEx_RemapConfig
HAL_TIM_IC_Start_IT
HAL_TIM_IC_DeInit
HAL_RCC_GetPCLK1Freq
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
ARM GAS  /tmp/ccYjNPIU.s 			page 27


HAL_SYSTICK_CLKSourceConfig
HAL_Init
HAL_GPIO_TogglePin
HAL_Delay
HAL_IWDG_Refresh
