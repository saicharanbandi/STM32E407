ARM GAS  /tmp/ccWQnMF4.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NMI_Handler,"ax",%progbits
  18              		.align	1
  19              		.global	NMI_Handler
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	NMI_Handler:
  26              	.LFB123:
  27              		.file 1 "Src/stm32f4xx_it.c"
   1:Src/stm32f4xx_it.c **** /**
   2:Src/stm32f4xx_it.c ****   ******************************************************************************
   3:Src/stm32f4xx_it.c ****   * @file    stm32f4xx_it.c
   4:Src/stm32f4xx_it.c ****   * @brief   Interrupt Service Routines.
   5:Src/stm32f4xx_it.c ****   ******************************************************************************
   6:Src/stm32f4xx_it.c ****   *
   7:Src/stm32f4xx_it.c ****   * COPYRIGHT(c) 2017 STMicroelectronics
   8:Src/stm32f4xx_it.c ****   *
   9:Src/stm32f4xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:Src/stm32f4xx_it.c ****   * are permitted provided that the following conditions are met:
  11:Src/stm32f4xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:Src/stm32f4xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:Src/stm32f4xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:Src/stm32f4xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:Src/stm32f4xx_it.c ****   *      and/or other materials provided with the distribution.
  16:Src/stm32f4xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:Src/stm32f4xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:Src/stm32f4xx_it.c ****   *      without specific prior written permission.
  19:Src/stm32f4xx_it.c ****   *
  20:Src/stm32f4xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:Src/stm32f4xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:Src/stm32f4xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:Src/stm32f4xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:Src/stm32f4xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:Src/stm32f4xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:Src/stm32f4xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:Src/stm32f4xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:Src/stm32f4xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:Src/stm32f4xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:Src/stm32f4xx_it.c ****   *
  31:Src/stm32f4xx_it.c ****   ******************************************************************************
ARM GAS  /tmp/ccWQnMF4.s 			page 2


  32:Src/stm32f4xx_it.c ****   */
  33:Src/stm32f4xx_it.c **** /* Includes ------------------------------------------------------------------*/
  34:Src/stm32f4xx_it.c **** #include "stm32f4xx_hal.h"
  35:Src/stm32f4xx_it.c **** #include "stm32f4xx.h"
  36:Src/stm32f4xx_it.c **** #include "stm32f4xx_it.h"
  37:Src/stm32f4xx_it.c **** 
  38:Src/stm32f4xx_it.c **** /* USER CODE BEGIN 0 */
  39:Src/stm32f4xx_it.c **** #include "main.h"
  40:Src/stm32f4xx_it.c **** 
  41:Src/stm32f4xx_it.c **** /* Private variables ---------------------------------------------------------*/
  42:Src/stm32f4xx_it.c **** 
  43:Src/stm32f4xx_it.c **** /*TIM hanlder declared in "main.c" file */
  44:Src/stm32f4xx_it.c **** extern __IO uint32_t uwPeriodValue;
  45:Src/stm32f4xx_it.c **** extern __IO uint32_t uwCaptureNumber;
  46:Src/stm32f4xx_it.c **** extern __IO uint32_t uwMeasurementDone;
  47:Src/stm32f4xx_it.c **** uint16_t tmpCC4[2] = {0, 0};
  48:Src/stm32f4xx_it.c **** 
  49:Src/stm32f4xx_it.c **** /* /\*External variables --------------------------------------------------------*\/ */
  50:Src/stm32f4xx_it.c **** /* extern TIM_HandleTypeDef htim5; */
  51:Src/stm32f4xx_it.c **** /* USER CODE END 0 */
  52:Src/stm32f4xx_it.c **** 
  53:Src/stm32f4xx_it.c **** /* External variables --------------------------------------------------------*/
  54:Src/stm32f4xx_it.c **** extern TIM_HandleTypeDef htim5;
  55:Src/stm32f4xx_it.c **** 
  56:Src/stm32f4xx_it.c **** /******************************************************************************/
  57:Src/stm32f4xx_it.c **** /*            Cortex-M4 Processor Interruption and Exception Handlers         */ 
  58:Src/stm32f4xx_it.c **** /******************************************************************************/
  59:Src/stm32f4xx_it.c **** 
  60:Src/stm32f4xx_it.c **** /**
  61:Src/stm32f4xx_it.c **** * @brief This function handles Non maskable interrupt.
  62:Src/stm32f4xx_it.c **** */
  63:Src/stm32f4xx_it.c **** void NMI_Handler(void)
  64:Src/stm32f4xx_it.c **** {
  28              		.loc 1 64 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE123:
  37              		.section	.text.HardFault_Handler,"ax",%progbits
  38              		.align	1
  39              		.global	HardFault_Handler
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  43              		.fpu fpv4-sp-d16
  45              	HardFault_Handler:
  46              	.LFB124:
  65:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  66:Src/stm32f4xx_it.c **** 
  67:Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  68:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  69:Src/stm32f4xx_it.c **** 
  70:Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  71:Src/stm32f4xx_it.c **** }
ARM GAS  /tmp/ccWQnMF4.s 			page 3


  72:Src/stm32f4xx_it.c **** 
  73:Src/stm32f4xx_it.c **** /**
  74:Src/stm32f4xx_it.c **** * @brief This function handles Hard fault interrupt.
  75:Src/stm32f4xx_it.c **** */
  76:Src/stm32f4xx_it.c **** void HardFault_Handler(void)
  77:Src/stm32f4xx_it.c **** {
  47              		.loc 1 77 0
  48              		.cfi_startproc
  49              		@ Volatile: function does not return.
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              		.loc 1 77 0
  53 0000 08B5     		push	{r3, lr}
  54              	.LCFI0:
  55              		.cfi_def_cfa_offset 8
  56              		.cfi_offset 3, -8
  57              		.cfi_offset 14, -4
  78:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  79:Src/stm32f4xx_it.c ****   /* Turn LED_Red on */
  80:Src/stm32f4xx_it.c ****   HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
  58              		.loc 1 80 0
  59 0002 0122     		movs	r2, #1
  60 0004 2021     		movs	r1, #32
  61 0006 0248     		ldr	r0, .L5
  62 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
  63              	.LVL0:
  64              	.L3:
  65 000c FEE7     		b	.L3
  66              	.L6:
  67 000e 00BF     		.align	2
  68              	.L5:
  69 0010 00140240 		.word	1073878016
  70              		.cfi_endproc
  71              	.LFE124:
  73              		.section	.text.MemManage_Handler,"ax",%progbits
  74              		.align	1
  75              		.global	MemManage_Handler
  76              		.syntax unified
  77              		.thumb
  78              		.thumb_func
  79              		.fpu fpv4-sp-d16
  81              	MemManage_Handler:
  82              	.LFB125:
  81:Src/stm32f4xx_it.c ****   /* HAL_Delay(5000); */
  82:Src/stm32f4xx_it.c **** 
  83:Src/stm32f4xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  84:Src/stm32f4xx_it.c ****   while (1)
  85:Src/stm32f4xx_it.c ****   {
  86:Src/stm32f4xx_it.c ****   }
  87:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
  88:Src/stm32f4xx_it.c **** 
  89:Src/stm32f4xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
  90:Src/stm32f4xx_it.c **** }
  91:Src/stm32f4xx_it.c **** 
  92:Src/stm32f4xx_it.c **** /**
  93:Src/stm32f4xx_it.c **** * @brief This function handles Memory management fault.
  94:Src/stm32f4xx_it.c **** */
ARM GAS  /tmp/ccWQnMF4.s 			page 4


  95:Src/stm32f4xx_it.c **** void MemManage_Handler(void)
  96:Src/stm32f4xx_it.c **** {
  83              		.loc 1 96 0
  84              		.cfi_startproc
  85              		@ Volatile: function does not return.
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              		@ link register save eliminated.
  89              	.L8:
  90 0000 FEE7     		b	.L8
  91              		.cfi_endproc
  92              	.LFE125:
  94              		.section	.text.BusFault_Handler,"ax",%progbits
  95              		.align	1
  96              		.global	BusFault_Handler
  97              		.syntax unified
  98              		.thumb
  99              		.thumb_func
 100              		.fpu fpv4-sp-d16
 102              	BusFault_Handler:
 103              	.LFB126:
  97:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  98:Src/stm32f4xx_it.c **** 
  99:Src/stm32f4xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 100:Src/stm32f4xx_it.c ****   while (1)
 101:Src/stm32f4xx_it.c ****   {
 102:Src/stm32f4xx_it.c ****   }
 103:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 1 */
 104:Src/stm32f4xx_it.c **** 
 105:Src/stm32f4xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 1 */
 106:Src/stm32f4xx_it.c **** }
 107:Src/stm32f4xx_it.c **** 
 108:Src/stm32f4xx_it.c **** /**
 109:Src/stm32f4xx_it.c **** * @brief This function handles Pre-fetch fault, memory access fault.
 110:Src/stm32f4xx_it.c **** */
 111:Src/stm32f4xx_it.c **** void BusFault_Handler(void)
 112:Src/stm32f4xx_it.c **** {
 104              		.loc 1 112 0
 105              		.cfi_startproc
 106              		@ Volatile: function does not return.
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              		@ link register save eliminated.
 110              	.L10:
 111 0000 FEE7     		b	.L10
 112              		.cfi_endproc
 113              	.LFE126:
 115              		.section	.text.UsageFault_Handler,"ax",%progbits
 116              		.align	1
 117              		.global	UsageFault_Handler
 118              		.syntax unified
 119              		.thumb
 120              		.thumb_func
 121              		.fpu fpv4-sp-d16
 123              	UsageFault_Handler:
 124              	.LFB127:
 113:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
ARM GAS  /tmp/ccWQnMF4.s 			page 5


 114:Src/stm32f4xx_it.c **** 
 115:Src/stm32f4xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 116:Src/stm32f4xx_it.c ****   while (1)
 117:Src/stm32f4xx_it.c ****   {
 118:Src/stm32f4xx_it.c ****   }
 119:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 1 */
 120:Src/stm32f4xx_it.c **** 
 121:Src/stm32f4xx_it.c ****   /* USER CODE END BusFault_IRQn 1 */
 122:Src/stm32f4xx_it.c **** }
 123:Src/stm32f4xx_it.c **** 
 124:Src/stm32f4xx_it.c **** /**
 125:Src/stm32f4xx_it.c **** * @brief This function handles Undefined instruction or illegal state.
 126:Src/stm32f4xx_it.c **** */
 127:Src/stm32f4xx_it.c **** void UsageFault_Handler(void)
 128:Src/stm32f4xx_it.c **** {
 125              		.loc 1 128 0
 126              		.cfi_startproc
 127              		@ Volatile: function does not return.
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130              		@ link register save eliminated.
 131              	.L12:
 132 0000 FEE7     		b	.L12
 133              		.cfi_endproc
 134              	.LFE127:
 136              		.section	.text.SVC_Handler,"ax",%progbits
 137              		.align	1
 138              		.global	SVC_Handler
 139              		.syntax unified
 140              		.thumb
 141              		.thumb_func
 142              		.fpu fpv4-sp-d16
 144              	SVC_Handler:
 145              	.LFB128:
 129:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 130:Src/stm32f4xx_it.c **** 
 131:Src/stm32f4xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 132:Src/stm32f4xx_it.c ****   while (1)
 133:Src/stm32f4xx_it.c ****   {
 134:Src/stm32f4xx_it.c ****   }
 135:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 1 */
 136:Src/stm32f4xx_it.c **** 
 137:Src/stm32f4xx_it.c ****   /* USER CODE END UsageFault_IRQn 1 */
 138:Src/stm32f4xx_it.c **** }
 139:Src/stm32f4xx_it.c **** 
 140:Src/stm32f4xx_it.c **** /**
 141:Src/stm32f4xx_it.c **** * @brief This function handles System service call via SWI instruction.
 142:Src/stm32f4xx_it.c **** */
 143:Src/stm32f4xx_it.c **** void SVC_Handler(void)
 144:Src/stm32f4xx_it.c **** {
 146              		.loc 1 144 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150              		@ link register save eliminated.
 151 0000 7047     		bx	lr
 152              		.cfi_endproc
ARM GAS  /tmp/ccWQnMF4.s 			page 6


 153              	.LFE128:
 155              		.section	.text.DebugMon_Handler,"ax",%progbits
 156              		.align	1
 157              		.global	DebugMon_Handler
 158              		.syntax unified
 159              		.thumb
 160              		.thumb_func
 161              		.fpu fpv4-sp-d16
 163              	DebugMon_Handler:
 164              	.LFB129:
 145:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 146:Src/stm32f4xx_it.c **** 
 147:Src/stm32f4xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 148:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 149:Src/stm32f4xx_it.c **** 
 150:Src/stm32f4xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 151:Src/stm32f4xx_it.c **** }
 152:Src/stm32f4xx_it.c **** 
 153:Src/stm32f4xx_it.c **** /**
 154:Src/stm32f4xx_it.c **** * @brief This function handles Debug monitor.
 155:Src/stm32f4xx_it.c **** */
 156:Src/stm32f4xx_it.c **** void DebugMon_Handler(void)
 157:Src/stm32f4xx_it.c **** {
 165              		.loc 1 157 0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 0
 168              		@ frame_needed = 0, uses_anonymous_args = 0
 169              		@ link register save eliminated.
 170 0000 7047     		bx	lr
 171              		.cfi_endproc
 172              	.LFE129:
 174              		.section	.text.PendSV_Handler,"ax",%progbits
 175              		.align	1
 176              		.global	PendSV_Handler
 177              		.syntax unified
 178              		.thumb
 179              		.thumb_func
 180              		.fpu fpv4-sp-d16
 182              	PendSV_Handler:
 183              	.LFB130:
 158:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 159:Src/stm32f4xx_it.c **** 
 160:Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 161:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 162:Src/stm32f4xx_it.c **** 
 163:Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 164:Src/stm32f4xx_it.c **** }
 165:Src/stm32f4xx_it.c **** 
 166:Src/stm32f4xx_it.c **** /**
 167:Src/stm32f4xx_it.c **** * @brief This function handles Pendable request for system service.
 168:Src/stm32f4xx_it.c **** */
 169:Src/stm32f4xx_it.c **** void PendSV_Handler(void)
 170:Src/stm32f4xx_it.c **** {
 184              		.loc 1 170 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccWQnMF4.s 			page 7


 188              		@ link register save eliminated.
 189 0000 7047     		bx	lr
 190              		.cfi_endproc
 191              	.LFE130:
 193              		.section	.text.SysTick_Handler,"ax",%progbits
 194              		.align	1
 195              		.global	SysTick_Handler
 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 199              		.fpu fpv4-sp-d16
 201              	SysTick_Handler:
 202              	.LFB131:
 171:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 172:Src/stm32f4xx_it.c **** 
 173:Src/stm32f4xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 174:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 175:Src/stm32f4xx_it.c **** 
 176:Src/stm32f4xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 177:Src/stm32f4xx_it.c **** }
 178:Src/stm32f4xx_it.c **** 
 179:Src/stm32f4xx_it.c **** /**
 180:Src/stm32f4xx_it.c **** * @brief This function handles System tick timer.
 181:Src/stm32f4xx_it.c **** */
 182:Src/stm32f4xx_it.c **** void SysTick_Handler(void)
 183:Src/stm32f4xx_it.c **** {
 203              		.loc 1 183 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207              		.loc 1 183 0
 208 0000 08B5     		push	{r3, lr}
 209              	.LCFI1:
 210              		.cfi_def_cfa_offset 8
 211              		.cfi_offset 3, -8
 212              		.cfi_offset 14, -4
 184:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 185:Src/stm32f4xx_it.c **** 
 186:Src/stm32f4xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 187:Src/stm32f4xx_it.c ****   HAL_IncTick();
 213              		.loc 1 187 0
 214 0002 FFF7FEFF 		bl	HAL_IncTick
 215              	.LVL1:
 188:Src/stm32f4xx_it.c ****   HAL_SYSTICK_IRQHandler();
 216              		.loc 1 188 0
 217 0006 FFF7FEFF 		bl	HAL_SYSTICK_IRQHandler
 218              	.LVL2:
 219 000a 08BD     		pop	{r3, pc}
 220              		.cfi_endproc
 221              	.LFE131:
 223              		.section	.text.EXTI0_IRQHandler,"ax",%progbits
 224              		.align	1
 225              		.global	EXTI0_IRQHandler
 226              		.syntax unified
 227              		.thumb
 228              		.thumb_func
 229              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccWQnMF4.s 			page 8


 231              	EXTI0_IRQHandler:
 232              	.LFB132:
 189:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 190:Src/stm32f4xx_it.c **** 
 191:Src/stm32f4xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 192:Src/stm32f4xx_it.c **** }
 193:Src/stm32f4xx_it.c **** 
 194:Src/stm32f4xx_it.c **** /******************************************************************************/
 195:Src/stm32f4xx_it.c **** /* STM32F4xx Peripheral Interrupt Handlers                                    */
 196:Src/stm32f4xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 197:Src/stm32f4xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 198:Src/stm32f4xx_it.c **** /* please refer to the startup file (startup_stm32f4xx.s).                    */
 199:Src/stm32f4xx_it.c **** /******************************************************************************/
 200:Src/stm32f4xx_it.c **** 
 201:Src/stm32f4xx_it.c **** /**
 202:Src/stm32f4xx_it.c **** * @brief This function handles EXTI line0 interrupt.
 203:Src/stm32f4xx_it.c **** */
 204:Src/stm32f4xx_it.c **** void EXTI0_IRQHandler(void)
 205:Src/stm32f4xx_it.c **** {
 233              		.loc 1 205 0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 0
 236              		@ frame_needed = 0, uses_anonymous_args = 0
 237 0000 08B5     		push	{r3, lr}
 238              	.LCFI2:
 239              		.cfi_def_cfa_offset 8
 240              		.cfi_offset 3, -8
 241              		.cfi_offset 14, -4
 206:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN EXTI0_IRQn 0 */
 207:Src/stm32f4xx_it.c ****   if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_0))
 242              		.loc 1 207 0
 243 0002 094B     		ldr	r3, .L22
 244 0004 5B69     		ldr	r3, [r3, #20]
 245 0006 13F0010F 		tst	r3, #1
 246 000a 03D1     		bne	.L21
 247              	.L19:
 208:Src/stm32f4xx_it.c ****   {
 209:Src/stm32f4xx_it.c ****     /* Resetting the LED_Green completely */
 210:Src/stm32f4xx_it.c ****     HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 211:Src/stm32f4xx_it.c ****     *(__IO uint32_t *) 0xA0001000 = 0xFF;
 212:Src/stm32f4xx_it.c ****     
 213:Src/stm32f4xx_it.c ****   }
 214:Src/stm32f4xx_it.c ****   /* USER CODE END EXTI0_IRQn 0 */
 215:Src/stm32f4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 248              		.loc 1 215 0
 249 000c 0120     		movs	r0, #1
 250 000e FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 251              	.LVL3:
 252 0012 08BD     		pop	{r3, pc}
 253              	.L21:
 210:Src/stm32f4xx_it.c ****     *(__IO uint32_t *) 0xA0001000 = 0xFF;
 254              		.loc 1 210 0
 255 0014 0022     		movs	r2, #0
 256 0016 0421     		movs	r1, #4
 257 0018 0448     		ldr	r0, .L22+4
 258 001a FFF7FEFF 		bl	HAL_GPIO_WritePin
 259              	.LVL4:
ARM GAS  /tmp/ccWQnMF4.s 			page 9


 211:Src/stm32f4xx_it.c ****     
 260              		.loc 1 211 0
 261 001e FF22     		movs	r2, #255
 262 0020 034B     		ldr	r3, .L22+8
 263 0022 1A60     		str	r2, [r3]
 264 0024 F2E7     		b	.L19
 265              	.L23:
 266 0026 00BF     		.align	2
 267              	.L22:
 268 0028 003C0140 		.word	1073822720
 269 002c 00140240 		.word	1073878016
 270 0030 001000A0 		.word	-1610608640
 271              		.cfi_endproc
 272              	.LFE132:
 274              		.section	.text.TIM5_IRQHandler,"ax",%progbits
 275              		.align	1
 276              		.global	TIM5_IRQHandler
 277              		.syntax unified
 278              		.thumb
 279              		.thumb_func
 280              		.fpu fpv4-sp-d16
 282              	TIM5_IRQHandler:
 283              	.LFB133:
 216:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN EXTI0_IRQn 1 */
 217:Src/stm32f4xx_it.c ****   /* USER CODE END EXTI0_IRQn 1 */
 218:Src/stm32f4xx_it.c **** }
 219:Src/stm32f4xx_it.c **** 
 220:Src/stm32f4xx_it.c **** /**
 221:Src/stm32f4xx_it.c **** * @brief This function handles TIM5 global interrupt.
 222:Src/stm32f4xx_it.c **** */
 223:Src/stm32f4xx_it.c **** void TIM5_IRQHandler(void)
 224:Src/stm32f4xx_it.c **** {
 284              		.loc 1 224 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 0
 287              		@ frame_needed = 0, uses_anonymous_args = 0
 288 0000 70B5     		push	{r4, r5, r6, lr}
 289              	.LCFI3:
 290              		.cfi_def_cfa_offset 16
 291              		.cfi_offset 4, -16
 292              		.cfi_offset 5, -12
 293              		.cfi_offset 6, -8
 294              		.cfi_offset 14, -4
 225:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN TIM5_IRQn 0 */
 226:Src/stm32f4xx_it.c **** 
 227:Src/stm32f4xx_it.c ****   /* USER CODE END TIM5_IRQn 0 */
 228:Src/stm32f4xx_it.c ****   HAL_TIM_IRQHandler(&htim5);
 295              		.loc 1 228 0
 296 0002 0F4E     		ldr	r6, .L27
 297 0004 3046     		mov	r0, r6
 298 0006 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 299              	.LVL5:
 229:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN TIM5_IRQn 1 */
 230:Src/stm32f4xx_it.c ****  /* Get the Input Capture value */
 231:Src/stm32f4xx_it.c ****   tmpCC4[uwCaptureNumber++] = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_4);
 300              		.loc 1 231 0
 301 000a 0E4C     		ldr	r4, .L27+4
ARM GAS  /tmp/ccWQnMF4.s 			page 10


 302 000c 2568     		ldr	r5, [r4]
 303 000e 6B1C     		adds	r3, r5, #1
 304 0010 2360     		str	r3, [r4]
 305 0012 0C21     		movs	r1, #12
 306 0014 3046     		mov	r0, r6
 307 0016 FFF7FEFF 		bl	HAL_TIM_ReadCapturedValue
 308              	.LVL6:
 309 001a 0B4B     		ldr	r3, .L27+8
 310 001c 23F81500 		strh	r0, [r3, r5, lsl #1]	@ movhi
 232:Src/stm32f4xx_it.c ****     
 233:Src/stm32f4xx_it.c ****   if (uwCaptureNumber >= 2)
 311              		.loc 1 233 0
 312 0020 2368     		ldr	r3, [r4]
 313 0022 012B     		cmp	r3, #1
 314 0024 0BD9     		bls	.L24
 234:Src/stm32f4xx_it.c ****   {
 235:Src/stm32f4xx_it.c ****     /* Compute the period length */
 236:Src/stm32f4xx_it.c ****     uwPeriodValue = (uint16_t)(0xFFFF - tmpCC4[0] + tmpCC4[1] + 1);
 315              		.loc 1 236 0
 316 0026 084A     		ldr	r2, .L27+8
 317 0028 5388     		ldrh	r3, [r2, #2]
 318 002a 1288     		ldrh	r2, [r2]
 319 002c 9B1A     		subs	r3, r3, r2
 320 002e 9BB2     		uxth	r3, r3
 321 0030 064A     		ldr	r2, .L27+12
 322 0032 1360     		str	r3, [r2]
 237:Src/stm32f4xx_it.c ****     uwMeasurementDone = 1;
 323              		.loc 1 237 0
 324 0034 0122     		movs	r2, #1
 325 0036 064B     		ldr	r3, .L27+16
 326 0038 1A60     		str	r2, [r3]
 238:Src/stm32f4xx_it.c ****     uwCaptureNumber = 0;
 327              		.loc 1 238 0
 328 003a 0022     		movs	r2, #0
 329 003c 2260     		str	r2, [r4]
 330              	.L24:
 331 003e 70BD     		pop	{r4, r5, r6, pc}
 332              	.L28:
 333              		.align	2
 334              	.L27:
 335 0040 00000000 		.word	htim5
 336 0044 00000000 		.word	uwCaptureNumber
 337 0048 00000000 		.word	.LANCHOR0
 338 004c 00000000 		.word	uwPeriodValue
 339 0050 00000000 		.word	uwMeasurementDone
 340              		.cfi_endproc
 341              	.LFE133:
 343              		.global	tmpCC4
 344              		.section	.bss.tmpCC4,"aw",%nobits
 345              		.align	2
 346              		.set	.LANCHOR0,. + 0
 349              	tmpCC4:
 350 0000 00000000 		.space	4
 351              		.text
 352              	.Letext0:
 353              		.file 2 "/home/saicharan/arm/arm-none-eabi/include/machine/_default_types.h"
 354              		.file 3 "/home/saicharan/arm/arm-none-eabi/include/stdint.h"
ARM GAS  /tmp/ccWQnMF4.s 			page 11


 355              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 356              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 357              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 358              		.file 7 "/home/saicharan/arm/arm-none-eabi/include/sys/lock.h"
 359              		.file 8 "/home/saicharan/arm/arm-none-eabi/include/sys/_types.h"
 360              		.file 9 "/home/saicharan/arm/lib/gcc/arm-none-eabi/6.3.0/include/stddef.h"
 361              		.file 10 "/home/saicharan/arm/arm-none-eabi/include/sys/reent.h"
 362              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 363              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 364              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 365              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 366              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 367              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
ARM GAS  /tmp/ccWQnMF4.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_it.c
     /tmp/ccWQnMF4.s:18     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccWQnMF4.s:25     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccWQnMF4.s:38     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccWQnMF4.s:45     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccWQnMF4.s:69     .text.HardFault_Handler:0000000000000010 $d
     /tmp/ccWQnMF4.s:74     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccWQnMF4.s:81     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccWQnMF4.s:95     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccWQnMF4.s:102    .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccWQnMF4.s:116    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccWQnMF4.s:123    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccWQnMF4.s:137    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccWQnMF4.s:144    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccWQnMF4.s:156    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccWQnMF4.s:163    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccWQnMF4.s:175    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccWQnMF4.s:182    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccWQnMF4.s:194    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccWQnMF4.s:201    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccWQnMF4.s:224    .text.EXTI0_IRQHandler:0000000000000000 $t
     /tmp/ccWQnMF4.s:231    .text.EXTI0_IRQHandler:0000000000000000 EXTI0_IRQHandler
     /tmp/ccWQnMF4.s:268    .text.EXTI0_IRQHandler:0000000000000028 $d
     /tmp/ccWQnMF4.s:275    .text.TIM5_IRQHandler:0000000000000000 $t
     /tmp/ccWQnMF4.s:282    .text.TIM5_IRQHandler:0000000000000000 TIM5_IRQHandler
     /tmp/ccWQnMF4.s:335    .text.TIM5_IRQHandler:0000000000000040 $d
     /tmp/ccWQnMF4.s:349    .bss.tmpCC4:0000000000000000 tmpCC4
     /tmp/ccWQnMF4.s:345    .bss.tmpCC4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_IncTick
HAL_SYSTICK_IRQHandler
HAL_GPIO_EXTI_IRQHandler
HAL_TIM_IRQHandler
HAL_TIM_ReadCapturedValue
htim5
uwCaptureNumber
uwPeriodValue
uwMeasurementDone
