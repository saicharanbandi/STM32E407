ARM GAS  /tmp/ccCzsxyr.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.Manch_Rx_Error,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	Manch_Rx_Error:
  25              	.LFB129:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    **** ******************************************************************************
   3:Src/main.c    **** * File Name          : main.c
   4:Src/main.c    **** * Description        : Main program body
   5:Src/main.c    **** ******************************************************************************
   6:Src/main.c    **** ** This notice applies to any and all portions of this file
   7:Src/main.c    **** * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    **** * USER CODE END. Other portions of this file, whether 
   9:Src/main.c    **** * inserted by the user or by software development tools
  10:Src/main.c    **** * are owned by their respective copyright owners.
  11:Src/main.c    **** *
  12:Src/main.c    **** * COPYRIGHT(c) 2017 STMicroelectronics
  13:Src/main.c    **** *
  14:Src/main.c    **** * Redistribution and use in source and binary forms, with or without modification,
  15:Src/main.c    **** * are permitted provided that the following conditions are met:
  16:Src/main.c    **** *   1. Redistributions of source code must retain the above copyright notice,
  17:Src/main.c    **** *      this list of conditions and the following disclaimer.
  18:Src/main.c    **** *   2. Redistributions in binary form must reproduce the above copyright notice,
  19:Src/main.c    **** *      this list of conditions and the following disclaimer in the documentation
  20:Src/main.c    **** *      and/or other materials provided with the distribution.
  21:Src/main.c    **** *   3. Neither the name of STMicroelectronics nor the names of its contributors
  22:Src/main.c    **** *      may be used to endorse or promote products derived from this software
  23:Src/main.c    **** *      without specific prior written permission.
  24:Src/main.c    **** *
  25:Src/main.c    **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  26:Src/main.c    **** * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  27:Src/main.c    **** * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  28:Src/main.c    **** * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  29:Src/main.c    **** * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  30:Src/main.c    **** * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  31:Src/main.c    **** * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  32:Src/main.c    **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
ARM GAS  /tmp/ccCzsxyr.s 			page 2


  33:Src/main.c    **** * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:Src/main.c    **** * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:Src/main.c    **** *
  36:Src/main.c    **** ******************************************************************************
  37:Src/main.c    **** */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE BEGIN Includes */
  44:Src/main.c    **** #include "dwt_stm32_delay.h"
  45:Src/main.c    **** /* USER CODE END Includes */
  46:Src/main.c    **** 
  47:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  48:Src/main.c    **** TIM_HandleTypeDef htim4;
  49:Src/main.c    **** 
  50:Src/main.c    **** /* USER CODE BEGIN PV */
  51:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  52:Src/main.c    **** 
  53:Src/main.c    **** /* Captured Values */
  54:Src/main.c    **** uint32_t               uwIC3Value1 = 0;
  55:Src/main.c    **** uint32_t               uwIC3Value2 = 0;
  56:Src/main.c    **** uint32_t               uwDiffCapture = 0;
  57:Src/main.c    **** 
  58:Src/main.c    **** /* Capture index */
  59:Src/main.c    **** uint16_t               uhCaptureIndex = 0;
  60:Src/main.c    **** 
  61:Src/main.c    **** /* Frequency Value */
  62:Src/main.c    **** uint32_t               uwFrequency = 0;
  63:Src/main.c    **** 
  64:Src/main.c    **** /* T value as 125 usec */
  65:Src/main.c    **** static unsigned long T = 125*0.000001;
  66:Src/main.c    **** /* Delta_T value as 25 usec */
  67:Src/main.c    **** static unsigned long Delta_T = 25*0.000001;
  68:Src/main.c    **** /* Receiving buffer initialization */
  69:Src/main.c    **** static unsigned char rx_msg[valid_bits] = {0};
  70:Src/main.c    **** /* The value sent by the slave (Disc_STM32F3) */
  71:Src/main.c    **** static unsigned char response = 0x96;
  72:Src/main.c    **** 
  73:Src/main.c    **** /* USER CODE END PV */
  74:Src/main.c    **** 
  75:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  76:Src/main.c    **** void SystemClock_Config(void);
  77:Src/main.c    **** static void MX_GPIO_Init(void);
  78:Src/main.c    **** static void MX_TIM4_Init(void);
  79:Src/main.c    **** 
  80:Src/main.c    **** /* USER CODE BEGIN PFP */
  81:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  82:Src/main.c    **** /* Manchester_Rx functions */
  83:Src/main.c    **** static unsigned char  Manch_Rx(unsigned char* rx_msg);
  84:Src/main.c    **** static void Manch_Rx_Error(void);
  85:Src/main.c    **** /* USER CODE END PFP */
  86:Src/main.c    **** 
  87:Src/main.c    **** /* USER CODE BEGIN 0 */
  88:Src/main.c    **** 
  89:Src/main.c    **** /* USER CODE END 0 */
ARM GAS  /tmp/ccCzsxyr.s 			page 3


  90:Src/main.c    **** 
  91:Src/main.c    **** int main(void)
  92:Src/main.c    **** {
  93:Src/main.c    **** 
  94:Src/main.c    ****   /* USER CODE BEGIN 1 */
  95:Src/main.c    **** 
  96:Src/main.c    ****   /* USER CODE END 1 */
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 101:Src/main.c    ****   HAL_Init();
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* USER CODE BEGIN Init */
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* USER CODE END Init */
 106:Src/main.c    **** 
 107:Src/main.c    ****   /* Configure the system clock */
 108:Src/main.c    ****   SystemClock_Config();
 109:Src/main.c    **** 
 110:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 111:Src/main.c    **** 
 112:Src/main.c    ****   /* USER CODE END SysInit */
 113:Src/main.c    **** 
 114:Src/main.c    ****   /* Initialize all configured peripherals */
 115:Src/main.c    ****   MX_GPIO_Init();
 116:Src/main.c    ****   MX_TIM4_Init();
 117:Src/main.c    **** 
 118:Src/main.c    ****   /* USER CODE BEGIN 2 */
 119:Src/main.c    ****   /* Start the Timer4 Input Capture in Interrupt mode */
 120:Src/main.c    ****   if(HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3) != HAL_OK)
 121:Src/main.c    ****     {
 122:Src/main.c    ****       _Error_Handler(__FILE__,__LINE__);
 123:Src/main.c    ****     }
 124:Src/main.c    ****   /* Call the Manchester_Rx function here and compare the "response"
 125:Src/main.c    ****      and "rx_msg" values */
 126:Src/main.c    ****   Manch_Rx(rx_msg);
 127:Src/main.c    ****   if(*rx_msg == response)
 128:Src/main.c    ****     {
 129:Src/main.c    ****       /* Turn On LED_Green */
 130:Src/main.c    ****       HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);
 131:Src/main.c    ****     }
 132:Src/main.c    ****   else
 133:Src/main.c    ****     {
 134:Src/main.c    ****       /* Turn on LED_Blue */
 135:Src/main.c    ****       HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 136:Src/main.c    ****     }
 137:Src/main.c    ****   /* USER CODE END 2 */
 138:Src/main.c    **** 
 139:Src/main.c    ****   /* Infinite loop */
 140:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 141:Src/main.c    ****   while (1)
 142:Src/main.c    ****     {
 143:Src/main.c    ****     
 144:Src/main.c    ****       /* USER CODE END WHILE */
 145:Src/main.c    ****     
 146:Src/main.c    ****       /* USER CODE BEGIN 3 */
ARM GAS  /tmp/ccCzsxyr.s 			page 4


 147:Src/main.c    **** 
 148:Src/main.c    ****     }
 149:Src/main.c    ****   /* USER CODE END 3 */
 150:Src/main.c    **** 
 151:Src/main.c    **** }
 152:Src/main.c    **** 
 153:Src/main.c    **** /** System Clock Configuration
 154:Src/main.c    ****  */
 155:Src/main.c    **** void SystemClock_Config(void)
 156:Src/main.c    **** {
 157:Src/main.c    **** 
 158:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 159:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 160:Src/main.c    **** 
 161:Src/main.c    ****   /**Configure the main internal regulator output voltage 
 162:Src/main.c    ****    */
 163:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 164:Src/main.c    **** 
 165:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 166:Src/main.c    **** 
 167:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 168:Src/main.c    ****    */
 169:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 170:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 171:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 172:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 173:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 174:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 175:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 176:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 177:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 178:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 179:Src/main.c    ****     {
 180:Src/main.c    ****       _Error_Handler(__FILE__, __LINE__);
 181:Src/main.c    ****     }
 182:Src/main.c    **** 
 183:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 184:Src/main.c    ****    */
 185:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 186:Src/main.c    ****     |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 187:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 188:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 189:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 190:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 191:Src/main.c    **** 
 192:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 193:Src/main.c    ****     {
 194:Src/main.c    ****       _Error_Handler(__FILE__, __LINE__);
 195:Src/main.c    ****     }
 196:Src/main.c    **** 
 197:Src/main.c    ****   /**Configure the Systick interrupt time 
 198:Src/main.c    ****    */
 199:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 200:Src/main.c    **** 
 201:Src/main.c    ****   /**Configure the Systick 
 202:Src/main.c    ****    */
 203:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
ARM GAS  /tmp/ccCzsxyr.s 			page 5


 204:Src/main.c    **** 
 205:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 206:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 207:Src/main.c    **** }
 208:Src/main.c    **** 
 209:Src/main.c    **** /* TIM4 init function */
 210:Src/main.c    **** static void MX_TIM4_Init(void)
 211:Src/main.c    **** {
 212:Src/main.c    **** 
 213:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 214:Src/main.c    ****   TIM_IC_InitTypeDef sConfigIC;
 215:Src/main.c    **** 
 216:Src/main.c    ****   htim4.Instance = TIM4;
 217:Src/main.c    ****   htim4.Init.Prescaler = 0;
 218:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 219:Src/main.c    ****   htim4.Init.Period = 0xFFFF;
 220:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 221:Src/main.c    ****   if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 222:Src/main.c    ****     {
 223:Src/main.c    ****       _Error_Handler(__FILE__, __LINE__);
 224:Src/main.c    ****     }
 225:Src/main.c    **** 
 226:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 227:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 228:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 229:Src/main.c    ****     {
 230:Src/main.c    ****       _Error_Handler(__FILE__, __LINE__);
 231:Src/main.c    ****     }
 232:Src/main.c    **** 
 233:Src/main.c    ****   sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 234:Src/main.c    ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 235:Src/main.c    ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 236:Src/main.c    ****   sConfigIC.ICFilter = 0;
 237:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 238:Src/main.c    ****     {
 239:Src/main.c    ****       _Error_Handler(__FILE__, __LINE__);
 240:Src/main.c    ****     }
 241:Src/main.c    **** 
 242:Src/main.c    **** }
 243:Src/main.c    **** 
 244:Src/main.c    **** /** Configure pins as 
 245:Src/main.c    ****  * Analog 
 246:Src/main.c    ****  * Input 
 247:Src/main.c    ****  * Output
 248:Src/main.c    ****  * EVENT_OUT
 249:Src/main.c    ****  * EXTI
 250:Src/main.c    ****  */
 251:Src/main.c    **** static void MX_GPIO_Init(void)
 252:Src/main.c    **** {
 253:Src/main.c    **** 
 254:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 255:Src/main.c    **** 
 256:Src/main.c    ****   /* GPIO Ports Clock Enable */
 257:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
 258:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 259:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 260:Src/main.c    **** 
ARM GAS  /tmp/ccCzsxyr.s 			page 6


 261:Src/main.c    ****   /*Configure GPIO pin Output Level */
 262:Src/main.c    ****   HAL_GPIO_WritePin(GPIOF, LED_Green_Pin|LED_Blue_Pin|LED_Yellow_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 263:Src/main.c    **** 
 264:Src/main.c    ****   /*Configure GPIO pins : LED_Green_Pin LED_Blue_Pin LED_Yellow_Pin LED_Red_Pin */
 265:Src/main.c    ****   GPIO_InitStruct.Pin = LED_Green_Pin|LED_Blue_Pin|LED_Yellow_Pin|LED_Red_Pin;
 266:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 267:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 268:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 269:Src/main.c    ****   HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 270:Src/main.c    **** 
 271:Src/main.c    ****   /*Configure GPIO pin : WKUP_BUTTON_Pin */
 272:Src/main.c    ****   GPIO_InitStruct.Pin = WKUP_BUTTON_Pin;
 273:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 274:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 275:Src/main.c    ****   HAL_GPIO_Init(WKUP_BUTTON_GPIO_Port, &GPIO_InitStruct);
 276:Src/main.c    **** 
 277:Src/main.c    ****   /* EXTI interrupt init*/
 278:Src/main.c    ****   HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 279:Src/main.c    ****   HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 280:Src/main.c    **** 
 281:Src/main.c    **** }
 282:Src/main.c    **** 
 283:Src/main.c    **** /* USER CODE BEGIN 4 */
 284:Src/main.c    **** /* Manchester Rx Function */
 285:Src/main.c    **** 
 286:Src/main.c    **** unsigned char Manch_Rx(unsigned char* rx_msg)
 287:Src/main.c    **** {
 288:Src/main.c    ****   unsigned char Current_bit = 0;
 289:Src/main.c    ****   unsigned char Next_bit = 0;
 290:Src/main.c    ****   unsigned char bit_mask = 0x80;
 291:Src/main.c    ****   unsigned char rx_bits = 0;
 292:Src/main.c    ****   while (bit_mask)
 293:Src/main.c    ****     {
 294:Src/main.c    ****       
 295:Src/main.c    ****       /* Wait till both the data is in synchronization */
 296:Src/main.c    ****       while (!((uwDiffCapture < (2*T-Delta_T)) && (uwDiffCapture > (2*T+Delta_T))))
 297:Src/main.c    **** 	{
 298:Src/main.c    **** 	  HAL_TIM_IC_CaptureCallback(&htim4);
 299:Src/main.c    **** 	}
 300:Src/main.c    ****       /* Store this value as Current_bit when the data is in sync */
 301:Src/main.c    ****       if((HAL_GPIO_ReadPin(TIM_4_3_GPIO_Port, TIM_4_3_Pin)) == GPIO_PIN_SET)
 302:Src/main.c    **** 	{
 303:Src/main.c    **** 	  Current_bit = 1;
 304:Src/main.c    **** 	}
 305:Src/main.c    ****       else if((HAL_GPIO_ReadPin(TIM_4_3_GPIO_Port,TIM_4_3_Pin)) == GPIO_PIN_RESET)
 306:Src/main.c    **** 	{
 307:Src/main.c    **** 	  Current_bit = 0;
 308:Src/main.c    **** 	}
 309:Src/main.c    ****       HAL_TIM_IC_CaptureCallback(&htim4);
 310:Src/main.c    ****       if((uwDiffCapture > (T-Delta_T)) && (uwDiffCapture < (T-Delta_T)))
 311:Src/main.c    **** 	{
 312:Src/main.c    **** 	  HAL_TIM_IC_CaptureCallback(&htim4);
 313:Src/main.c    **** 	  if((uwDiffCapture > (T-Delta_T)) && (uwDiffCapture < (T-Delta_T)))
 314:Src/main.c    **** 	    {
 315:Src/main.c    **** 	      Next_bit = Current_bit;
 316:Src/main.c    **** 	    }
 317:Src/main.c    **** 	  else
ARM GAS  /tmp/ccCzsxyr.s 			page 7


 318:Src/main.c    **** 	    {
 319:Src/main.c    **** 	      Manch_Rx_Error();
 320:Src/main.c    **** 	    }
 321:Src/main.c    **** 	}
 322:Src/main.c    ****       else if((uwDiffCapture > (2*T-Delta_T)) && (uwDiffCapture < (2*T-Delta_T)))
 323:Src/main.c    **** 	{
 324:Src/main.c    **** 	  Next_bit = ~ Current_bit;
 325:Src/main.c    **** 	}
 326:Src/main.c    ****       else
 327:Src/main.c    **** 	{
 328:Src/main.c    **** 	  Manch_Rx_Error();
 329:Src/main.c    **** 	}
 330:Src/main.c    ****       rx_msg[rx_bits] = Next_bit;
 331:Src/main.c    ****       rx_bits++;
 332:Src/main.c    ****       bit_mask = bit_mask >> 1;
 333:Src/main.c    ****     }
 334:Src/main.c    ****   
 335:Src/main.c    ****   return *rx_msg;
 336:Src/main.c    **** }
 337:Src/main.c    **** 
 338:Src/main.c    **** void Manch_Rx_Error(void)
 339:Src/main.c    **** {
  27              		.loc 1 339 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 08B5     		push	{r3, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
 340:Src/main.c    ****   /* Blink Red LED */
 341:Src/main.c    ****   HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
  36              		.loc 1 341 0
  37 0002 0122     		movs	r2, #1
  38 0004 2021     		movs	r1, #32
  39 0006 0248     		ldr	r0, .L3
  40 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
  41              	.LVL0:
  42 000c 08BD     		pop	{r3, pc}
  43              	.L4:
  44 000e 00BF     		.align	2
  45              	.L3:
  46 0010 00140240 		.word	1073878016
  47              		.cfi_endproc
  48              	.LFE129:
  50              		.section	.text.MX_GPIO_Init,"ax",%progbits
  51              		.align	1
  52              		.syntax unified
  53              		.thumb
  54              		.thumb_func
  55              		.fpu fpv4-sp-d16
  57              	MX_GPIO_Init:
  58              	.LFB127:
 252:Src/main.c    **** 
  59              		.loc 1 252 0
  60              		.cfi_startproc
ARM GAS  /tmp/ccCzsxyr.s 			page 8


  61              		@ args = 0, pretend = 0, frame = 32
  62              		@ frame_needed = 0, uses_anonymous_args = 0
  63 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  64              	.LCFI1:
  65              		.cfi_def_cfa_offset 20
  66              		.cfi_offset 4, -20
  67              		.cfi_offset 5, -16
  68              		.cfi_offset 6, -12
  69              		.cfi_offset 7, -8
  70              		.cfi_offset 14, -4
  71 0002 89B0     		sub	sp, sp, #36
  72              	.LCFI2:
  73              		.cfi_def_cfa_offset 56
  74              	.LBB2:
 257:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  75              		.loc 1 257 0
  76 0004 0024     		movs	r4, #0
  77 0006 0094     		str	r4, [sp]
  78 0008 204B     		ldr	r3, .L7
  79 000a 1A6B     		ldr	r2, [r3, #48]
  80 000c 42F02002 		orr	r2, r2, #32
  81 0010 1A63     		str	r2, [r3, #48]
  82 0012 1A6B     		ldr	r2, [r3, #48]
  83 0014 02F02002 		and	r2, r2, #32
  84 0018 0092     		str	r2, [sp]
  85 001a 009A     		ldr	r2, [sp]
  86              	.LBE2:
  87              	.LBB3:
 258:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  88              		.loc 1 258 0
  89 001c 0194     		str	r4, [sp, #4]
  90 001e 1A6B     		ldr	r2, [r3, #48]
  91 0020 42F00102 		orr	r2, r2, #1
  92 0024 1A63     		str	r2, [r3, #48]
  93 0026 1A6B     		ldr	r2, [r3, #48]
  94 0028 02F00102 		and	r2, r2, #1
  95 002c 0192     		str	r2, [sp, #4]
  96 002e 019A     		ldr	r2, [sp, #4]
  97              	.LBE3:
  98              	.LBB4:
 259:Src/main.c    **** 
  99              		.loc 1 259 0
 100 0030 0294     		str	r4, [sp, #8]
 101 0032 1A6B     		ldr	r2, [r3, #48]
 102 0034 42F00802 		orr	r2, r2, #8
 103 0038 1A63     		str	r2, [r3, #48]
 104 003a 1B6B     		ldr	r3, [r3, #48]
 105 003c 03F00803 		and	r3, r3, #8
 106 0040 0293     		str	r3, [sp, #8]
 107 0042 029B     		ldr	r3, [sp, #8]
 108              	.LBE4:
 262:Src/main.c    **** 
 109              		.loc 1 262 0
 110 0044 124F     		ldr	r7, .L7+4
 111 0046 2246     		mov	r2, r4
 112 0048 3C21     		movs	r1, #60
 113 004a 3846     		mov	r0, r7
ARM GAS  /tmp/ccCzsxyr.s 			page 9


 114 004c FFF7FEFF 		bl	HAL_GPIO_WritePin
 115              	.LVL1:
 265:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 116              		.loc 1 265 0
 117 0050 3C23     		movs	r3, #60
 118 0052 0393     		str	r3, [sp, #12]
 266:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 119              		.loc 1 266 0
 120 0054 0126     		movs	r6, #1
 121 0056 0496     		str	r6, [sp, #16]
 267:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 122              		.loc 1 267 0
 123 0058 0225     		movs	r5, #2
 124 005a 0595     		str	r5, [sp, #20]
 268:Src/main.c    ****   HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 125              		.loc 1 268 0
 126 005c 0694     		str	r4, [sp, #24]
 269:Src/main.c    **** 
 127              		.loc 1 269 0
 128 005e 03A9     		add	r1, sp, #12
 129 0060 3846     		mov	r0, r7
 130 0062 FFF7FEFF 		bl	HAL_GPIO_Init
 131              	.LVL2:
 272:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 132              		.loc 1 272 0
 133 0066 0396     		str	r6, [sp, #12]
 273:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 134              		.loc 1 273 0
 135 0068 0A4B     		ldr	r3, .L7+8
 136 006a 0493     		str	r3, [sp, #16]
 274:Src/main.c    ****   HAL_GPIO_Init(WKUP_BUTTON_GPIO_Port, &GPIO_InitStruct);
 137              		.loc 1 274 0
 138 006c 0595     		str	r5, [sp, #20]
 275:Src/main.c    **** 
 139              		.loc 1 275 0
 140 006e 03A9     		add	r1, sp, #12
 141 0070 0948     		ldr	r0, .L7+12
 142 0072 FFF7FEFF 		bl	HAL_GPIO_Init
 143              	.LVL3:
 278:Src/main.c    ****   HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 144              		.loc 1 278 0
 145 0076 2246     		mov	r2, r4
 146 0078 2146     		mov	r1, r4
 147 007a 0620     		movs	r0, #6
 148 007c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 149              	.LVL4:
 279:Src/main.c    **** 
 150              		.loc 1 279 0
 151 0080 0620     		movs	r0, #6
 152 0082 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 153              	.LVL5:
 281:Src/main.c    **** 
 154              		.loc 1 281 0
 155 0086 09B0     		add	sp, sp, #36
 156              	.LCFI3:
 157              		.cfi_def_cfa_offset 20
 158              		@ sp needed
ARM GAS  /tmp/ccCzsxyr.s 			page 10


 159 0088 F0BD     		pop	{r4, r5, r6, r7, pc}
 160              	.L8:
 161 008a 00BF     		.align	2
 162              	.L7:
 163 008c 00380240 		.word	1073887232
 164 0090 00140240 		.word	1073878016
 165 0094 00001110 		.word	269549568
 166 0098 00000240 		.word	1073872896
 167              		.cfi_endproc
 168              	.LFE127:
 170              		.section	.text.HAL_TIM_IC_CaptureCallback,"ax",%progbits
 171              		.align	1
 172              		.global	HAL_TIM_IC_CaptureCallback
 173              		.syntax unified
 174              		.thumb
 175              		.thumb_func
 176              		.fpu fpv4-sp-d16
 178              	HAL_TIM_IC_CaptureCallback:
 179              	.LFB130:
 342:Src/main.c    **** }
 343:Src/main.c    **** 
 344:Src/main.c    **** /**
 345:Src/main.c    ****  * @brief  Conversion complete callback in non blocking mode 
 346:Src/main.c    ****  * @param  htim: TIM handle
 347:Src/main.c    ****  * @retval None
 348:Src/main.c    ****  */
 349:Src/main.c    **** void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 350:Src/main.c    **** {
 180              		.loc 1 350 0
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 0
 183              		@ frame_needed = 0, uses_anonymous_args = 0
 184              	.LVL6:
 185 0000 08B5     		push	{r3, lr}
 186              	.LCFI4:
 187              		.cfi_def_cfa_offset 8
 188              		.cfi_offset 3, -8
 189              		.cfi_offset 14, -4
 351:Src/main.c    ****   if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 190              		.loc 1 351 0
 191 0002 037E     		ldrb	r3, [r0, #24]	@ zero_extendqisi2
 192 0004 042B     		cmp	r3, #4
 193 0006 00D0     		beq	.L15
 194              	.LVL7:
 195              	.L9:
 196 0008 08BD     		pop	{r3, pc}
 197              	.LVL8:
 198              	.L15:
 352:Src/main.c    ****     {
 353:Src/main.c    ****       if(uhCaptureIndex == 0)
 199              		.loc 1 353 0
 200 000a 124B     		ldr	r3, .L17
 201 000c 1B88     		ldrh	r3, [r3]
 202 000e 8BB1     		cbz	r3, .L16
 354:Src/main.c    **** 	{
 355:Src/main.c    **** 	  /* Get the 1st Input Capture value */
 356:Src/main.c    **** 	  uwIC3Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
ARM GAS  /tmp/ccCzsxyr.s 			page 11


 357:Src/main.c    **** 	  uhCaptureIndex = 1;
 358:Src/main.c    **** 	}
 359:Src/main.c    ****       else if(uhCaptureIndex == 1)
 203              		.loc 1 359 0
 204 0010 012B     		cmp	r3, #1
 205 0012 F9D1     		bne	.L9
 360:Src/main.c    **** 	{
 361:Src/main.c    **** 	  /* Get the 2nd Input Capture value */
 362:Src/main.c    **** 	  uwIC3Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); 
 206              		.loc 1 362 0
 207 0014 0821     		movs	r1, #8
 208 0016 FFF7FEFF 		bl	HAL_TIM_ReadCapturedValue
 209              	.LVL9:
 210 001a 0F4B     		ldr	r3, .L17+4
 211 001c 1860     		str	r0, [r3]
 363:Src/main.c    ****       
 364:Src/main.c    **** 	  /* Capture computation */
 365:Src/main.c    **** 	  if (uwIC3Value2 > uwIC3Value1)
 212              		.loc 1 365 0
 213 001e 0F4B     		ldr	r3, .L17+8
 214 0020 1B68     		ldr	r3, [r3]
 215 0022 9842     		cmp	r0, r3
 216 0024 0FD9     		bls	.L12
 366:Src/main.c    **** 	    {
 367:Src/main.c    **** 	      uwDiffCapture = (uwIC3Value2 - uwIC3Value1); 
 217              		.loc 1 367 0
 218 0026 C01A     		subs	r0, r0, r3
 219 0028 0D4B     		ldr	r3, .L17+12
 220 002a 1860     		str	r0, [r3]
 221              	.L13:
 368:Src/main.c    **** 	    }
 369:Src/main.c    **** 	  else  /* (uwIC2Value2 <= uwIC2Value1) */
 370:Src/main.c    **** 	    {
 371:Src/main.c    **** 	      uwDiffCapture = ((0xFFFF - uwIC3Value1) + uwIC3Value2); 
 372:Src/main.c    **** 	    }
 373:Src/main.c    **** 
 374:Src/main.c    **** 	  /* /\* Frequency computation: for this example TIMx (TIM1) is clocked by */
 375:Src/main.c    **** 	  /*    2xAPB2Clk *\/       */
 376:Src/main.c    **** 	  /* uwFrequency = (2*HAL_RCC_GetPCLK1Freq()) / uwDiffCapture; */
 377:Src/main.c    **** 	  uhCaptureIndex = 0;
 222              		.loc 1 377 0
 223 002c 0022     		movs	r2, #0
 224 002e 094B     		ldr	r3, .L17
 225 0030 1A80     		strh	r2, [r3]	@ movhi
 378:Src/main.c    ****       
 379:Src/main.c    **** 	}
 380:Src/main.c    ****     }
 381:Src/main.c    **** }
 226              		.loc 1 381 0
 227 0032 E9E7     		b	.L9
 228              	.LVL10:
 229              	.L16:
 356:Src/main.c    **** 	  uhCaptureIndex = 1;
 230              		.loc 1 356 0
 231 0034 0821     		movs	r1, #8
 232 0036 FFF7FEFF 		bl	HAL_TIM_ReadCapturedValue
 233              	.LVL11:
ARM GAS  /tmp/ccCzsxyr.s 			page 12


 234 003a 084B     		ldr	r3, .L17+8
 235 003c 1860     		str	r0, [r3]
 357:Src/main.c    **** 	}
 236              		.loc 1 357 0
 237 003e 0122     		movs	r2, #1
 238 0040 044B     		ldr	r3, .L17
 239 0042 1A80     		strh	r2, [r3]	@ movhi
 240 0044 08BD     		pop	{r3, pc}
 241              	.L12:
 371:Src/main.c    **** 	    }
 242              		.loc 1 371 0
 243 0046 C01A     		subs	r0, r0, r3
 244 0048 00F57F40 		add	r0, r0, #65280
 245 004c FF30     		adds	r0, r0, #255
 246 004e 044B     		ldr	r3, .L17+12
 247 0050 1860     		str	r0, [r3]
 248 0052 EBE7     		b	.L13
 249              	.L18:
 250              		.align	2
 251              	.L17:
 252 0054 00000000 		.word	.LANCHOR0
 253 0058 00000000 		.word	.LANCHOR2
 254 005c 00000000 		.word	.LANCHOR1
 255 0060 00000000 		.word	.LANCHOR3
 256              		.cfi_endproc
 257              	.LFE130:
 259              		.section	.text.Manch_Rx,"ax",%progbits
 260              		.align	1
 261              		.syntax unified
 262              		.thumb
 263              		.thumb_func
 264              		.fpu fpv4-sp-d16
 266              	Manch_Rx:
 267              	.LFB128:
 287:Src/main.c    ****   unsigned char Current_bit = 0;
 268              		.loc 1 287 0
 269              		.cfi_startproc
 270              		@ args = 0, pretend = 0, frame = 0
 271              		@ frame_needed = 0, uses_anonymous_args = 0
 272              	.LVL12:
 273 0000 08B5     		push	{r3, lr}
 274              	.LCFI5:
 275              		.cfi_def_cfa_offset 8
 276              		.cfi_offset 3, -8
 277              		.cfi_offset 14, -4
 278              	.LVL13:
 279              	.L20:
 298:Src/main.c    **** 	}
 280              		.loc 1 298 0
 281 0002 0248     		ldr	r0, .L22
 282 0004 FFF7FEFF 		bl	HAL_TIM_IC_CaptureCallback
 283              	.LVL14:
 284 0008 FBE7     		b	.L20
 285              	.L23:
 286 000a 00BF     		.align	2
 287              	.L22:
 288 000c 00000000 		.word	htim4
ARM GAS  /tmp/ccCzsxyr.s 			page 13


 289              		.cfi_endproc
 290              	.LFE128:
 292              		.section	.text._Error_Handler,"ax",%progbits
 293              		.align	1
 294              		.global	_Error_Handler
 295              		.syntax unified
 296              		.thumb
 297              		.thumb_func
 298              		.fpu fpv4-sp-d16
 300              	_Error_Handler:
 301              	.LFB131:
 382:Src/main.c    **** 
 383:Src/main.c    **** /* USER CODE END 4 */
 384:Src/main.c    **** 
 385:Src/main.c    **** /**
 386:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 387:Src/main.c    ****  * @param  None
 388:Src/main.c    ****  * @retval None
 389:Src/main.c    ****  */
 390:Src/main.c    **** void _Error_Handler(char * file, int line)
 391:Src/main.c    **** {
 302              		.loc 1 391 0
 303              		.cfi_startproc
 304              		@ Volatile: function does not return.
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 307              	.LVL15:
 308 0000 08B5     		push	{r3, lr}
 309              	.LCFI6:
 310              		.cfi_def_cfa_offset 8
 311              		.cfi_offset 3, -8
 312              		.cfi_offset 14, -4
 392:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 393:Src/main.c    **** 
 394:Src/main.c    ****   /* Turn on LED Yellow */
 395:Src/main.c    ****   HAL_GPIO_WritePin(LED_Yellow_GPIO_Port, LED_Yellow_Pin, GPIO_PIN_SET);
 313              		.loc 1 395 0
 314 0002 0122     		movs	r2, #1
 315 0004 1021     		movs	r1, #16
 316              	.LVL16:
 317 0006 0248     		ldr	r0, .L27
 318              	.LVL17:
 319 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 320              	.LVL18:
 321              	.L25:
 322 000c FEE7     		b	.L25
 323              	.L28:
 324 000e 00BF     		.align	2
 325              	.L27:
 326 0010 00140240 		.word	1073878016
 327              		.cfi_endproc
 328              	.LFE131:
 330              		.section	.text.MX_TIM4_Init,"ax",%progbits
 331              		.align	1
 332              		.syntax unified
 333              		.thumb
 334              		.thumb_func
ARM GAS  /tmp/ccCzsxyr.s 			page 14


 335              		.fpu fpv4-sp-d16
 337              	MX_TIM4_Init:
 338              	.LFB126:
 211:Src/main.c    **** 
 339              		.loc 1 211 0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 24
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343 0000 00B5     		push	{lr}
 344              	.LCFI7:
 345              		.cfi_def_cfa_offset 4
 346              		.cfi_offset 14, -4
 347 0002 87B0     		sub	sp, sp, #28
 348              	.LCFI8:
 349              		.cfi_def_cfa_offset 32
 216:Src/main.c    ****   htim4.Init.Prescaler = 0;
 350              		.loc 1 216 0
 351 0004 1848     		ldr	r0, .L37
 352 0006 194B     		ldr	r3, .L37+4
 353 0008 0360     		str	r3, [r0]
 217:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 354              		.loc 1 217 0
 355 000a 0023     		movs	r3, #0
 356 000c 4360     		str	r3, [r0, #4]
 218:Src/main.c    ****   htim4.Init.Period = 0xFFFF;
 357              		.loc 1 218 0
 358 000e 8360     		str	r3, [r0, #8]
 219:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 359              		.loc 1 219 0
 360 0010 4FF6FF72 		movw	r2, #65535
 361 0014 C260     		str	r2, [r0, #12]
 220:Src/main.c    ****   if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 362              		.loc 1 220 0
 363 0016 0361     		str	r3, [r0, #16]
 221:Src/main.c    ****     {
 364              		.loc 1 221 0
 365 0018 FFF7FEFF 		bl	HAL_TIM_IC_Init
 366              	.LVL19:
 367 001c B8B9     		cbnz	r0, .L34
 226:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 368              		.loc 1 226 0
 369 001e 0023     		movs	r3, #0
 370 0020 0493     		str	r3, [sp, #16]
 227:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 371              		.loc 1 227 0
 372 0022 0593     		str	r3, [sp, #20]
 228:Src/main.c    ****     {
 373              		.loc 1 228 0
 374 0024 04A9     		add	r1, sp, #16
 375 0026 1048     		ldr	r0, .L37
 376 0028 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 377              	.LVL20:
 378 002c 98B9     		cbnz	r0, .L35
 233:Src/main.c    ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 379              		.loc 1 233 0
 380 002e 0A23     		movs	r3, #10
 381 0030 0093     		str	r3, [sp]
ARM GAS  /tmp/ccCzsxyr.s 			page 15


 234:Src/main.c    ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 382              		.loc 1 234 0
 383 0032 0123     		movs	r3, #1
 384 0034 0193     		str	r3, [sp, #4]
 235:Src/main.c    ****   sConfigIC.ICFilter = 0;
 385              		.loc 1 235 0
 386 0036 0023     		movs	r3, #0
 387 0038 0293     		str	r3, [sp, #8]
 236:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 388              		.loc 1 236 0
 389 003a 0393     		str	r3, [sp, #12]
 237:Src/main.c    ****     {
 390              		.loc 1 237 0
 391 003c 0822     		movs	r2, #8
 392 003e 6946     		mov	r1, sp
 393 0040 0948     		ldr	r0, .L37
 394 0042 FFF7FEFF 		bl	HAL_TIM_IC_ConfigChannel
 395              	.LVL21:
 396 0046 50B9     		cbnz	r0, .L36
 242:Src/main.c    **** 
 397              		.loc 1 242 0
 398 0048 07B0     		add	sp, sp, #28
 399              	.LCFI9:
 400              		.cfi_remember_state
 401              		.cfi_def_cfa_offset 4
 402              		@ sp needed
 403 004a 5DF804FB 		ldr	pc, [sp], #4
 404              	.L34:
 405              	.LCFI10:
 406              		.cfi_restore_state
 223:Src/main.c    ****     }
 407              		.loc 1 223 0
 408 004e DF21     		movs	r1, #223
 409 0050 0748     		ldr	r0, .L37+8
 410 0052 FFF7FEFF 		bl	_Error_Handler
 411              	.LVL22:
 412              	.L35:
 230:Src/main.c    ****     }
 413              		.loc 1 230 0
 414 0056 E621     		movs	r1, #230
 415 0058 0548     		ldr	r0, .L37+8
 416 005a FFF7FEFF 		bl	_Error_Handler
 417              	.LVL23:
 418              	.L36:
 239:Src/main.c    ****     }
 419              		.loc 1 239 0
 420 005e EF21     		movs	r1, #239
 421 0060 0348     		ldr	r0, .L37+8
 422 0062 FFF7FEFF 		bl	_Error_Handler
 423              	.LVL24:
 424              	.L38:
 425 0066 00BF     		.align	2
 426              	.L37:
 427 0068 00000000 		.word	htim4
 428 006c 00080040 		.word	1073743872
 429 0070 00000000 		.word	.LC0
 430              		.cfi_endproc
ARM GAS  /tmp/ccCzsxyr.s 			page 16


 431              	.LFE126:
 433              		.section	.text.SystemClock_Config,"ax",%progbits
 434              		.align	1
 435              		.global	SystemClock_Config
 436              		.syntax unified
 437              		.thumb
 438              		.thumb_func
 439              		.fpu fpv4-sp-d16
 441              	SystemClock_Config:
 442              	.LFB125:
 156:Src/main.c    **** 
 443              		.loc 1 156 0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 80
 446              		@ frame_needed = 0, uses_anonymous_args = 0
 447 0000 00B5     		push	{lr}
 448              	.LCFI11:
 449              		.cfi_def_cfa_offset 4
 450              		.cfi_offset 14, -4
 451 0002 95B0     		sub	sp, sp, #84
 452              	.LCFI12:
 453              		.cfi_def_cfa_offset 88
 454              	.LBB5:
 163:Src/main.c    **** 
 455              		.loc 1 163 0
 456 0004 0023     		movs	r3, #0
 457 0006 0193     		str	r3, [sp, #4]
 458 0008 284A     		ldr	r2, .L45
 459 000a 116C     		ldr	r1, [r2, #64]
 460 000c 41F08051 		orr	r1, r1, #268435456
 461 0010 1164     		str	r1, [r2, #64]
 462 0012 126C     		ldr	r2, [r2, #64]
 463 0014 02F08052 		and	r2, r2, #268435456
 464 0018 0192     		str	r2, [sp, #4]
 465 001a 019A     		ldr	r2, [sp, #4]
 466              	.LBE5:
 467              	.LBB6:
 165:Src/main.c    **** 
 468              		.loc 1 165 0
 469 001c 0293     		str	r3, [sp, #8]
 470 001e 244A     		ldr	r2, .L45+4
 471 0020 1168     		ldr	r1, [r2]
 472 0022 41F48041 		orr	r1, r1, #16384
 473 0026 1160     		str	r1, [r2]
 474 0028 1268     		ldr	r2, [r2]
 475 002a 02F48042 		and	r2, r2, #16384
 476 002e 0292     		str	r2, [sp, #8]
 477 0030 029A     		ldr	r2, [sp, #8]
 478              	.LBE6:
 169:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 479              		.loc 1 169 0
 480 0032 0221     		movs	r1, #2
 481 0034 0891     		str	r1, [sp, #32]
 170:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 482              		.loc 1 170 0
 483 0036 0122     		movs	r2, #1
 484 0038 0B92     		str	r2, [sp, #44]
ARM GAS  /tmp/ccCzsxyr.s 			page 17


 171:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 485              		.loc 1 171 0
 486 003a 1022     		movs	r2, #16
 487 003c 0C92     		str	r2, [sp, #48]
 172:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 488              		.loc 1 172 0
 489 003e 0E91     		str	r1, [sp, #56]
 173:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 490              		.loc 1 173 0
 491 0040 0F93     		str	r3, [sp, #60]
 174:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 492              		.loc 1 174 0
 493 0042 1092     		str	r2, [sp, #64]
 175:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 494              		.loc 1 175 0
 495 0044 4FF4A873 		mov	r3, #336
 496 0048 1193     		str	r3, [sp, #68]
 176:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 497              		.loc 1 176 0
 498 004a 0423     		movs	r3, #4
 499 004c 1293     		str	r3, [sp, #72]
 177:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 500              		.loc 1 177 0
 501 004e 1393     		str	r3, [sp, #76]
 178:Src/main.c    ****     {
 502              		.loc 1 178 0
 503 0050 08A8     		add	r0, sp, #32
 504 0052 FFF7FEFF 		bl	HAL_RCC_OscConfig
 505              	.LVL25:
 506 0056 08BB     		cbnz	r0, .L43
 185:Src/main.c    ****     |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 507              		.loc 1 185 0
 508 0058 0F23     		movs	r3, #15
 509 005a 0393     		str	r3, [sp, #12]
 187:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 510              		.loc 1 187 0
 511 005c 0221     		movs	r1, #2
 512 005e 0491     		str	r1, [sp, #16]
 188:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 513              		.loc 1 188 0
 514 0060 0023     		movs	r3, #0
 515 0062 0593     		str	r3, [sp, #20]
 189:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 516              		.loc 1 189 0
 517 0064 4FF48052 		mov	r2, #4096
 518 0068 0692     		str	r2, [sp, #24]
 190:Src/main.c    **** 
 519              		.loc 1 190 0
 520 006a 0793     		str	r3, [sp, #28]
 192:Src/main.c    ****     {
 521              		.loc 1 192 0
 522 006c 03A8     		add	r0, sp, #12
 523 006e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 524              	.LVL26:
 525 0072 B8B9     		cbnz	r0, .L44
 199:Src/main.c    **** 
 526              		.loc 1 199 0
ARM GAS  /tmp/ccCzsxyr.s 			page 18


 527 0074 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 528              	.LVL27:
 529 0078 0E4B     		ldr	r3, .L45+8
 530 007a A3FB0030 		umull	r3, r0, r3, r0
 531 007e 8009     		lsrs	r0, r0, #6
 532 0080 FFF7FEFF 		bl	HAL_SYSTICK_Config
 533              	.LVL28:
 203:Src/main.c    **** 
 534              		.loc 1 203 0
 535 0084 0420     		movs	r0, #4
 536 0086 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 537              	.LVL29:
 206:Src/main.c    **** }
 538              		.loc 1 206 0
 539 008a 0022     		movs	r2, #0
 540 008c 1146     		mov	r1, r2
 541 008e 4FF0FF30 		mov	r0, #-1
 542 0092 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 543              	.LVL30:
 207:Src/main.c    **** 
 544              		.loc 1 207 0
 545 0096 15B0     		add	sp, sp, #84
 546              	.LCFI13:
 547              		.cfi_remember_state
 548              		.cfi_def_cfa_offset 4
 549              		@ sp needed
 550 0098 5DF804FB 		ldr	pc, [sp], #4
 551              	.L43:
 552              	.LCFI14:
 553              		.cfi_restore_state
 180:Src/main.c    ****     }
 554              		.loc 1 180 0
 555 009c B421     		movs	r1, #180
 556 009e 0648     		ldr	r0, .L45+12
 557 00a0 FFF7FEFF 		bl	_Error_Handler
 558              	.LVL31:
 559              	.L44:
 194:Src/main.c    ****     }
 560              		.loc 1 194 0
 561 00a4 C221     		movs	r1, #194
 562 00a6 0448     		ldr	r0, .L45+12
 563 00a8 FFF7FEFF 		bl	_Error_Handler
 564              	.LVL32:
 565              	.L46:
 566              		.align	2
 567              	.L45:
 568 00ac 00380240 		.word	1073887232
 569 00b0 00700040 		.word	1073770496
 570 00b4 D34D6210 		.word	274877907
 571 00b8 00000000 		.word	.LC0
 572              		.cfi_endproc
 573              	.LFE125:
 575              		.section	.text.main,"ax",%progbits
 576              		.align	1
 577              		.global	main
 578              		.syntax unified
 579              		.thumb
ARM GAS  /tmp/ccCzsxyr.s 			page 19


 580              		.thumb_func
 581              		.fpu fpv4-sp-d16
 583              	main:
 584              	.LFB124:
  92:Src/main.c    **** 
 585              		.loc 1 92 0
 586              		.cfi_startproc
 587              		@ Volatile: function does not return.
 588              		@ args = 0, pretend = 0, frame = 0
 589              		@ frame_needed = 0, uses_anonymous_args = 0
 590 0000 08B5     		push	{r3, lr}
 591              	.LCFI15:
 592              		.cfi_def_cfa_offset 8
 593              		.cfi_offset 3, -8
 594              		.cfi_offset 14, -4
 101:Src/main.c    **** 
 595              		.loc 1 101 0
 596 0002 FFF7FEFF 		bl	HAL_Init
 597              	.LVL33:
 108:Src/main.c    **** 
 598              		.loc 1 108 0
 599 0006 FFF7FEFF 		bl	SystemClock_Config
 600              	.LVL34:
 115:Src/main.c    ****   MX_TIM4_Init();
 601              		.loc 1 115 0
 602 000a FFF7FEFF 		bl	MX_GPIO_Init
 603              	.LVL35:
 116:Src/main.c    **** 
 604              		.loc 1 116 0
 605 000e FFF7FEFF 		bl	MX_TIM4_Init
 606              	.LVL36:
 120:Src/main.c    ****     {
 607              		.loc 1 120 0
 608 0012 0821     		movs	r1, #8
 609 0014 0548     		ldr	r0, .L50
 610 0016 FFF7FEFF 		bl	HAL_TIM_IC_Start_IT
 611              	.LVL37:
 612 001a 18B1     		cbz	r0, .L48
 122:Src/main.c    ****     }
 613              		.loc 1 122 0
 614 001c 7A21     		movs	r1, #122
 615 001e 0448     		ldr	r0, .L50+4
 616 0020 FFF7FEFF 		bl	_Error_Handler
 617              	.LVL38:
 618              	.L48:
 126:Src/main.c    ****   if(*rx_msg == response)
 619              		.loc 1 126 0
 620 0024 0348     		ldr	r0, .L50+8
 621 0026 FFF7FEFF 		bl	Manch_Rx
 622              	.LVL39:
 623              	.L51:
 624 002a 00BF     		.align	2
 625              	.L50:
 626 002c 00000000 		.word	htim4
 627 0030 00000000 		.word	.LC0
 628 0034 00000000 		.word	.LANCHOR4
 629              		.cfi_endproc
ARM GAS  /tmp/ccCzsxyr.s 			page 20


 630              	.LFE124:
 632              		.section	.text.assert_failed,"ax",%progbits
 633              		.align	1
 634              		.global	assert_failed
 635              		.syntax unified
 636              		.thumb
 637              		.thumb_func
 638              		.fpu fpv4-sp-d16
 640              	assert_failed:
 641              	.LFB132:
 396:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 397:Src/main.c    ****   while(1) 
 398:Src/main.c    ****     {
 399:Src/main.c    ****     }
 400:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */ 
 401:Src/main.c    **** }
 402:Src/main.c    **** 
 403:Src/main.c    **** #ifdef USE_FULL_ASSERT
 404:Src/main.c    **** 
 405:Src/main.c    **** /**
 406:Src/main.c    ****  * @brief Reports the name of the source file and the source line number
 407:Src/main.c    ****  * where the assert_param error has occurred.
 408:Src/main.c    ****  * @param file: pointer to the source file name
 409:Src/main.c    ****  * @param line: assert_param error line source number
 410:Src/main.c    ****  * @retval None
 411:Src/main.c    ****  */
 412:Src/main.c    **** void assert_failed(uint8_t* file, uint32_t line)
 413:Src/main.c    **** {
 642              		.loc 1 413 0
 643              		.cfi_startproc
 644              		@ args = 0, pretend = 0, frame = 0
 645              		@ frame_needed = 0, uses_anonymous_args = 0
 646              	.LVL40:
 647 0000 10B5     		push	{r4, lr}
 648              	.LCFI16:
 649              		.cfi_def_cfa_offset 8
 650              		.cfi_offset 4, -8
 651              		.cfi_offset 14, -4
 414:Src/main.c    ****   /* USER CODE BEGIN 6 */
 415:Src/main.c    ****   HAL_GPIO_WritePin(LED_Yellow_GPIO_Port, LED_Yellow_Pin, GPIO_PIN_SET);
 652              		.loc 1 415 0
 653 0002 064C     		ldr	r4, .L54
 654 0004 0122     		movs	r2, #1
 655 0006 1021     		movs	r1, #16
 656              	.LVL41:
 657 0008 2046     		mov	r0, r4
 658              	.LVL42:
 659 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 660              	.LVL43:
 416:Src/main.c    ****   HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 661              		.loc 1 416 0
 662 000e 0122     		movs	r2, #1
 663 0010 2021     		movs	r1, #32
 664 0012 2046     		mov	r0, r4
 665 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 666              	.LVL44:
 667 0018 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccCzsxyr.s 			page 21


 668              	.L55:
 669 001a 00BF     		.align	2
 670              	.L54:
 671 001c 00140240 		.word	1073878016
 672              		.cfi_endproc
 673              	.LFE132:
 675              		.global	uwFrequency
 676              		.global	uhCaptureIndex
 677              		.global	uwDiffCapture
 678              		.global	uwIC3Value2
 679              		.global	uwIC3Value1
 680              		.comm	htim4,60,4
 681              		.section	.bss.rx_msg,"aw",%nobits
 682              		.align	2
 683              		.set	.LANCHOR4,. + 0
 686              	rx_msg:
 687 0000 00000000 		.space	8
 687      00000000 
 688              		.section	.bss.uhCaptureIndex,"aw",%nobits
 689              		.align	1
 690              		.set	.LANCHOR0,. + 0
 693              	uhCaptureIndex:
 694 0000 0000     		.space	2
 695              		.section	.bss.uwDiffCapture,"aw",%nobits
 696              		.align	2
 697              		.set	.LANCHOR3,. + 0
 700              	uwDiffCapture:
 701 0000 00000000 		.space	4
 702              		.section	.bss.uwFrequency,"aw",%nobits
 703              		.align	2
 706              	uwFrequency:
 707 0000 00000000 		.space	4
 708              		.section	.bss.uwIC3Value1,"aw",%nobits
 709              		.align	2
 710              		.set	.LANCHOR1,. + 0
 713              	uwIC3Value1:
 714 0000 00000000 		.space	4
 715              		.section	.bss.uwIC3Value2,"aw",%nobits
 716              		.align	2
 717              		.set	.LANCHOR2,. + 0
 720              	uwIC3Value2:
 721 0000 00000000 		.space	4
 722              		.section	.rodata.MX_TIM4_Init.str1.4,"aMS",%progbits,1
 723              		.align	2
 724              	.LC0:
 725 0000 5372632F 		.ascii	"Src/main.c\000"
 725      6D61696E 
 725      2E6300
 726              		.text
 727              	.Letext0:
 728              		.file 2 "/home/saicharan/arm/arm-none-eabi/include/machine/_default_types.h"
 729              		.file 3 "/home/saicharan/arm/arm-none-eabi/include/stdint.h"
 730              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 731              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 732              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 733              		.file 7 "/home/saicharan/arm/arm-none-eabi/include/sys/lock.h"
 734              		.file 8 "/home/saicharan/arm/arm-none-eabi/include/sys/_types.h"
ARM GAS  /tmp/ccCzsxyr.s 			page 22


 735              		.file 9 "/home/saicharan/arm/lib/gcc/arm-none-eabi/6.3.0/include/stddef.h"
 736              		.file 10 "/home/saicharan/arm/arm-none-eabi/include/sys/reent.h"
 737              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 738              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 739              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 740              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 741              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 742              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 743              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 744              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 745              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccCzsxyr.s 			page 23


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccCzsxyr.s:18     .text.Manch_Rx_Error:0000000000000000 $t
     /tmp/ccCzsxyr.s:24     .text.Manch_Rx_Error:0000000000000000 Manch_Rx_Error
     /tmp/ccCzsxyr.s:46     .text.Manch_Rx_Error:0000000000000010 $d
     /tmp/ccCzsxyr.s:51     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccCzsxyr.s:57     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccCzsxyr.s:163    .text.MX_GPIO_Init:000000000000008c $d
     /tmp/ccCzsxyr.s:171    .text.HAL_TIM_IC_CaptureCallback:0000000000000000 $t
     /tmp/ccCzsxyr.s:178    .text.HAL_TIM_IC_CaptureCallback:0000000000000000 HAL_TIM_IC_CaptureCallback
     /tmp/ccCzsxyr.s:252    .text.HAL_TIM_IC_CaptureCallback:0000000000000054 $d
     /tmp/ccCzsxyr.s:260    .text.Manch_Rx:0000000000000000 $t
     /tmp/ccCzsxyr.s:266    .text.Manch_Rx:0000000000000000 Manch_Rx
     /tmp/ccCzsxyr.s:288    .text.Manch_Rx:000000000000000c $d
                            *COM*:000000000000003c htim4
     /tmp/ccCzsxyr.s:293    .text._Error_Handler:0000000000000000 $t
     /tmp/ccCzsxyr.s:300    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccCzsxyr.s:326    .text._Error_Handler:0000000000000010 $d
     /tmp/ccCzsxyr.s:331    .text.MX_TIM4_Init:0000000000000000 $t
     /tmp/ccCzsxyr.s:337    .text.MX_TIM4_Init:0000000000000000 MX_TIM4_Init
     /tmp/ccCzsxyr.s:427    .text.MX_TIM4_Init:0000000000000068 $d
     /tmp/ccCzsxyr.s:434    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccCzsxyr.s:441    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccCzsxyr.s:568    .text.SystemClock_Config:00000000000000ac $d
     /tmp/ccCzsxyr.s:576    .text.main:0000000000000000 $t
     /tmp/ccCzsxyr.s:583    .text.main:0000000000000000 main
     /tmp/ccCzsxyr.s:626    .text.main:000000000000002c $d
     /tmp/ccCzsxyr.s:633    .text.assert_failed:0000000000000000 $t
     /tmp/ccCzsxyr.s:640    .text.assert_failed:0000000000000000 assert_failed
     /tmp/ccCzsxyr.s:671    .text.assert_failed:000000000000001c $d
     /tmp/ccCzsxyr.s:706    .bss.uwFrequency:0000000000000000 uwFrequency
     /tmp/ccCzsxyr.s:693    .bss.uhCaptureIndex:0000000000000000 uhCaptureIndex
     /tmp/ccCzsxyr.s:700    .bss.uwDiffCapture:0000000000000000 uwDiffCapture
     /tmp/ccCzsxyr.s:720    .bss.uwIC3Value2:0000000000000000 uwIC3Value2
     /tmp/ccCzsxyr.s:713    .bss.uwIC3Value1:0000000000000000 uwIC3Value1
     /tmp/ccCzsxyr.s:682    .bss.rx_msg:0000000000000000 $d
     /tmp/ccCzsxyr.s:686    .bss.rx_msg:0000000000000000 rx_msg
     /tmp/ccCzsxyr.s:689    .bss.uhCaptureIndex:0000000000000000 $d
     /tmp/ccCzsxyr.s:696    .bss.uwDiffCapture:0000000000000000 $d
     /tmp/ccCzsxyr.s:703    .bss.uwFrequency:0000000000000000 $d
     /tmp/ccCzsxyr.s:709    .bss.uwIC3Value1:0000000000000000 $d
     /tmp/ccCzsxyr.s:716    .bss.uwIC3Value2:0000000000000000 $d
     /tmp/ccCzsxyr.s:723    .rodata.MX_TIM4_Init.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_TIM_ReadCapturedValue
HAL_TIM_IC_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_IC_ConfigChannel
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
ARM GAS  /tmp/ccCzsxyr.s 			page 24


HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_Init
HAL_TIM_IC_Start_IT
