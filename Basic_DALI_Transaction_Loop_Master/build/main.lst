ARM GAS  /tmp/cckMGtEN.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB126:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * File Name          : main.c
   4:Src/main.c    ****   * Description        : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   ** This notice applies to any and all portions of this file
   7:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
   9:Src/main.c    ****   * inserted by the user or by software development tools
  10:Src/main.c    ****   * are owned by their respective copyright owners.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * COPYRIGHT(c) 2017 STMicroelectronics
  13:Src/main.c    ****   *
  14:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  15:Src/main.c    ****   * are permitted provided that the following conditions are met:
  16:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  17:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  18:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  19:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  20:Src/main.c    ****   *      and/or other materials provided with the distribution.
  21:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  22:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  23:Src/main.c    ****   *      without specific prior written permission.
  24:Src/main.c    ****   *
  25:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  26:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  27:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  28:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  29:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  30:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  31:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  32:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
ARM GAS  /tmp/cckMGtEN.s 			page 2


  33:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:Src/main.c    ****   *
  36:Src/main.c    ****   ******************************************************************************
  37:Src/main.c    ****   */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE BEGIN Includes */
  44:Src/main.c    **** //DALI STATES
  45:Src/main.c    **** #define SENDING_DATA 1
  46:Src/main.c    **** 
  47:Src/main.c    **** //pin states
  48:Src/main.c    **** #define DALI_START_BIT_PULSE 0
  49:Src/main.c    **** #define DALI_END_BIT_PULSE 1
  50:Src/main.c    **** /* USER CODE END Includes */
  51:Src/main.c    **** 
  52:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  53:Src/main.c    **** TIM_HandleTypeDef htim2;
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE BEGIN PV */
  56:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  57:Src/main.c    **** // MANCHESTER ENCODING VARIABLES
  58:Src/main.c    **** /* Half-bit period T value in usec(microsecond)s*/
  59:Src/main.c    **** /* static uint32_t T = 416; */
  60:Src/main.c    **** 
  61:Src/main.c    **** //MASTER DATA SENDING VARIABLES
  62:Src/main.c    **** /* This array represents the forward frame with address and cmd bytes */
  63:Src/main.c    **** unsigned char dali_master_array_cmd[17] = {};
  64:Src/main.c    **** 
  65:Src/main.c    **** /* /\* This array represents the received response from slave *\/ */
  66:Src/main.c    **** volatile unsigned char dali_master_array_receive_buffer[9] = {};
  67:Src/main.c    **** 
  68:Src/main.c    **** // uncertain
  69:Src/main.c    **** unsigned char ballastAddr = 0xD5;
  70:Src/main.c    **** unsigned char cmd = 0x56;
  71:Src/main.c    **** 
  72:Src/main.c    **** // actual and former value variables
  73:Src/main.c    **** unsigned char actual_val;
  74:Src/main.c    **** unsigned char former_val;
  75:Src/main.c    **** 
  76:Src/main.c    **** unsigned char dali_state;
  77:Src/main.c    **** 
  78:Src/main.c    **** // MANCHESTER DECODING VARIABLES 
  79:Src/main.c    **** 
  80:Src/main.c    **** /* This variable designates first interrupt for Manchester-Decoding*/
  81:Src/main.c    **** unsigned char start_timer = 0;
  82:Src/main.c    **** 
  83:Src/main.c    **** /* This variable is used to measure the ticks of timer2 */
  84:Src/main.c    **** int tick_count = 0;
  85:Src/main.c    **** 
  86:Src/main.c    **** unsigned char bit_count = 0;
  87:Src/main.c    **** 
  88:Src/main.c    **** 
  89:Src/main.c    **** 
ARM GAS  /tmp/cckMGtEN.s 			page 3


  90:Src/main.c    **** /* USER CODE END PV */
  91:Src/main.c    **** 
  92:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  93:Src/main.c    **** void SystemClock_Config(void);
  94:Src/main.c    **** static void MX_GPIO_Init(void);
  95:Src/main.c    **** static void MX_TIM2_Init(void);
  96:Src/main.c    **** 
  97:Src/main.c    **** /* USER CODE BEGIN PFP */
  98:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  99:Src/main.c    **** void DALI_Master_Sending_Data(void);
 100:Src/main.c    **** void PrepareDataToSend(unsigned char *commandArray, unsigned char *tx_array, unsigned char bytesInC
 101:Src/main.c    **** void DALI_Send_Cmd(unsigned char ballastAddr, unsigned char cmd);
 102:Src/main.c    **** /* USER CODE END PFP */
 103:Src/main.c    **** 
 104:Src/main.c    **** /* USER CODE BEGIN 0 */
 105:Src/main.c    **** 
 106:Src/main.c    **** /* USER CODE END 0 */
 107:Src/main.c    **** 
 108:Src/main.c    **** int main(void)
 109:Src/main.c    **** {
 110:Src/main.c    **** 
 111:Src/main.c    ****   /* USER CODE BEGIN 1 */
 112:Src/main.c    **** 
 113:Src/main.c    ****   /* USER CODE END 1 */
 114:Src/main.c    **** 
 115:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 116:Src/main.c    **** 
 117:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 118:Src/main.c    ****   HAL_Init();
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* USER CODE BEGIN Init */
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* USER CODE END Init */
 123:Src/main.c    **** 
 124:Src/main.c    ****   /* Configure the system clock */
 125:Src/main.c    ****   SystemClock_Config();
 126:Src/main.c    **** 
 127:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 128:Src/main.c    **** 
 129:Src/main.c    ****   /* USER CODE END SysInit */
 130:Src/main.c    **** 
 131:Src/main.c    ****   /* Initialize all configured peripherals */
 132:Src/main.c    ****   MX_GPIO_Init();
 133:Src/main.c    ****   MX_TIM2_Init();
 134:Src/main.c    **** 
 135:Src/main.c    ****   /* USER CODE BEGIN 2 */
 136:Src/main.c    ****   HAL_GPIO_WritePin(Manch_Tx_GPIO_Port, Manch_Tx_Pin, GPIO_PIN_SET);
 137:Src/main.c    ****   /* HAL_Delay(1); */
 138:Src/main.c    ****   if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 139:Src/main.c    ****     {
 140:Src/main.c    ****       _Error_Handler(__FILE__, __LINE__);
 141:Src/main.c    ****     }
 142:Src/main.c    ****   // using DALI_Send_Cmd function modified!! without typeofCmd and followingType variables)
 143:Src/main.c    ****   DALI_Send_Cmd(ballastAddr, cmd);
 144:Src/main.c    ****   /* USER CODE END 2 */
 145:Src/main.c    **** 
 146:Src/main.c    ****   /* Infinite loop */
ARM GAS  /tmp/cckMGtEN.s 			page 4


 147:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 148:Src/main.c    ****   while (1)
 149:Src/main.c    ****   {
 150:Src/main.c    ****   /* USER CODE END WHILE */
 151:Src/main.c    ****     
 152:Src/main.c    ****   /* USER CODE BEGIN 3 */
 153:Src/main.c    **** 
 154:Src/main.c    ****   }
 155:Src/main.c    ****   /* USER CODE END 3 */
 156:Src/main.c    **** 
 157:Src/main.c    **** }
 158:Src/main.c    **** 
 159:Src/main.c    **** /** System Clock Configuration
 160:Src/main.c    **** */
 161:Src/main.c    **** void SystemClock_Config(void)
 162:Src/main.c    **** {
 163:Src/main.c    **** 
 164:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 165:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 166:Src/main.c    **** 
 167:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 168:Src/main.c    ****     */
 169:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 170:Src/main.c    **** 
 171:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 172:Src/main.c    **** 
 173:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 174:Src/main.c    ****     */
 175:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 176:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 177:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 178:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 179:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 180:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 181:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 182:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 183:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 184:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 185:Src/main.c    ****   {
 186:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 187:Src/main.c    ****   }
 188:Src/main.c    **** 
 189:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 190:Src/main.c    ****     */
 191:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 192:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 193:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 194:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 195:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 196:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 197:Src/main.c    **** 
 198:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 199:Src/main.c    ****   {
 200:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 201:Src/main.c    ****   }
 202:Src/main.c    **** 
 203:Src/main.c    ****     /**Configure the Systick interrupt time 
ARM GAS  /tmp/cckMGtEN.s 			page 5


 204:Src/main.c    ****     */
 205:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 206:Src/main.c    **** 
 207:Src/main.c    ****     /**Configure the Systick 
 208:Src/main.c    ****     */
 209:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 210:Src/main.c    **** 
 211:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 212:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 213:Src/main.c    **** }
 214:Src/main.c    **** 
 215:Src/main.c    **** /* TIM2 init function */
 216:Src/main.c    **** static void MX_TIM2_Init(void)
 217:Src/main.c    **** {
 218:Src/main.c    **** 
 219:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig;
 220:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 221:Src/main.c    **** 
 222:Src/main.c    ****   htim2.Instance = TIM2;
 223:Src/main.c    ****   htim2.Init.Prescaler = 83;
 224:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 225:Src/main.c    ****   htim2.Init.Period = 103;
 226:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 227:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 228:Src/main.c    ****   {
 229:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 230:Src/main.c    ****   }
 231:Src/main.c    **** 
 232:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 233:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 234:Src/main.c    ****   {
 235:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 236:Src/main.c    ****   }
 237:Src/main.c    **** 
 238:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 239:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 240:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 241:Src/main.c    ****   {
 242:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 243:Src/main.c    ****   }
 244:Src/main.c    **** 
 245:Src/main.c    **** }
 246:Src/main.c    **** 
 247:Src/main.c    **** /** Configure pins as 
 248:Src/main.c    ****         * Analog 
 249:Src/main.c    ****         * Input 
 250:Src/main.c    ****         * Output
 251:Src/main.c    ****         * EVENT_OUT
 252:Src/main.c    ****         * EXTI
 253:Src/main.c    **** */
 254:Src/main.c    **** static void MX_GPIO_Init(void)
 255:Src/main.c    **** {
  27              		.loc 1 255 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 24
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 F0B5     		push	{r4, r5, r6, r7, lr}
ARM GAS  /tmp/cckMGtEN.s 			page 6


  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 20
  34              		.cfi_offset 4, -20
  35              		.cfi_offset 5, -16
  36              		.cfi_offset 6, -12
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 87B0     		sub	sp, sp, #28
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 48
  42              	.LBB2:
 256:Src/main.c    **** 
 257:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 258:Src/main.c    **** 
 259:Src/main.c    ****   /* GPIO Ports Clock Enable */
 260:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  43              		.loc 1 260 0
  44 0004 0024     		movs	r4, #0
  45 0006 0094     		str	r4, [sp]
  46 0008 164B     		ldr	r3, .L3
  47 000a 1A6B     		ldr	r2, [r3, #48]
  48 000c 42F02002 		orr	r2, r2, #32
  49 0010 1A63     		str	r2, [r3, #48]
  50 0012 1B6B     		ldr	r3, [r3, #48]
  51 0014 03F02003 		and	r3, r3, #32
  52 0018 0093     		str	r3, [sp]
  53 001a 009B     		ldr	r3, [sp]
  54              	.LBE2:
 261:Src/main.c    **** 
 262:Src/main.c    ****   /*Configure GPIO pin Output Level */
 263:Src/main.c    ****   HAL_GPIO_WritePin(GPIOF, LED_Green_Pin|LED_Blue_Pin|LED_Yellow_Pin|LED_Red_Pin 
  55              		.loc 1 263 0
  56 001c 124D     		ldr	r5, .L3+4
  57 001e 2246     		mov	r2, r4
  58 0020 BC21     		movs	r1, #188
  59 0022 2846     		mov	r0, r5
  60 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
  61              	.LVL0:
 264:Src/main.c    ****                           |Manch_Tx_Pin, GPIO_PIN_RESET);
 265:Src/main.c    **** 
 266:Src/main.c    ****   /*Configure GPIO pins : LED_Green_Pin LED_Blue_Pin LED_Yellow_Pin LED_Red_Pin 
 267:Src/main.c    ****                            Manch_Tx_Pin */
 268:Src/main.c    ****   GPIO_InitStruct.Pin = LED_Green_Pin|LED_Blue_Pin|LED_Yellow_Pin|LED_Red_Pin 
  62              		.loc 1 268 0
  63 0028 BC23     		movs	r3, #188
  64 002a 0193     		str	r3, [sp, #4]
 269:Src/main.c    ****                           |Manch_Tx_Pin;
 270:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  65              		.loc 1 270 0
  66 002c 0126     		movs	r6, #1
  67 002e 0296     		str	r6, [sp, #8]
 271:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  68              		.loc 1 271 0
  69 0030 0227     		movs	r7, #2
  70 0032 0397     		str	r7, [sp, #12]
 272:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  71              		.loc 1 272 0
ARM GAS  /tmp/cckMGtEN.s 			page 7


  72 0034 0494     		str	r4, [sp, #16]
 273:Src/main.c    ****   HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
  73              		.loc 1 273 0
  74 0036 01A9     		add	r1, sp, #4
  75 0038 2846     		mov	r0, r5
  76 003a FFF7FEFF 		bl	HAL_GPIO_Init
  77              	.LVL1:
 274:Src/main.c    **** 
 275:Src/main.c    ****   /*Configure GPIO pin : Manch_Rx_Pin */
 276:Src/main.c    ****   GPIO_InitStruct.Pin = Manch_Rx_Pin;
  78              		.loc 1 276 0
  79 003e 4023     		movs	r3, #64
  80 0040 0193     		str	r3, [sp, #4]
 277:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  81              		.loc 1 277 0
  82 0042 0A4B     		ldr	r3, .L3+8
  83 0044 0293     		str	r3, [sp, #8]
 278:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  84              		.loc 1 278 0
  85 0046 0397     		str	r7, [sp, #12]
 279:Src/main.c    ****   HAL_GPIO_Init(Manch_Rx_GPIO_Port, &GPIO_InitStruct);
  86              		.loc 1 279 0
  87 0048 01A9     		add	r1, sp, #4
  88 004a 2846     		mov	r0, r5
  89 004c FFF7FEFF 		bl	HAL_GPIO_Init
  90              	.LVL2:
 280:Src/main.c    **** 
 281:Src/main.c    ****   /* EXTI interrupt init*/
 282:Src/main.c    ****   HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
  91              		.loc 1 282 0
  92 0050 2246     		mov	r2, r4
  93 0052 3146     		mov	r1, r6
  94 0054 1720     		movs	r0, #23
  95 0056 FFF7FEFF 		bl	HAL_NVIC_SetPriority
  96              	.LVL3:
 283:Src/main.c    ****   HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
  97              		.loc 1 283 0
  98 005a 1720     		movs	r0, #23
  99 005c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 100              	.LVL4:
 284:Src/main.c    **** 
 285:Src/main.c    **** }
 101              		.loc 1 285 0
 102 0060 07B0     		add	sp, sp, #28
 103              	.LCFI2:
 104              		.cfi_def_cfa_offset 20
 105              		@ sp needed
 106 0062 F0BD     		pop	{r4, r5, r6, r7, pc}
 107              	.L4:
 108              		.align	2
 109              	.L3:
 110 0064 00380240 		.word	1073887232
 111 0068 00140240 		.word	1073878016
 112 006c 00003110 		.word	271646720
 113              		.cfi_endproc
 114              	.LFE126:
 116              		.section	.text.PrepareDataToSend,"ax",%progbits
ARM GAS  /tmp/cckMGtEN.s 			page 8


 117              		.align	1
 118              		.global	PrepareDataToSend
 119              		.syntax unified
 120              		.thumb
 121              		.thumb_func
 122              		.fpu fpv4-sp-d16
 124              	PrepareDataToSend:
 125              	.LFB128:
 286:Src/main.c    **** 
 287:Src/main.c    **** /* USER CODE BEGIN 4 */
 288:Src/main.c    **** /* This function is used together with PrepareDatatoSend fucntion to manchester encode the ballastA
 289:Src/main.c    **** void DALI_Send_Cmd(unsigned char ballastAddr, unsigned char cmd)
 290:Src/main.c    **** {
 291:Src/main.c    **** 
 292:Src/main.c    ****   unsigned char data_array[2] = {};
 293:Src/main.c    ****   /* unsigned char i; */
 294:Src/main.c    **** 
 295:Src/main.c    ****   /*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
 296:Src/main.c    **** 
 297:Src/main.c    ****   /* Here supposed to be starting the Manch_Tx pin in HIGH state or
 298:Src/main.c    ****      SETTLING STATE but for now it has been skipped */
 299:Src/main.c    ****   // Set Manch_Tx pin as high
 300:Src/main.c    ****   /* HAL_GPIO_WritePin(Manch_Tx_GPIO_Port, Manch_Tx_Pin, GPIO_PIN_SET); */
 301:Src/main.c    **** 
 302:Src/main.c    ****   /*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
 303:Src/main.c    **** 
 304:Src/main.c    ****   // reset tick_count and bit_count values
 305:Src/main.c    ****   tick_count = 0;
 306:Src/main.c    ****   bit_count = 0;
 307:Src/main.c    **** 
 308:Src/main.c    ****   // fetch ballast address and command
 309:Src/main.c    ****   data_array[0] = (char)ballastAddr;
 310:Src/main.c    ****   data_array[1] = (char)cmd;
 311:Src/main.c    ****   PrepareDataToSend(data_array, dali_master_array_cmd, 2);
 312:Src/main.c    **** 
 313:Src/main.c    **** 
 314:Src/main.c    ****   
 315:Src/main.c    ****   
 316:Src/main.c    ****   // set DALI state to send DATA
 317:Src/main.c    ****   dali_state = SENDING_DATA;
 318:Src/main.c    ****     
 319:Src/main.c    **** }
 320:Src/main.c    **** void PrepareDataToSend(unsigned char *commandArray, unsigned char *tx_array, unsigned char bytesInC
 321:Src/main.c    **** {
 126              		.loc 1 321 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130              	.LVL5:
 131 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 132              	.LCFI3:
 133              		.cfi_def_cfa_offset 20
 134              		.cfi_offset 4, -20
 135              		.cfi_offset 5, -16
 136              		.cfi_offset 6, -12
 137              		.cfi_offset 7, -8
 138              		.cfi_offset 14, -4
ARM GAS  /tmp/cckMGtEN.s 			page 9


 139              	.LVL6:
 322:Src/main.c    ****   // set default value for the mask
 323:Src/main.c    ****   unsigned char mask = 0x80;
 324:Src/main.c    ****   // variable which hold one byte value - one element from commandArray
 325:Src/main.c    ****   unsigned char dummy;
 326:Src/main.c    **** 
 327:Src/main.c    ****   // number of bytes in command
 328:Src/main.c    ****   unsigned char bytes_counter;
 329:Src/main.c    ****   unsigned char i;
 330:Src/main.c    ****   // number of active bit
 331:Src/main.c    ****   unsigned char bitCounter = 0;
 332:Src/main.c    **** 
 333:Src/main.c    ****   //????????????????????????????????????????//
 334:Src/main.c    ****   /* Why does it need to be initialized ?? */
 335:Src/main.c    ****   for (i = 0; i < 9; i++)
 140              		.loc 1 335 0
 141 0002 0023     		movs	r3, #0
 142 0004 03E0     		b	.L6
 143              	.LVL7:
 144              	.L7:
 336:Src/main.c    ****     {
 337:Src/main.c    ****       tx_array[0] = 0;
 145              		.loc 1 337 0 discriminator 3
 146 0006 0024     		movs	r4, #0
 147 0008 0C70     		strb	r4, [r1]
 335:Src/main.c    ****     {
 148              		.loc 1 335 0 discriminator 3
 149 000a 0133     		adds	r3, r3, #1
 150              	.LVL8:
 151 000c DBB2     		uxtb	r3, r3
 152              	.LVL9:
 153              	.L6:
 335:Src/main.c    ****     {
 154              		.loc 1 335 0 is_stmt 0 discriminator 1
 155 000e 082B     		cmp	r3, #8
 156 0010 F9D9     		bls	.L7
 157 0012 0026     		movs	r6, #0
 158 0014 1CE0     		b	.L8
 159              	.LVL10:
 160              	.L21:
 338:Src/main.c    ****     }
 339:Src/main.c    **** 
 340:Src/main.c    ****   // loop through all bytes in commandArray
 341:Src/main.c    ****   for(bytes_counter = 0; bytes_counter < bytesInCmd; bytes_counter++)
 342:Src/main.c    ****     {
 343:Src/main.c    ****       // assign byte for use
 344:Src/main.c    ****       dummy = commandArray[bytes_counter];
 345:Src/main.c    ****       // set mask to default value
 346:Src/main.c    ****       mask = 0x80;
 347:Src/main.c    ****       // increment number of active bit
 348:Src/main.c    ****       bitCounter++;
 349:Src/main.c    ****       // check if active bit is the first one
 350:Src/main.c    ****       if(bitCounter == 1)
 351:Src/main.c    **** 	{
 352:Src/main.c    **** 	  // Start bit is always 1 - in manchester that is END_BIT_PULSE
 353:Src/main.c    **** 	  tx_array[0] = DALI_END_BIT_PULSE;
 161              		.loc 1 353 0 is_stmt 1
ARM GAS  /tmp/cckMGtEN.s 			page 10


 162 0016 0123     		movs	r3, #1
 163              	.LVL11:
 164 0018 0B70     		strb	r3, [r1]
 165 001a 23E0     		b	.L9
 166              	.LVL12:
 167              	.L11:
 354:Src/main.c    **** 	}
 355:Src/main.c    **** 
 356:Src/main.c    ****       // 2 byte command
 357:Src/main.c    ****       for(i = 1; i < 9; i++)
 358:Src/main.c    **** 	{
 359:Src/main.c    **** 	  // check if bit is one
 360:Src/main.c    **** 	  if(dummy & mask)
 361:Src/main.c    **** 	    {
 362:Src/main.c    **** 	      // assign pulse value
 363:Src/main.c    **** 	      tx_array[i + (8 * bytes_counter)] = DALI_END_BIT_PULSE;
 364:Src/main.c    **** 	    }
 365:Src/main.c    **** 	  else
 366:Src/main.c    **** 	    {
 367:Src/main.c    **** 	      tx_array[i + (8 * bytes_counter)] = DALI_START_BIT_PULSE;
 168              		.loc 1 367 0
 169 001c 03EBC605 		add	r5, r3, r6, lsl #3
 170 0020 4FF0000E 		mov	lr, #0
 171 0024 01F805E0 		strb	lr, [r1, r5]
 172              	.L12:
 368:Src/main.c    **** 	    }
 369:Src/main.c    **** 	  // check mask value
 370:Src/main.c    **** 	  if(mask == 0x01)
 173              		.loc 1 370 0
 174 0028 012C     		cmp	r4, #1
 175 002a 0DD0     		beq	.L18
 371:Src/main.c    **** 	    {
 372:Src/main.c    **** 	      mask <<= 7; // shift mask bit to MSB
 373:Src/main.c    **** 	    }
 374:Src/main.c    **** 	  else
 375:Src/main.c    **** 	    {
 376:Src/main.c    **** 	      mask >>= 1; // shift mask bit to 1 right
 176              		.loc 1 376 0
 177 002c 6408     		lsrs	r4, r4, #1
 178              	.LVL13:
 179              	.L14:
 357:Src/main.c    **** 	{
 180              		.loc 1 357 0 discriminator 2
 181 002e 0133     		adds	r3, r3, #1
 182              	.LVL14:
 183 0030 DBB2     		uxtb	r3, r3
 184              	.LVL15:
 185              	.L10:
 357:Src/main.c    **** 	{
 186              		.loc 1 357 0 is_stmt 0 discriminator 1
 187 0032 082B     		cmp	r3, #8
 188 0034 0BD8     		bhi	.L19
 360:Src/main.c    **** 	    {
 189              		.loc 1 360 0 is_stmt 1
 190 0036 3C42     		tst	r4, r7
 191 0038 F0D0     		beq	.L11
 363:Src/main.c    **** 	    }
ARM GAS  /tmp/cckMGtEN.s 			page 11


 192              		.loc 1 363 0
 193 003a 03EBC605 		add	r5, r3, r6, lsl #3
 194 003e 4FF0010E 		mov	lr, #1
 195 0042 01F805E0 		strb	lr, [r1, r5]
 196 0046 EFE7     		b	.L12
 197              	.L18:
 372:Src/main.c    **** 	    }
 198              		.loc 1 372 0
 199 0048 E401     		lsls	r4, r4, #7
 200              	.LVL16:
 201 004a E4B2     		uxtb	r4, r4
 202              	.LVL17:
 203 004c EFE7     		b	.L14
 204              	.L19:
 341:Src/main.c    ****     {
 205              		.loc 1 341 0
 206 004e 6646     		mov	r6, ip
 207              	.LVL18:
 208              	.L8:
 341:Src/main.c    ****     {
 209              		.loc 1 341 0 is_stmt 0 discriminator 1
 210 0050 9642     		cmp	r6, r2
 211 0052 0AD2     		bcs	.L20
 344:Src/main.c    ****       // set mask to default value
 212              		.loc 1 344 0 is_stmt 1
 213 0054 875D     		ldrb	r7, [r0, r6]	@ zero_extendqisi2
 214              	.LVL19:
 348:Src/main.c    ****       // check if active bit is the first one
 215              		.loc 1 348 0
 216 0056 06F1010C 		add	ip, r6, #1
 217 005a 5FFA8CFC 		uxtb	ip, ip
 218              	.LVL20:
 350:Src/main.c    **** 	{
 219              		.loc 1 350 0
 220 005e BCF1010F 		cmp	ip, #1
 221 0062 D8D0     		beq	.L21
 222              	.LVL21:
 223              	.L9:
 335:Src/main.c    ****     {
 224              		.loc 1 335 0 discriminator 1
 225 0064 0123     		movs	r3, #1
 226 0066 8024     		movs	r4, #128
 227 0068 E3E7     		b	.L10
 228              	.LVL22:
 229              	.L20:
 377:Src/main.c    **** 	    }
 378:Src/main.c    **** 	}
 379:Src/main.c    ****     }
 380:Src/main.c    **** }
 230              		.loc 1 380 0
 231 006a F0BD     		pop	{r4, r5, r6, r7, pc}
 232              		.cfi_endproc
 233              	.LFE128:
 235              		.section	.text.DALI_Send_Cmd,"ax",%progbits
 236              		.align	1
 237              		.global	DALI_Send_Cmd
 238              		.syntax unified
ARM GAS  /tmp/cckMGtEN.s 			page 12


 239              		.thumb
 240              		.thumb_func
 241              		.fpu fpv4-sp-d16
 243              	DALI_Send_Cmd:
 244              	.LFB127:
 290:Src/main.c    **** 
 245              		.loc 1 290 0
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 8
 248              		@ frame_needed = 0, uses_anonymous_args = 0
 249              	.LVL23:
 250 0000 00B5     		push	{lr}
 251              	.LCFI4:
 252              		.cfi_def_cfa_offset 4
 253              		.cfi_offset 14, -4
 254 0002 83B0     		sub	sp, sp, #12
 255              	.LCFI5:
 256              		.cfi_def_cfa_offset 16
 292:Src/main.c    ****   /* unsigned char i; */
 257              		.loc 1 292 0
 258 0004 0023     		movs	r3, #0
 305:Src/main.c    ****   bit_count = 0;
 259              		.loc 1 305 0
 260 0006 094A     		ldr	r2, .L24
 261 0008 1360     		str	r3, [r2]
 306:Src/main.c    **** 
 262              		.loc 1 306 0
 263 000a 094A     		ldr	r2, .L24+4
 264 000c 1370     		strb	r3, [r2]
 309:Src/main.c    ****   data_array[1] = (char)cmd;
 265              		.loc 1 309 0
 266 000e 8DF80400 		strb	r0, [sp, #4]
 310:Src/main.c    ****   PrepareDataToSend(data_array, dali_master_array_cmd, 2);
 267              		.loc 1 310 0
 268 0012 8DF80510 		strb	r1, [sp, #5]
 311:Src/main.c    **** 
 269              		.loc 1 311 0
 270 0016 0222     		movs	r2, #2
 271 0018 0649     		ldr	r1, .L24+8
 272              	.LVL24:
 273 001a 01A8     		add	r0, sp, #4
 274              	.LVL25:
 275 001c FFF7FEFF 		bl	PrepareDataToSend
 276              	.LVL26:
 317:Src/main.c    ****     
 277              		.loc 1 317 0
 278 0020 0122     		movs	r2, #1
 279 0022 054B     		ldr	r3, .L24+12
 280 0024 1A70     		strb	r2, [r3]
 319:Src/main.c    **** void PrepareDataToSend(unsigned char *commandArray, unsigned char *tx_array, unsigned char bytesInC
 281              		.loc 1 319 0
 282 0026 03B0     		add	sp, sp, #12
 283              	.LCFI6:
 284              		.cfi_def_cfa_offset 4
 285              		@ sp needed
 286 0028 5DF804FB 		ldr	pc, [sp], #4
 287              	.L25:
ARM GAS  /tmp/cckMGtEN.s 			page 13


 288              		.align	2
 289              	.L24:
 290 002c 00000000 		.word	.LANCHOR0
 291 0030 00000000 		.word	.LANCHOR1
 292 0034 00000000 		.word	.LANCHOR2
 293 0038 00000000 		.word	dali_state
 294              		.cfi_endproc
 295              	.LFE127:
 297              		.section	.text._Error_Handler,"ax",%progbits
 298              		.align	1
 299              		.global	_Error_Handler
 300              		.syntax unified
 301              		.thumb
 302              		.thumb_func
 303              		.fpu fpv4-sp-d16
 305              	_Error_Handler:
 306              	.LFB131:
 381:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 382:Src/main.c    **** {
 383:Src/main.c    ****   if(dali_state == SENDING_DATA)
 384:Src/main.c    ****     {
 385:Src/main.c    ****       DALI_Master_Sending_Data();
 386:Src/main.c    ****     }
 387:Src/main.c    **** }
 388:Src/main.c    **** 
 389:Src/main.c    **** /* void DALI_Master_Receiving_Data(void) */
 390:Src/main.c    **** /* { */
 391:Src/main.c    **** /*   // Yet to configure */
 392:Src/main.c    **** 
 393:Src/main.c    **** /* } */
 394:Src/main.c    **** /* Included start_bit as 1 */
 395:Src/main.c    **** void DALI_Master_Sending_Data(void)
 396:Src/main.c    **** {
 397:Src/main.c    ****   unsigned char pulsePosition = 0;
 398:Src/main.c    ****   if(tick_count < 8)
 399:Src/main.c    ****     {
 400:Src/main.c    ****       /* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
 401:Src/main.c    ****       /* This line is added just to give the starting interrupt so
 402:Src/main.c    **** 	 that the timer stars counting ...!! */
 403:Src/main.c    ****       HAL_GPIO_WritePin(Manch_Tx_GPIO_Port, Manch_Tx_Pin, GPIO_PIN_SET);
 404:Src/main.c    ****       /* Uncertain about the above text anyway! Has to be changed
 405:Src/main.c    **** 	 accordingly */
 406:Src/main.c    ****       /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
 407:Src/main.c    ****       if(tick_count < 4)
 408:Src/main.c    **** 	{
 409:Src/main.c    **** 	  HAL_GPIO_WritePin(Manch_Tx_GPIO_Port, Manch_Tx_Pin, GPIO_PIN_RESET);
 410:Src/main.c    **** 	}
 411:Src/main.c    ****       else
 412:Src/main.c    **** 	{
 413:Src/main.c    **** 	  /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
 414:Src/main.c    **** 	  /* Check for proper debugging option here */
 415:Src/main.c    **** 	  /* HAL_GPIO_WritePin(LED_Yellow_GPIO_Port, LED_Yellow_Pin, GPIO_PIN_RESET); */
 416:Src/main.c    **** 	  /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
 417:Src/main.c    **** 	  HAL_GPIO_WritePin(Manch_Tx_GPIO_Port, Manch_Tx_Pin, GPIO_PIN_SET);
 418:Src/main.c    **** 	}
 419:Src/main.c    ****     }
 420:Src/main.c    ****   else if(bit_count < 17)
ARM GAS  /tmp/cckMGtEN.s 			page 14


 421:Src/main.c    ****     {
 422:Src/main.c    ****       if(tick_count % 4 == 0)
 423:Src/main.c    ****   	{
 424:Src/main.c    ****   	  pulsePosition = tick_count / 4;
 425:Src/main.c    ****   	  if(pulsePosition % 2 == 0)
 426:Src/main.c    ****   	    {
 427:Src/main.c    **** 	      if(dali_master_array_cmd[bit_count] == 0)
 428:Src/main.c    ****   		{
 429:Src/main.c    ****   		  HAL_GPIO_WritePin(Manch_Tx_GPIO_Port, Manch_Tx_Pin, GPIO_PIN_SET);
 430:Src/main.c    ****   		}
 431:Src/main.c    ****   	      else
 432:Src/main.c    ****   		{
 433:Src/main.c    ****   		  HAL_GPIO_WritePin(Manch_Tx_GPIO_Port, Manch_Tx_Pin, GPIO_PIN_RESET);
 434:Src/main.c    ****   		}
 435:Src/main.c    ****   	    }
 436:Src/main.c    ****   	  else
 437:Src/main.c    ****   	    {
 438:Src/main.c    ****   	      if(dali_master_array_cmd[bit_count] == 0)
 439:Src/main.c    ****   		{
 440:Src/main.c    ****   		  HAL_GPIO_WritePin(Manch_Tx_GPIO_Port, Manch_Tx_Pin, GPIO_PIN_RESET);
 441:Src/main.c    ****   		}
 442:Src/main.c    ****   	      else
 443:Src/main.c    ****   		{
 444:Src/main.c    ****   		  HAL_GPIO_WritePin(Manch_Tx_GPIO_Port, Manch_Tx_Pin, GPIO_PIN_SET);
 445:Src/main.c    ****   		}
 446:Src/main.c    ****   	    }
 447:Src/main.c    ****   	}
 448:Src/main.c    ****     }
 449:Src/main.c    ****   // increment tick_count
 450:Src/main.c    ****   tick_count++;
 451:Src/main.c    **** 
 452:Src/main.c    ****   if(tick_count % 8 == 0)
 453:Src/main.c    ****     {
 454:Src/main.c    ****       bit_count++;
 455:Src/main.c    ****     }
 456:Src/main.c    **** 
 457:Src/main.c    ****   if(bit_count > 16)
 458:Src/main.c    ****     {
 459:Src/main.c    ****       HAL_GPIO_WritePin(Manch_Tx_GPIO_Port, Manch_Tx_Pin, GPIO_PIN_SET);
 460:Src/main.c    ****       if(HAL_TIM_Base_Stop_IT(&htim2) != HAL_OK)
 461:Src/main.c    ****   	{
 462:Src/main.c    ****   	  _Error_Handler(__FILE__, __LINE__);
 463:Src/main.c    ****   	}
 464:Src/main.c    ****     }
 465:Src/main.c    **** }
 466:Src/main.c    **** 
 467:Src/main.c    **** /* USER CODE END 4 */
 468:Src/main.c    **** 
 469:Src/main.c    **** /**
 470:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 471:Src/main.c    ****   * @param  None
 472:Src/main.c    ****   * @retval None
 473:Src/main.c    ****   */
 474:Src/main.c    **** void _Error_Handler(char * file, int line)
 475:Src/main.c    **** {
 307              		.loc 1 475 0
 308              		.cfi_startproc
ARM GAS  /tmp/cckMGtEN.s 			page 15


 309              		@ Volatile: function does not return.
 310              		@ args = 0, pretend = 0, frame = 0
 311              		@ frame_needed = 0, uses_anonymous_args = 0
 312              	.LVL27:
 313 0000 08B5     		push	{r3, lr}
 314              	.LCFI7:
 315              		.cfi_def_cfa_offset 8
 316              		.cfi_offset 3, -8
 317              		.cfi_offset 14, -4
 476:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 477:Src/main.c    ****   
 478:Src/main.c    ****   /* Turn LED Yellow on */
 479:Src/main.c    ****   HAL_GPIO_WritePin(LED_Yellow_GPIO_Port, LED_Yellow_Pin, GPIO_PIN_SET);
 318              		.loc 1 479 0
 319 0002 0122     		movs	r2, #1
 320 0004 1021     		movs	r1, #16
 321              	.LVL28:
 322 0006 0248     		ldr	r0, .L29
 323              	.LVL29:
 324 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 325              	.LVL30:
 326              	.L27:
 327 000c FEE7     		b	.L27
 328              	.L30:
 329 000e 00BF     		.align	2
 330              	.L29:
 331 0010 00140240 		.word	1073878016
 332              		.cfi_endproc
 333              	.LFE131:
 335              		.section	.text.MX_TIM2_Init,"ax",%progbits
 336              		.align	1
 337              		.syntax unified
 338              		.thumb
 339              		.thumb_func
 340              		.fpu fpv4-sp-d16
 342              	MX_TIM2_Init:
 343              	.LFB125:
 217:Src/main.c    **** 
 344              		.loc 1 217 0
 345              		.cfi_startproc
 346              		@ args = 0, pretend = 0, frame = 24
 347              		@ frame_needed = 0, uses_anonymous_args = 0
 348 0000 00B5     		push	{lr}
 349              	.LCFI8:
 350              		.cfi_def_cfa_offset 4
 351              		.cfi_offset 14, -4
 352 0002 87B0     		sub	sp, sp, #28
 353              	.LCFI9:
 354              		.cfi_def_cfa_offset 32
 222:Src/main.c    ****   htim2.Init.Prescaler = 83;
 355              		.loc 1 222 0
 356 0004 1648     		ldr	r0, .L39
 357 0006 4FF08043 		mov	r3, #1073741824
 358 000a 0360     		str	r3, [r0]
 223:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 359              		.loc 1 223 0
 360 000c 5323     		movs	r3, #83
ARM GAS  /tmp/cckMGtEN.s 			page 16


 361 000e 4360     		str	r3, [r0, #4]
 224:Src/main.c    ****   htim2.Init.Period = 103;
 362              		.loc 1 224 0
 363 0010 0023     		movs	r3, #0
 364 0012 8360     		str	r3, [r0, #8]
 225:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 365              		.loc 1 225 0
 366 0014 6722     		movs	r2, #103
 367 0016 C260     		str	r2, [r0, #12]
 226:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 368              		.loc 1 226 0
 369 0018 0361     		str	r3, [r0, #16]
 227:Src/main.c    ****   {
 370              		.loc 1 227 0
 371 001a FFF7FEFF 		bl	HAL_TIM_Base_Init
 372              	.LVL31:
 373 001e 98B9     		cbnz	r0, .L36
 232:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 374              		.loc 1 232 0
 375 0020 06A9     		add	r1, sp, #24
 376 0022 4FF48053 		mov	r3, #4096
 377 0026 41F8103D 		str	r3, [r1, #-16]!
 233:Src/main.c    ****   {
 378              		.loc 1 233 0
 379 002a 0D48     		ldr	r0, .L39
 380 002c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 381              	.LVL32:
 382 0030 70B9     		cbnz	r0, .L37
 238:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 383              		.loc 1 238 0
 384 0032 0023     		movs	r3, #0
 385 0034 0093     		str	r3, [sp]
 239:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 386              		.loc 1 239 0
 387 0036 0193     		str	r3, [sp, #4]
 240:Src/main.c    ****   {
 388              		.loc 1 240 0
 389 0038 6946     		mov	r1, sp
 390 003a 0948     		ldr	r0, .L39
 391 003c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 392              	.LVL33:
 393 0040 50B9     		cbnz	r0, .L38
 245:Src/main.c    **** 
 394              		.loc 1 245 0
 395 0042 07B0     		add	sp, sp, #28
 396              	.LCFI10:
 397              		.cfi_remember_state
 398              		.cfi_def_cfa_offset 4
 399              		@ sp needed
 400 0044 5DF804FB 		ldr	pc, [sp], #4
 401              	.L36:
 402              	.LCFI11:
 403              		.cfi_restore_state
 229:Src/main.c    ****   }
 404              		.loc 1 229 0
 405 0048 E521     		movs	r1, #229
 406 004a 0648     		ldr	r0, .L39+4
ARM GAS  /tmp/cckMGtEN.s 			page 17


 407 004c FFF7FEFF 		bl	_Error_Handler
 408              	.LVL34:
 409              	.L37:
 235:Src/main.c    ****   }
 410              		.loc 1 235 0
 411 0050 EB21     		movs	r1, #235
 412 0052 0448     		ldr	r0, .L39+4
 413 0054 FFF7FEFF 		bl	_Error_Handler
 414              	.LVL35:
 415              	.L38:
 242:Src/main.c    ****   }
 416              		.loc 1 242 0
 417 0058 F221     		movs	r1, #242
 418 005a 0248     		ldr	r0, .L39+4
 419 005c FFF7FEFF 		bl	_Error_Handler
 420              	.LVL36:
 421              	.L40:
 422              		.align	2
 423              	.L39:
 424 0060 00000000 		.word	htim2
 425 0064 00000000 		.word	.LC0
 426              		.cfi_endproc
 427              	.LFE125:
 429              		.section	.text.SystemClock_Config,"ax",%progbits
 430              		.align	1
 431              		.global	SystemClock_Config
 432              		.syntax unified
 433              		.thumb
 434              		.thumb_func
 435              		.fpu fpv4-sp-d16
 437              	SystemClock_Config:
 438              	.LFB124:
 162:Src/main.c    **** 
 439              		.loc 1 162 0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 80
 442              		@ frame_needed = 0, uses_anonymous_args = 0
 443 0000 00B5     		push	{lr}
 444              	.LCFI12:
 445              		.cfi_def_cfa_offset 4
 446              		.cfi_offset 14, -4
 447 0002 95B0     		sub	sp, sp, #84
 448              	.LCFI13:
 449              		.cfi_def_cfa_offset 88
 450              	.LBB3:
 169:Src/main.c    **** 
 451              		.loc 1 169 0
 452 0004 0023     		movs	r3, #0
 453 0006 0193     		str	r3, [sp, #4]
 454 0008 284A     		ldr	r2, .L47
 455 000a 116C     		ldr	r1, [r2, #64]
 456 000c 41F08051 		orr	r1, r1, #268435456
 457 0010 1164     		str	r1, [r2, #64]
 458 0012 126C     		ldr	r2, [r2, #64]
 459 0014 02F08052 		and	r2, r2, #268435456
 460 0018 0192     		str	r2, [sp, #4]
 461 001a 019A     		ldr	r2, [sp, #4]
ARM GAS  /tmp/cckMGtEN.s 			page 18


 462              	.LBE3:
 463              	.LBB4:
 171:Src/main.c    **** 
 464              		.loc 1 171 0
 465 001c 0293     		str	r3, [sp, #8]
 466 001e 244A     		ldr	r2, .L47+4
 467 0020 1168     		ldr	r1, [r2]
 468 0022 41F48041 		orr	r1, r1, #16384
 469 0026 1160     		str	r1, [r2]
 470 0028 1268     		ldr	r2, [r2]
 471 002a 02F48042 		and	r2, r2, #16384
 472 002e 0292     		str	r2, [sp, #8]
 473 0030 029A     		ldr	r2, [sp, #8]
 474              	.LBE4:
 175:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 475              		.loc 1 175 0
 476 0032 0221     		movs	r1, #2
 477 0034 0891     		str	r1, [sp, #32]
 176:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 478              		.loc 1 176 0
 479 0036 0122     		movs	r2, #1
 480 0038 0B92     		str	r2, [sp, #44]
 177:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 481              		.loc 1 177 0
 482 003a 1022     		movs	r2, #16
 483 003c 0C92     		str	r2, [sp, #48]
 178:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 484              		.loc 1 178 0
 485 003e 0E91     		str	r1, [sp, #56]
 179:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 486              		.loc 1 179 0
 487 0040 0F93     		str	r3, [sp, #60]
 180:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 488              		.loc 1 180 0
 489 0042 1092     		str	r2, [sp, #64]
 181:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 490              		.loc 1 181 0
 491 0044 4FF4A873 		mov	r3, #336
 492 0048 1193     		str	r3, [sp, #68]
 182:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 493              		.loc 1 182 0
 494 004a 0423     		movs	r3, #4
 495 004c 1293     		str	r3, [sp, #72]
 183:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 496              		.loc 1 183 0
 497 004e 1393     		str	r3, [sp, #76]
 184:Src/main.c    ****   {
 498              		.loc 1 184 0
 499 0050 08A8     		add	r0, sp, #32
 500 0052 FFF7FEFF 		bl	HAL_RCC_OscConfig
 501              	.LVL37:
 502 0056 08BB     		cbnz	r0, .L45
 191:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 503              		.loc 1 191 0
 504 0058 0F23     		movs	r3, #15
 505 005a 0393     		str	r3, [sp, #12]
 193:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
ARM GAS  /tmp/cckMGtEN.s 			page 19


 506              		.loc 1 193 0
 507 005c 0221     		movs	r1, #2
 508 005e 0491     		str	r1, [sp, #16]
 194:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 509              		.loc 1 194 0
 510 0060 0023     		movs	r3, #0
 511 0062 0593     		str	r3, [sp, #20]
 195:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 512              		.loc 1 195 0
 513 0064 4FF48052 		mov	r2, #4096
 514 0068 0692     		str	r2, [sp, #24]
 196:Src/main.c    **** 
 515              		.loc 1 196 0
 516 006a 0793     		str	r3, [sp, #28]
 198:Src/main.c    ****   {
 517              		.loc 1 198 0
 518 006c 03A8     		add	r0, sp, #12
 519 006e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 520              	.LVL38:
 521 0072 B8B9     		cbnz	r0, .L46
 205:Src/main.c    **** 
 522              		.loc 1 205 0
 523 0074 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 524              	.LVL39:
 525 0078 0E4B     		ldr	r3, .L47+8
 526 007a A3FB0030 		umull	r3, r0, r3, r0
 527 007e 8009     		lsrs	r0, r0, #6
 528 0080 FFF7FEFF 		bl	HAL_SYSTICK_Config
 529              	.LVL40:
 209:Src/main.c    **** 
 530              		.loc 1 209 0
 531 0084 0420     		movs	r0, #4
 532 0086 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 533              	.LVL41:
 212:Src/main.c    **** }
 534              		.loc 1 212 0
 535 008a 0022     		movs	r2, #0
 536 008c 1146     		mov	r1, r2
 537 008e 4FF0FF30 		mov	r0, #-1
 538 0092 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 539              	.LVL42:
 213:Src/main.c    **** 
 540              		.loc 1 213 0
 541 0096 15B0     		add	sp, sp, #84
 542              	.LCFI14:
 543              		.cfi_remember_state
 544              		.cfi_def_cfa_offset 4
 545              		@ sp needed
 546 0098 5DF804FB 		ldr	pc, [sp], #4
 547              	.L45:
 548              	.LCFI15:
 549              		.cfi_restore_state
 186:Src/main.c    ****   }
 550              		.loc 1 186 0
 551 009c BA21     		movs	r1, #186
 552 009e 0648     		ldr	r0, .L47+12
 553 00a0 FFF7FEFF 		bl	_Error_Handler
ARM GAS  /tmp/cckMGtEN.s 			page 20


 554              	.LVL43:
 555              	.L46:
 200:Src/main.c    ****   }
 556              		.loc 1 200 0
 557 00a4 C821     		movs	r1, #200
 558 00a6 0448     		ldr	r0, .L47+12
 559 00a8 FFF7FEFF 		bl	_Error_Handler
 560              	.LVL44:
 561              	.L48:
 562              		.align	2
 563              	.L47:
 564 00ac 00380240 		.word	1073887232
 565 00b0 00700040 		.word	1073770496
 566 00b4 D34D6210 		.word	274877907
 567 00b8 00000000 		.word	.LC0
 568              		.cfi_endproc
 569              	.LFE124:
 571              		.section	.text.main,"ax",%progbits
 572              		.align	1
 573              		.global	main
 574              		.syntax unified
 575              		.thumb
 576              		.thumb_func
 577              		.fpu fpv4-sp-d16
 579              	main:
 580              	.LFB123:
 109:Src/main.c    **** 
 581              		.loc 1 109 0
 582              		.cfi_startproc
 583              		@ Volatile: function does not return.
 584              		@ args = 0, pretend = 0, frame = 0
 585              		@ frame_needed = 0, uses_anonymous_args = 0
 586 0000 08B5     		push	{r3, lr}
 587              	.LCFI16:
 588              		.cfi_def_cfa_offset 8
 589              		.cfi_offset 3, -8
 590              		.cfi_offset 14, -4
 118:Src/main.c    **** 
 591              		.loc 1 118 0
 592 0002 FFF7FEFF 		bl	HAL_Init
 593              	.LVL45:
 125:Src/main.c    **** 
 594              		.loc 1 125 0
 595 0006 FFF7FEFF 		bl	SystemClock_Config
 596              	.LVL46:
 132:Src/main.c    ****   MX_TIM2_Init();
 597              		.loc 1 132 0
 598 000a FFF7FEFF 		bl	MX_GPIO_Init
 599              	.LVL47:
 133:Src/main.c    **** 
 600              		.loc 1 133 0
 601 000e FFF7FEFF 		bl	MX_TIM2_Init
 602              	.LVL48:
 136:Src/main.c    ****   /* HAL_Delay(1); */
 603              		.loc 1 136 0
 604 0012 0122     		movs	r2, #1
 605 0014 8021     		movs	r1, #128
ARM GAS  /tmp/cckMGtEN.s 			page 21


 606 0016 0948     		ldr	r0, .L53
 607 0018 FFF7FEFF 		bl	HAL_GPIO_WritePin
 608              	.LVL49:
 138:Src/main.c    ****     {
 609              		.loc 1 138 0
 610 001c 0848     		ldr	r0, .L53+4
 611 001e FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 612              	.LVL50:
 613 0022 18B1     		cbz	r0, .L50
 140:Src/main.c    ****     }
 614              		.loc 1 140 0
 615 0024 8C21     		movs	r1, #140
 616 0026 0748     		ldr	r0, .L53+8
 617 0028 FFF7FEFF 		bl	_Error_Handler
 618              	.LVL51:
 619              	.L50:
 143:Src/main.c    ****   /* USER CODE END 2 */
 620              		.loc 1 143 0
 621 002c 064B     		ldr	r3, .L53+12
 622 002e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 623 0030 064B     		ldr	r3, .L53+16
 624 0032 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 625 0034 FFF7FEFF 		bl	DALI_Send_Cmd
 626              	.LVL52:
 627              	.L51:
 628 0038 FEE7     		b	.L51
 629              	.L54:
 630 003a 00BF     		.align	2
 631              	.L53:
 632 003c 00140240 		.word	1073878016
 633 0040 00000000 		.word	htim2
 634 0044 00000000 		.word	.LC0
 635 0048 00000000 		.word	.LANCHOR3
 636 004c 00000000 		.word	.LANCHOR4
 637              		.cfi_endproc
 638              	.LFE123:
 640              		.section	.text.DALI_Master_Sending_Data,"ax",%progbits
 641              		.align	1
 642              		.global	DALI_Master_Sending_Data
 643              		.syntax unified
 644              		.thumb
 645              		.thumb_func
 646              		.fpu fpv4-sp-d16
 648              	DALI_Master_Sending_Data:
 649              	.LFB130:
 396:Src/main.c    ****   unsigned char pulsePosition = 0;
 650              		.loc 1 396 0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
 654 0000 08B5     		push	{r3, lr}
 655              	.LCFI17:
 656              		.cfi_def_cfa_offset 8
 657              		.cfi_offset 3, -8
 658              		.cfi_offset 14, -4
 659              	.LVL53:
 398:Src/main.c    ****     {
ARM GAS  /tmp/cckMGtEN.s 			page 22


 660              		.loc 1 398 0
 661 0002 324B     		ldr	r3, .L69
 662 0004 1B68     		ldr	r3, [r3]
 663 0006 072B     		cmp	r3, #7
 664 0008 15DD     		ble	.L66
 420:Src/main.c    ****     {
 665              		.loc 1 420 0
 666 000a 314A     		ldr	r2, .L69+4
 667 000c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 668 000e 102A     		cmp	r2, #16
 669 0010 1FD8     		bhi	.L58
 422:Src/main.c    ****   	{
 670              		.loc 1 422 0
 671 0012 13F0030F 		tst	r3, #3
 672 0016 1CD1     		bne	.L58
 424:Src/main.c    ****   	  if(pulsePosition % 2 == 0)
 673              		.loc 1 424 0
 674 0018 1946     		mov	r1, r3
 675 001a 002B     		cmp	r3, #0
 676 001c 2FDB     		blt	.L67
 677              	.L59:
 678              	.LVL54:
 425:Src/main.c    ****   	    {
 679              		.loc 1 425 0
 680 001e 11F0040F 		tst	r1, #4
 681 0022 34D1     		bne	.L60
 427:Src/main.c    ****   		{
 682              		.loc 1 427 0
 683 0024 2B4B     		ldr	r3, .L69+8
 684 0026 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 685 0028 5BBB     		cbnz	r3, .L61
 429:Src/main.c    ****   		}
 686              		.loc 1 429 0
 687 002a 0122     		movs	r2, #1
 688 002c 8021     		movs	r1, #128
 689              	.LVL55:
 690 002e 2A48     		ldr	r0, .L69+12
 691 0030 FFF7FEFF 		bl	HAL_GPIO_WritePin
 692              	.LVL56:
 693 0034 0DE0     		b	.L58
 694              	.LVL57:
 695              	.L66:
 403:Src/main.c    ****       /* Uncertain about the above text anyway! Has to be changed
 696              		.loc 1 403 0
 697 0036 0122     		movs	r2, #1
 698 0038 8021     		movs	r1, #128
 699 003a 2748     		ldr	r0, .L69+12
 700 003c FFF7FEFF 		bl	HAL_GPIO_WritePin
 701              	.LVL58:
 407:Src/main.c    **** 	{
 702              		.loc 1 407 0
 703 0040 224B     		ldr	r3, .L69
 704 0042 1B68     		ldr	r3, [r3]
 705 0044 032B     		cmp	r3, #3
 706 0046 14DC     		bgt	.L57
 409:Src/main.c    **** 	}
 707              		.loc 1 409 0
ARM GAS  /tmp/cckMGtEN.s 			page 23


 708 0048 0022     		movs	r2, #0
 709 004a 8021     		movs	r1, #128
 710 004c 2248     		ldr	r0, .L69+12
 711 004e FFF7FEFF 		bl	HAL_GPIO_WritePin
 712              	.LVL59:
 713              	.L58:
 450:Src/main.c    **** 
 714              		.loc 1 450 0
 715 0052 1E4A     		ldr	r2, .L69
 716 0054 1368     		ldr	r3, [r2]
 717 0056 0133     		adds	r3, r3, #1
 718 0058 1360     		str	r3, [r2]
 452:Src/main.c    ****     {
 719              		.loc 1 452 0
 720 005a 13F0070F 		tst	r3, #7
 721 005e 03D1     		bne	.L63
 454:Src/main.c    ****     }
 722              		.loc 1 454 0
 723 0060 1B4A     		ldr	r2, .L69+4
 724 0062 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 725 0064 0133     		adds	r3, r3, #1
 726 0066 1370     		strb	r3, [r2]
 727              	.L63:
 457:Src/main.c    ****     {
 728              		.loc 1 457 0
 729 0068 194B     		ldr	r3, .L69+4
 730 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 731 006c 102B     		cmp	r3, #16
 732 006e 1DD8     		bhi	.L68
 733              	.L55:
 734 0070 08BD     		pop	{r3, pc}
 735              	.LVL60:
 736              	.L57:
 417:Src/main.c    **** 	}
 737              		.loc 1 417 0
 738 0072 0122     		movs	r2, #1
 739 0074 8021     		movs	r1, #128
 740 0076 1848     		ldr	r0, .L69+12
 741 0078 FFF7FEFF 		bl	HAL_GPIO_WritePin
 742              	.LVL61:
 743 007c E9E7     		b	.L58
 744              	.L67:
 424:Src/main.c    ****   	  if(pulsePosition % 2 == 0)
 745              		.loc 1 424 0
 746 007e D91C     		adds	r1, r3, #3
 747 0080 CDE7     		b	.L59
 748              	.LVL62:
 749              	.L61:
 433:Src/main.c    ****   		}
 750              		.loc 1 433 0
 751 0082 0022     		movs	r2, #0
 752 0084 8021     		movs	r1, #128
 753              	.LVL63:
 754 0086 1448     		ldr	r0, .L69+12
 755 0088 FFF7FEFF 		bl	HAL_GPIO_WritePin
 756              	.LVL64:
 757 008c E1E7     		b	.L58
ARM GAS  /tmp/cckMGtEN.s 			page 24


 758              	.LVL65:
 759              	.L60:
 438:Src/main.c    ****   		{
 760              		.loc 1 438 0
 761 008e 114B     		ldr	r3, .L69+8
 762 0090 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 763 0092 2BB9     		cbnz	r3, .L62
 440:Src/main.c    ****   		}
 764              		.loc 1 440 0
 765 0094 0022     		movs	r2, #0
 766 0096 8021     		movs	r1, #128
 767              	.LVL66:
 768 0098 0F48     		ldr	r0, .L69+12
 769 009a FFF7FEFF 		bl	HAL_GPIO_WritePin
 770              	.LVL67:
 771 009e D8E7     		b	.L58
 772              	.LVL68:
 773              	.L62:
 444:Src/main.c    ****   		}
 774              		.loc 1 444 0
 775 00a0 0122     		movs	r2, #1
 776 00a2 8021     		movs	r1, #128
 777              	.LVL69:
 778 00a4 0C48     		ldr	r0, .L69+12
 779 00a6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 780              	.LVL70:
 781 00aa D2E7     		b	.L58
 782              	.L68:
 459:Src/main.c    ****       if(HAL_TIM_Base_Stop_IT(&htim2) != HAL_OK)
 783              		.loc 1 459 0
 784 00ac 0122     		movs	r2, #1
 785 00ae 8021     		movs	r1, #128
 786 00b0 0948     		ldr	r0, .L69+12
 787 00b2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 788              	.LVL71:
 460:Src/main.c    ****   	{
 789              		.loc 1 460 0
 790 00b6 0948     		ldr	r0, .L69+16
 791 00b8 FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
 792              	.LVL72:
 793 00bc 0028     		cmp	r0, #0
 794 00be D7D0     		beq	.L55
 462:Src/main.c    ****   	}
 795              		.loc 1 462 0
 796 00c0 4FF4E771 		mov	r1, #462
 797 00c4 0648     		ldr	r0, .L69+20
 798 00c6 FFF7FEFF 		bl	_Error_Handler
 799              	.LVL73:
 800              	.L70:
 801 00ca 00BF     		.align	2
 802              	.L69:
 803 00cc 00000000 		.word	.LANCHOR0
 804 00d0 00000000 		.word	.LANCHOR1
 805 00d4 00000000 		.word	.LANCHOR2
 806 00d8 00140240 		.word	1073878016
 807 00dc 00000000 		.word	htim2
 808 00e0 00000000 		.word	.LC0
ARM GAS  /tmp/cckMGtEN.s 			page 25


 809              		.cfi_endproc
 810              	.LFE130:
 812              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 813              		.align	1
 814              		.global	HAL_TIM_PeriodElapsedCallback
 815              		.syntax unified
 816              		.thumb
 817              		.thumb_func
 818              		.fpu fpv4-sp-d16
 820              	HAL_TIM_PeriodElapsedCallback:
 821              	.LFB129:
 382:Src/main.c    ****   if(dali_state == SENDING_DATA)
 822              		.loc 1 382 0
 823              		.cfi_startproc
 824              		@ args = 0, pretend = 0, frame = 0
 825              		@ frame_needed = 0, uses_anonymous_args = 0
 826              	.LVL74:
 827 0000 08B5     		push	{r3, lr}
 828              	.LCFI18:
 829              		.cfi_def_cfa_offset 8
 830              		.cfi_offset 3, -8
 831              		.cfi_offset 14, -4
 383:Src/main.c    ****     {
 832              		.loc 1 383 0
 833 0002 044B     		ldr	r3, .L75
 834 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 835 0006 012B     		cmp	r3, #1
 836 0008 00D0     		beq	.L74
 837              	.LVL75:
 838              	.L71:
 839 000a 08BD     		pop	{r3, pc}
 840              	.LVL76:
 841              	.L74:
 385:Src/main.c    ****     }
 842              		.loc 1 385 0
 843 000c FFF7FEFF 		bl	DALI_Master_Sending_Data
 844              	.LVL77:
 387:Src/main.c    **** 
 845              		.loc 1 387 0
 846 0010 FBE7     		b	.L71
 847              	.L76:
 848 0012 00BF     		.align	2
 849              	.L75:
 850 0014 00000000 		.word	dali_state
 851              		.cfi_endproc
 852              	.LFE129:
 854              		.section	.text.assert_failed,"ax",%progbits
 855              		.align	1
 856              		.global	assert_failed
 857              		.syntax unified
 858              		.thumb
 859              		.thumb_func
 860              		.fpu fpv4-sp-d16
 862              	assert_failed:
 863              	.LFB132:
 480:Src/main.c    **** 
 481:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
ARM GAS  /tmp/cckMGtEN.s 			page 26


 482:Src/main.c    ****   while(1) 
 483:Src/main.c    ****   {
 484:Src/main.c    ****   }
 485:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */ 
 486:Src/main.c    **** }
 487:Src/main.c    **** 
 488:Src/main.c    **** #ifdef USE_FULL_ASSERT
 489:Src/main.c    **** 
 490:Src/main.c    **** /**
 491:Src/main.c    ****    * @brief Reports the name of the source file and the source line number
 492:Src/main.c    ****    * where the assert_param error has occurred.
 493:Src/main.c    ****    * @param file: pointer to the source file name
 494:Src/main.c    ****    * @param line: assert_param error line source number
 495:Src/main.c    ****    * @retval None
 496:Src/main.c    ****    */
 497:Src/main.c    **** void assert_failed(uint8_t* file, uint32_t line)
 498:Src/main.c    **** {
 864              		.loc 1 498 0
 865              		.cfi_startproc
 866              		@ Volatile: function does not return.
 867              		@ args = 0, pretend = 0, frame = 0
 868              		@ frame_needed = 0, uses_anonymous_args = 0
 869              	.LVL78:
 870 0000 08B5     		push	{r3, lr}
 871              	.LCFI19:
 872              		.cfi_def_cfa_offset 8
 873              		.cfi_offset 3, -8
 874              		.cfi_offset 14, -4
 499:Src/main.c    ****   /* USER CODE BEGIN 6 */
 500:Src/main.c    ****   /* User can add his own implementation to report the file name and line number,
 501:Src/main.c    ****     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
 502:Src/main.c    ****   _Error_Handler(__FILE__, __LINE__);
 875              		.loc 1 502 0
 876 0002 4FF4FB71 		mov	r1, #502
 877              	.LVL79:
 878 0006 0148     		ldr	r0, .L79
 879              	.LVL80:
 880 0008 FFF7FEFF 		bl	_Error_Handler
 881              	.LVL81:
 882              	.L80:
 883              		.align	2
 884              	.L79:
 885 000c 00000000 		.word	.LC0
 886              		.cfi_endproc
 887              	.LFE132:
 889              		.global	bit_count
 890              		.global	tick_count
 891              		.global	start_timer
 892              		.comm	dali_state,1,1
 893              		.comm	former_val,1,1
 894              		.comm	actual_val,1,1
 895              		.global	cmd
 896              		.global	ballastAddr
 897              		.global	dali_master_array_receive_buffer
 898              		.global	dali_master_array_cmd
 899              		.comm	htim2,60,4
 900              		.section	.bss.bit_count,"aw",%nobits
ARM GAS  /tmp/cckMGtEN.s 			page 27


 901              		.set	.LANCHOR1,. + 0
 904              	bit_count:
 905 0000 00       		.space	1
 906              		.section	.bss.dali_master_array_cmd,"aw",%nobits
 907              		.align	2
 908              		.set	.LANCHOR2,. + 0
 911              	dali_master_array_cmd:
 912 0000 00000000 		.space	17
 912      00000000 
 912      00000000 
 912      00000000 
 912      00
 913              		.section	.bss.dali_master_array_receive_buffer,"aw",%nobits
 914              		.align	2
 917              	dali_master_array_receive_buffer:
 918 0000 00000000 		.space	9
 918      00000000 
 918      00
 919              		.section	.bss.start_timer,"aw",%nobits
 922              	start_timer:
 923 0000 00       		.space	1
 924              		.section	.bss.tick_count,"aw",%nobits
 925              		.align	2
 926              		.set	.LANCHOR0,. + 0
 929              	tick_count:
 930 0000 00000000 		.space	4
 931              		.section	.data.ballastAddr,"aw",%progbits
 932              		.set	.LANCHOR4,. + 0
 935              	ballastAddr:
 936 0000 D5       		.byte	-43
 937              		.section	.data.cmd,"aw",%progbits
 938              		.set	.LANCHOR3,. + 0
 941              	cmd:
 942 0000 56       		.byte	86
 943              		.section	.rodata.MX_TIM2_Init.str1.4,"aMS",%progbits,1
 944              		.align	2
 945              	.LC0:
 946 0000 5372632F 		.ascii	"Src/main.c\000"
 946      6D61696E 
 946      2E6300
 947              		.text
 948              	.Letext0:
 949              		.file 2 "/home/saicharan/arm/arm-none-eabi/include/machine/_default_types.h"
 950              		.file 3 "/home/saicharan/arm/arm-none-eabi/include/stdint.h"
 951              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 952              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 953              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 954              		.file 7 "/home/saicharan/arm/arm-none-eabi/include/sys/lock.h"
 955              		.file 8 "/home/saicharan/arm/arm-none-eabi/include/sys/_types.h"
 956              		.file 9 "/home/saicharan/arm/lib/gcc/arm-none-eabi/6.3.0/include/stddef.h"
 957              		.file 10 "/home/saicharan/arm/arm-none-eabi/include/sys/reent.h"
 958              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 959              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 960              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 961              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 962              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 963              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
ARM GAS  /tmp/cckMGtEN.s 			page 28


 964              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 965              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 966              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/cckMGtEN.s 			page 29


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cckMGtEN.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cckMGtEN.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cckMGtEN.s:110    .text.MX_GPIO_Init:0000000000000064 $d
     /tmp/cckMGtEN.s:117    .text.PrepareDataToSend:0000000000000000 $t
     /tmp/cckMGtEN.s:124    .text.PrepareDataToSend:0000000000000000 PrepareDataToSend
     /tmp/cckMGtEN.s:236    .text.DALI_Send_Cmd:0000000000000000 $t
     /tmp/cckMGtEN.s:243    .text.DALI_Send_Cmd:0000000000000000 DALI_Send_Cmd
     /tmp/cckMGtEN.s:290    .text.DALI_Send_Cmd:000000000000002c $d
                            *COM*:0000000000000001 dali_state
     /tmp/cckMGtEN.s:298    .text._Error_Handler:0000000000000000 $t
     /tmp/cckMGtEN.s:305    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/cckMGtEN.s:331    .text._Error_Handler:0000000000000010 $d
     /tmp/cckMGtEN.s:336    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/cckMGtEN.s:342    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/cckMGtEN.s:424    .text.MX_TIM2_Init:0000000000000060 $d
                            *COM*:000000000000003c htim2
     /tmp/cckMGtEN.s:430    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cckMGtEN.s:437    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cckMGtEN.s:564    .text.SystemClock_Config:00000000000000ac $d
     /tmp/cckMGtEN.s:572    .text.main:0000000000000000 $t
     /tmp/cckMGtEN.s:579    .text.main:0000000000000000 main
     /tmp/cckMGtEN.s:632    .text.main:000000000000003c $d
     /tmp/cckMGtEN.s:641    .text.DALI_Master_Sending_Data:0000000000000000 $t
     /tmp/cckMGtEN.s:648    .text.DALI_Master_Sending_Data:0000000000000000 DALI_Master_Sending_Data
     /tmp/cckMGtEN.s:803    .text.DALI_Master_Sending_Data:00000000000000cc $d
     /tmp/cckMGtEN.s:813    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cckMGtEN.s:820    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cckMGtEN.s:850    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/cckMGtEN.s:855    .text.assert_failed:0000000000000000 $t
     /tmp/cckMGtEN.s:862    .text.assert_failed:0000000000000000 assert_failed
     /tmp/cckMGtEN.s:885    .text.assert_failed:000000000000000c $d
     /tmp/cckMGtEN.s:904    .bss.bit_count:0000000000000000 bit_count
     /tmp/cckMGtEN.s:929    .bss.tick_count:0000000000000000 tick_count
     /tmp/cckMGtEN.s:922    .bss.start_timer:0000000000000000 start_timer
                            *COM*:0000000000000001 former_val
                            *COM*:0000000000000001 actual_val
     /tmp/cckMGtEN.s:941    .data.cmd:0000000000000000 cmd
     /tmp/cckMGtEN.s:935    .data.ballastAddr:0000000000000000 ballastAddr
     /tmp/cckMGtEN.s:917    .bss.dali_master_array_receive_buffer:0000000000000000 dali_master_array_receive_buffer
     /tmp/cckMGtEN.s:911    .bss.dali_master_array_cmd:0000000000000000 dali_master_array_cmd
     /tmp/cckMGtEN.s:905    .bss.bit_count:0000000000000000 $d
     /tmp/cckMGtEN.s:907    .bss.dali_master_array_cmd:0000000000000000 $d
     /tmp/cckMGtEN.s:914    .bss.dali_master_array_receive_buffer:0000000000000000 $d
     /tmp/cckMGtEN.s:923    .bss.start_timer:0000000000000000 $d
     /tmp/cckMGtEN.s:925    .bss.tick_count:0000000000000000 $d
     /tmp/cckMGtEN.s:944    .rodata.MX_TIM2_Init.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
ARM GAS  /tmp/cckMGtEN.s 			page 30


HAL_TIMEx_MasterConfigSynchronization
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_Init
HAL_TIM_Base_Start_IT
HAL_TIM_Base_Stop_IT
